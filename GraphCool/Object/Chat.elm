-- Do not manually edit this file, it was auto-generated by Graphqelm
-- https://github.com/dillonkearns/graphqelm


module GraphCool.Object.Chat exposing (..)

import GraphCool.Enum.DateState
import GraphCool.Enum.MessageOrderBy
import GraphCool.InputObject
import GraphCool.Interface
import GraphCool.Object
import GraphCool.Scalar
import GraphCool.Union
import Graphqelm.Field as Field exposing (Field)
import Graphqelm.Internal.Builder.Argument as Argument exposing (Argument)
import Graphqelm.Internal.Builder.Object as Object
import Graphqelm.Internal.Encode as Encode exposing (Value)
import Graphqelm.OptionalArgument exposing (OptionalArgument(Absent))
import Graphqelm.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| Select fields to build up a SelectionSet for this object.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) GraphCool.Object.Chat
selection constructor =
    Object.selection constructor


{-|

  - filter -

-}
canceled : ({ filter : OptionalArgument GraphCool.InputObject.UserFilter } -> { filter : OptionalArgument GraphCool.InputObject.UserFilter }) -> SelectionSet decodesTo GraphCool.Object.User -> Field (Maybe decodesTo) GraphCool.Object.Chat
canceled fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter GraphCool.InputObject.encodeUserFilter ]
                |> List.filterMap identity
    in
    Object.selectionField "canceled" optionalArgs object (identity >> Decode.maybe)


dateState : Field GraphCool.Enum.DateState.DateState GraphCool.Object.Chat
dateState =
    Object.fieldDecoder "dateState" [] GraphCool.Enum.DateState.decoder


{-|

  - filter -

-}
event : ({ filter : OptionalArgument GraphCool.InputObject.EventFilter } -> { filter : OptionalArgument GraphCool.InputObject.EventFilter }) -> SelectionSet decodesTo GraphCool.Object.Event -> Field decodesTo GraphCool.Object.Chat
event fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter GraphCool.InputObject.encodeEventFilter ]
                |> List.filterMap identity
    in
    Object.selectionField "event" optionalArgs object identity


id : Field GraphCool.Scalar.Id GraphCool.Object.Chat
id =
    Object.fieldDecoder "id" [] (Decode.string |> Decode.map GraphCool.Scalar.Id)


{-|

  - filter -

-}
initiated : ({ filter : OptionalArgument GraphCool.InputObject.UserFilter } -> { filter : OptionalArgument GraphCool.InputObject.UserFilter }) -> SelectionSet decodesTo GraphCool.Object.User -> Field decodesTo GraphCool.Object.Chat
initiated fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter GraphCool.InputObject.encodeUserFilter ]
                |> List.filterMap identity
    in
    Object.selectionField "initiated" optionalArgs object identity


{-|

  - filter -

-}
messages : ({ filter : OptionalArgument GraphCool.InputObject.MessageFilter, orderBy : OptionalArgument GraphCool.Enum.MessageOrderBy.MessageOrderBy, skip : OptionalArgument Int, after : OptionalArgument String, before : OptionalArgument String, first : OptionalArgument Int, last : OptionalArgument Int } -> { filter : OptionalArgument GraphCool.InputObject.MessageFilter, orderBy : OptionalArgument GraphCool.Enum.MessageOrderBy.MessageOrderBy, skip : OptionalArgument Int, after : OptionalArgument String, before : OptionalArgument String, first : OptionalArgument Int, last : OptionalArgument Int }) -> SelectionSet decodesTo GraphCool.Object.Message -> Field (Maybe (List decodesTo)) GraphCool.Object.Chat
messages fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter GraphCool.InputObject.encodeMessageFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum GraphCool.Enum.MessageOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionField "messages" optionalArgs object (identity >> Decode.list >> Decode.maybe)


{-|

  - filter -

-}
passed : ({ filter : OptionalArgument GraphCool.InputObject.UserFilter } -> { filter : OptionalArgument GraphCool.InputObject.UserFilter }) -> SelectionSet decodesTo GraphCool.Object.User -> Field (Maybe decodesTo) GraphCool.Object.Chat
passed fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter GraphCool.InputObject.encodeUserFilter ]
                |> List.filterMap identity
    in
    Object.selectionField "passed" optionalArgs object (identity >> Decode.maybe)


{-|

  - filter -

-}
proposed : ({ filter : OptionalArgument GraphCool.InputObject.UserFilter } -> { filter : OptionalArgument GraphCool.InputObject.UserFilter }) -> SelectionSet decodesTo GraphCool.Object.User -> Field (Maybe decodesTo) GraphCool.Object.Chat
proposed fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter GraphCool.InputObject.encodeUserFilter ]
                |> List.filterMap identity
    in
    Object.selectionField "proposed" optionalArgs object (identity >> Decode.maybe)


{-|

  - filter -

-}
recipient : ({ filter : OptionalArgument GraphCool.InputObject.UserFilter } -> { filter : OptionalArgument GraphCool.InputObject.UserFilter }) -> SelectionSet decodesTo GraphCool.Object.User -> Field (Maybe decodesTo) GraphCool.Object.Chat
recipient fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter GraphCool.InputObject.encodeUserFilter ]
                |> List.filterMap identity
    in
    Object.selectionField "recipient" optionalArgs object (identity >> Decode.maybe)


{-| Meta information about the query.

  - filter -

-}
messagesMeta_ : ({ filter : OptionalArgument GraphCool.InputObject.MessageFilter, orderBy : OptionalArgument GraphCool.Enum.MessageOrderBy.MessageOrderBy, skip : OptionalArgument Int, after : OptionalArgument String, before : OptionalArgument String, first : OptionalArgument Int, last : OptionalArgument Int } -> { filter : OptionalArgument GraphCool.InputObject.MessageFilter, orderBy : OptionalArgument GraphCool.Enum.MessageOrderBy.MessageOrderBy, skip : OptionalArgument Int, after : OptionalArgument String, before : OptionalArgument String, first : OptionalArgument Int, last : OptionalArgument Int }) -> SelectionSet decodesTo GraphCool.Object.QueryMeta_ -> Field decodesTo GraphCool.Object.Chat
messagesMeta_ fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter GraphCool.InputObject.encodeMessageFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum GraphCool.Enum.MessageOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionField "_messagesMeta" optionalArgs object identity
