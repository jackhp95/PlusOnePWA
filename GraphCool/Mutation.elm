-- Do not manually edit this file, it was auto-generated by Graphqelm
-- https://github.com/dillonkearns/graphqelm


module GraphCool.Mutation exposing (..)

import GraphCool.Enum.DateState
import GraphCool.InputObject
import GraphCool.Interface
import GraphCool.Object
import GraphCool.Scalar
import GraphCool.Union
import Graphqelm.Field as Field exposing (Field)
import Graphqelm.Internal.Builder.Argument as Argument exposing (Argument)
import Graphqelm.Internal.Builder.Object as Object
import Graphqelm.Internal.Encode as Encode exposing (Value)
import Graphqelm.Operation exposing (RootMutation)
import Graphqelm.OptionalArgument exposing (OptionalArgument(Absent))
import Graphqelm.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


{-| Select fields to build up a top-level mutation. The request can be sent with
functions from `Graphqelm.Http`.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) RootMutation
selection constructor =
    Object.selection constructor


createChat : ({ dateState : OptionalArgument GraphCool.Enum.DateState.DateState, canceledId : OptionalArgument GraphCool.Scalar.Id, eventId : OptionalArgument GraphCool.Scalar.Id, event : OptionalArgument GraphCool.InputObject.ChateventEvent, initiatedId : OptionalArgument GraphCool.Scalar.Id, passedId : OptionalArgument GraphCool.Scalar.Id, poolId : OptionalArgument GraphCool.Scalar.Id, pool : OptionalArgument GraphCool.InputObject.ChatpoolPool, proposedId : OptionalArgument GraphCool.Scalar.Id, recipientId : OptionalArgument GraphCool.Scalar.Id, messagesIds : OptionalArgument (List GraphCool.Scalar.Id), messages : OptionalArgument (List GraphCool.InputObject.ChatmessagesMessage) } -> { dateState : OptionalArgument GraphCool.Enum.DateState.DateState, canceledId : OptionalArgument GraphCool.Scalar.Id, eventId : OptionalArgument GraphCool.Scalar.Id, event : OptionalArgument GraphCool.InputObject.ChateventEvent, initiatedId : OptionalArgument GraphCool.Scalar.Id, passedId : OptionalArgument GraphCool.Scalar.Id, poolId : OptionalArgument GraphCool.Scalar.Id, pool : OptionalArgument GraphCool.InputObject.ChatpoolPool, proposedId : OptionalArgument GraphCool.Scalar.Id, recipientId : OptionalArgument GraphCool.Scalar.Id, messagesIds : OptionalArgument (List GraphCool.Scalar.Id), messages : OptionalArgument (List GraphCool.InputObject.ChatmessagesMessage) }) -> SelectionSet decodesTo GraphCool.Object.Chat -> Field (Maybe decodesTo) RootMutation
createChat fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { dateState = Absent, canceledId = Absent, eventId = Absent, event = Absent, initiatedId = Absent, passedId = Absent, poolId = Absent, pool = Absent, proposedId = Absent, recipientId = Absent, messagesIds = Absent, messages = Absent }

        optionalArgs =
            [ Argument.optional "dateState" filledInOptionals.dateState (Encode.enum GraphCool.Enum.DateState.toString), Argument.optional "canceledId" filledInOptionals.canceledId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "eventId" filledInOptionals.eventId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "event" filledInOptionals.event GraphCool.InputObject.encodeChateventEvent, Argument.optional "initiatedId" filledInOptionals.initiatedId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "passedId" filledInOptionals.passedId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "poolId" filledInOptionals.poolId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "pool" filledInOptionals.pool GraphCool.InputObject.encodeChatpoolPool, Argument.optional "proposedId" filledInOptionals.proposedId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "recipientId" filledInOptionals.recipientId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "messagesIds" filledInOptionals.messagesIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "messages" filledInOptionals.messages (GraphCool.InputObject.encodeChatmessagesMessage |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionField "createChat" optionalArgs object (identity >> Decode.maybe)


createEvent : ({ endsAt : OptionalArgument GraphCool.Scalar.DateTime, nameFull : OptionalArgument String, private : OptionalArgument Bool, createdById : OptionalArgument GraphCool.Scalar.Id, poolId : OptionalArgument GraphCool.Scalar.Id, pool : OptionalArgument GraphCool.InputObject.EventpoolPool, chatsIds : OptionalArgument (List GraphCool.Scalar.Id), chats : OptionalArgument (List GraphCool.InputObject.EventchatsChat), hostsIds : OptionalArgument (List GraphCool.Scalar.Id), hosts : OptionalArgument (List GraphCool.InputObject.EventhostsHost), venuesIds : OptionalArgument (List GraphCool.Scalar.Id), venues : OptionalArgument (List GraphCool.InputObject.EventvenuesVenue) } -> { endsAt : OptionalArgument GraphCool.Scalar.DateTime, nameFull : OptionalArgument String, private : OptionalArgument Bool, createdById : OptionalArgument GraphCool.Scalar.Id, poolId : OptionalArgument GraphCool.Scalar.Id, pool : OptionalArgument GraphCool.InputObject.EventpoolPool, chatsIds : OptionalArgument (List GraphCool.Scalar.Id), chats : OptionalArgument (List GraphCool.InputObject.EventchatsChat), hostsIds : OptionalArgument (List GraphCool.Scalar.Id), hosts : OptionalArgument (List GraphCool.InputObject.EventhostsHost), venuesIds : OptionalArgument (List GraphCool.Scalar.Id), venues : OptionalArgument (List GraphCool.InputObject.EventvenuesVenue) }) -> { name : String, startsAt : GraphCool.Scalar.DateTime } -> SelectionSet decodesTo GraphCool.Object.Event -> Field (Maybe decodesTo) RootMutation
createEvent fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { endsAt = Absent, nameFull = Absent, private = Absent, createdById = Absent, poolId = Absent, pool = Absent, chatsIds = Absent, chats = Absent, hostsIds = Absent, hosts = Absent, venuesIds = Absent, venues = Absent }

        optionalArgs =
            [ Argument.optional "endsAt" filledInOptionals.endsAt (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw), Argument.optional "nameFull" filledInOptionals.nameFull Encode.string, Argument.optional "private" filledInOptionals.private Encode.bool, Argument.optional "createdById" filledInOptionals.createdById (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "poolId" filledInOptionals.poolId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "pool" filledInOptionals.pool GraphCool.InputObject.encodeEventpoolPool, Argument.optional "chatsIds" filledInOptionals.chatsIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "chats" filledInOptionals.chats (GraphCool.InputObject.encodeEventchatsChat |> Encode.list), Argument.optional "hostsIds" filledInOptionals.hostsIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "hosts" filledInOptionals.hosts (GraphCool.InputObject.encodeEventhostsHost |> Encode.list), Argument.optional "venuesIds" filledInOptionals.venuesIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "venues" filledInOptionals.venues (GraphCool.InputObject.encodeEventvenuesVenue |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionField "createEvent" (optionalArgs ++ [ Argument.required "name" requiredArgs.name Encode.string, Argument.required "startsAt" requiredArgs.startsAt (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) ]) object (identity >> Decode.maybe)


createFile : { name : String } -> SelectionSet decodesTo GraphCool.Object.File -> Field (Maybe decodesTo) RootMutation
createFile requiredArgs object =
    Object.selectionField "createFile" [ Argument.required "name" requiredArgs.name Encode.string ] object (identity >> Decode.maybe)


createHost : ({ description : OptionalArgument String, nameFull : OptionalArgument String, eventsIds : OptionalArgument (List GraphCool.Scalar.Id), events : OptionalArgument (List GraphCool.InputObject.HosteventsEvent), usersIds : OptionalArgument (List GraphCool.Scalar.Id), venuesIds : OptionalArgument (List GraphCool.Scalar.Id), venues : OptionalArgument (List GraphCool.InputObject.HostvenuesVenue) } -> { description : OptionalArgument String, nameFull : OptionalArgument String, eventsIds : OptionalArgument (List GraphCool.Scalar.Id), events : OptionalArgument (List GraphCool.InputObject.HosteventsEvent), usersIds : OptionalArgument (List GraphCool.Scalar.Id), venuesIds : OptionalArgument (List GraphCool.Scalar.Id), venues : OptionalArgument (List GraphCool.InputObject.HostvenuesVenue) }) -> { name : String } -> SelectionSet decodesTo GraphCool.Object.Host -> Field (Maybe decodesTo) RootMutation
createHost fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { description = Absent, nameFull = Absent, eventsIds = Absent, events = Absent, usersIds = Absent, venuesIds = Absent, venues = Absent }

        optionalArgs =
            [ Argument.optional "description" filledInOptionals.description Encode.string, Argument.optional "nameFull" filledInOptionals.nameFull Encode.string, Argument.optional "eventsIds" filledInOptionals.eventsIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "events" filledInOptionals.events (GraphCool.InputObject.encodeHosteventsEvent |> Encode.list), Argument.optional "usersIds" filledInOptionals.usersIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "venuesIds" filledInOptionals.venuesIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "venues" filledInOptionals.venues (GraphCool.InputObject.encodeHostvenuesVenue |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionField "createHost" (optionalArgs ++ [ Argument.required "name" requiredArgs.name Encode.string ]) object (identity >> Decode.maybe)


createLocation : ({ address : OptionalArgument String, addressFull : OptionalArgument String, city : OptionalArgument String, country : OptionalArgument String, zip : OptionalArgument String, venueId : OptionalArgument GraphCool.Scalar.Id, venue : OptionalArgument GraphCool.InputObject.LocationvenueVenue } -> { address : OptionalArgument String, addressFull : OptionalArgument String, city : OptionalArgument String, country : OptionalArgument String, zip : OptionalArgument String, venueId : OptionalArgument GraphCool.Scalar.Id, venue : OptionalArgument GraphCool.InputObject.LocationvenueVenue }) -> { lat : Float, lon : Float, state : String } -> SelectionSet decodesTo GraphCool.Object.Location -> Field (Maybe decodesTo) RootMutation
createLocation fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { address = Absent, addressFull = Absent, city = Absent, country = Absent, zip = Absent, venueId = Absent, venue = Absent }

        optionalArgs =
            [ Argument.optional "address" filledInOptionals.address Encode.string, Argument.optional "addressFull" filledInOptionals.addressFull Encode.string, Argument.optional "city" filledInOptionals.city Encode.string, Argument.optional "country" filledInOptionals.country Encode.string, Argument.optional "zip" filledInOptionals.zip Encode.string, Argument.optional "venueId" filledInOptionals.venueId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "venue" filledInOptionals.venue GraphCool.InputObject.encodeLocationvenueVenue ]
                |> List.filterMap identity
    in
    Object.selectionField "createLocation" (optionalArgs ++ [ Argument.required "lat" requiredArgs.lat Encode.float, Argument.required "lon" requiredArgs.lon Encode.float, Argument.required "state" requiredArgs.state Encode.string ]) object (identity >> Decode.maybe)


createMessage : ({ chatId : OptionalArgument GraphCool.Scalar.Id, chat : OptionalArgument GraphCool.InputObject.MessagechatChat, fromId : OptionalArgument GraphCool.Scalar.Id } -> { chatId : OptionalArgument GraphCool.Scalar.Id, chat : OptionalArgument GraphCool.InputObject.MessagechatChat, fromId : OptionalArgument GraphCool.Scalar.Id }) -> { text : String } -> SelectionSet decodesTo GraphCool.Object.Message -> Field (Maybe decodesTo) RootMutation
createMessage fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { chatId = Absent, chat = Absent, fromId = Absent }

        optionalArgs =
            [ Argument.optional "chatId" filledInOptionals.chatId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "chat" filledInOptionals.chat GraphCool.InputObject.encodeMessagechatChat, Argument.optional "fromId" filledInOptionals.fromId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ]
                |> List.filterMap identity
    in
    Object.selectionField "createMessage" (optionalArgs ++ [ Argument.required "text" requiredArgs.text Encode.string ]) object (identity >> Decode.maybe)


createPool : ({ seatGeekId : OptionalArgument String, eventId : OptionalArgument GraphCool.Scalar.Id, event : OptionalArgument GraphCool.InputObject.PooleventEvent, attendingIds : OptionalArgument (List GraphCool.Scalar.Id), chatsIds : OptionalArgument (List GraphCool.Scalar.Id), chats : OptionalArgument (List GraphCool.InputObject.PoolchatsChat), likedIds : OptionalArgument (List GraphCool.Scalar.Id), viewedIds : OptionalArgument (List GraphCool.Scalar.Id) } -> { seatGeekId : OptionalArgument String, eventId : OptionalArgument GraphCool.Scalar.Id, event : OptionalArgument GraphCool.InputObject.PooleventEvent, attendingIds : OptionalArgument (List GraphCool.Scalar.Id), chatsIds : OptionalArgument (List GraphCool.Scalar.Id), chats : OptionalArgument (List GraphCool.InputObject.PoolchatsChat), likedIds : OptionalArgument (List GraphCool.Scalar.Id), viewedIds : OptionalArgument (List GraphCool.Scalar.Id) }) -> SelectionSet decodesTo GraphCool.Object.Pool -> Field (Maybe decodesTo) RootMutation
createPool fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { seatGeekId = Absent, eventId = Absent, event = Absent, attendingIds = Absent, chatsIds = Absent, chats = Absent, likedIds = Absent, viewedIds = Absent }

        optionalArgs =
            [ Argument.optional "seatGeekId" filledInOptionals.seatGeekId Encode.string, Argument.optional "eventId" filledInOptionals.eventId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "event" filledInOptionals.event GraphCool.InputObject.encodePooleventEvent, Argument.optional "attendingIds" filledInOptionals.attendingIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "chatsIds" filledInOptionals.chatsIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "chats" filledInOptionals.chats (GraphCool.InputObject.encodePoolchatsChat |> Encode.list), Argument.optional "likedIds" filledInOptionals.likedIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "viewedIds" filledInOptionals.viewedIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionField "createPool" optionalArgs object (identity >> Decode.maybe)


createVenue : ({ description : OptionalArgument String, locationId : OptionalArgument GraphCool.Scalar.Id, location : OptionalArgument GraphCool.InputObject.VenuelocationLocation, eventsIds : OptionalArgument (List GraphCool.Scalar.Id), events : OptionalArgument (List GraphCool.InputObject.VenueeventsEvent), hostsIds : OptionalArgument (List GraphCool.Scalar.Id), hosts : OptionalArgument (List GraphCool.InputObject.VenuehostsHost) } -> { description : OptionalArgument String, locationId : OptionalArgument GraphCool.Scalar.Id, location : OptionalArgument GraphCool.InputObject.VenuelocationLocation, eventsIds : OptionalArgument (List GraphCool.Scalar.Id), events : OptionalArgument (List GraphCool.InputObject.VenueeventsEvent), hostsIds : OptionalArgument (List GraphCool.Scalar.Id), hosts : OptionalArgument (List GraphCool.InputObject.VenuehostsHost) }) -> { name : String, nameFull : String } -> SelectionSet decodesTo GraphCool.Object.Venue -> Field (Maybe decodesTo) RootMutation
createVenue fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { description = Absent, locationId = Absent, location = Absent, eventsIds = Absent, events = Absent, hostsIds = Absent, hosts = Absent }

        optionalArgs =
            [ Argument.optional "description" filledInOptionals.description Encode.string, Argument.optional "locationId" filledInOptionals.locationId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "location" filledInOptionals.location GraphCool.InputObject.encodeVenuelocationLocation, Argument.optional "eventsIds" filledInOptionals.eventsIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "events" filledInOptionals.events (GraphCool.InputObject.encodeVenueeventsEvent |> Encode.list), Argument.optional "hostsIds" filledInOptionals.hostsIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "hosts" filledInOptionals.hosts (GraphCool.InputObject.encodeVenuehostsHost |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionField "createVenue" (optionalArgs ++ [ Argument.required "name" requiredArgs.name Encode.string, Argument.required "nameFull" requiredArgs.nameFull Encode.string ]) object (identity >> Decode.maybe)


updateChat : ({ dateState : OptionalArgument GraphCool.Enum.DateState.DateState, canceledId : OptionalArgument GraphCool.Scalar.Id, eventId : OptionalArgument GraphCool.Scalar.Id, event : OptionalArgument GraphCool.InputObject.ChateventEvent, initiatedId : OptionalArgument GraphCool.Scalar.Id, passedId : OptionalArgument GraphCool.Scalar.Id, poolId : OptionalArgument GraphCool.Scalar.Id, pool : OptionalArgument GraphCool.InputObject.ChatpoolPool, proposedId : OptionalArgument GraphCool.Scalar.Id, recipientId : OptionalArgument GraphCool.Scalar.Id, messagesIds : OptionalArgument (List GraphCool.Scalar.Id), messages : OptionalArgument (List GraphCool.InputObject.ChatmessagesMessage) } -> { dateState : OptionalArgument GraphCool.Enum.DateState.DateState, canceledId : OptionalArgument GraphCool.Scalar.Id, eventId : OptionalArgument GraphCool.Scalar.Id, event : OptionalArgument GraphCool.InputObject.ChateventEvent, initiatedId : OptionalArgument GraphCool.Scalar.Id, passedId : OptionalArgument GraphCool.Scalar.Id, poolId : OptionalArgument GraphCool.Scalar.Id, pool : OptionalArgument GraphCool.InputObject.ChatpoolPool, proposedId : OptionalArgument GraphCool.Scalar.Id, recipientId : OptionalArgument GraphCool.Scalar.Id, messagesIds : OptionalArgument (List GraphCool.Scalar.Id), messages : OptionalArgument (List GraphCool.InputObject.ChatmessagesMessage) }) -> { id : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.Chat -> Field (Maybe decodesTo) RootMutation
updateChat fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { dateState = Absent, canceledId = Absent, eventId = Absent, event = Absent, initiatedId = Absent, passedId = Absent, poolId = Absent, pool = Absent, proposedId = Absent, recipientId = Absent, messagesIds = Absent, messages = Absent }

        optionalArgs =
            [ Argument.optional "dateState" filledInOptionals.dateState (Encode.enum GraphCool.Enum.DateState.toString), Argument.optional "canceledId" filledInOptionals.canceledId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "eventId" filledInOptionals.eventId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "event" filledInOptionals.event GraphCool.InputObject.encodeChateventEvent, Argument.optional "initiatedId" filledInOptionals.initiatedId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "passedId" filledInOptionals.passedId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "poolId" filledInOptionals.poolId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "pool" filledInOptionals.pool GraphCool.InputObject.encodeChatpoolPool, Argument.optional "proposedId" filledInOptionals.proposedId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "recipientId" filledInOptionals.recipientId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "messagesIds" filledInOptionals.messagesIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "messages" filledInOptionals.messages (GraphCool.InputObject.encodeChatmessagesMessage |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionField "updateChat" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ]) object (identity >> Decode.maybe)


updateEvent : ({ endsAt : OptionalArgument GraphCool.Scalar.DateTime, name : OptionalArgument String, nameFull : OptionalArgument String, private : OptionalArgument Bool, startsAt : OptionalArgument GraphCool.Scalar.DateTime, createdById : OptionalArgument GraphCool.Scalar.Id, poolId : OptionalArgument GraphCool.Scalar.Id, pool : OptionalArgument GraphCool.InputObject.EventpoolPool, chatsIds : OptionalArgument (List GraphCool.Scalar.Id), chats : OptionalArgument (List GraphCool.InputObject.EventchatsChat), hostsIds : OptionalArgument (List GraphCool.Scalar.Id), hosts : OptionalArgument (List GraphCool.InputObject.EventhostsHost), venuesIds : OptionalArgument (List GraphCool.Scalar.Id), venues : OptionalArgument (List GraphCool.InputObject.EventvenuesVenue) } -> { endsAt : OptionalArgument GraphCool.Scalar.DateTime, name : OptionalArgument String, nameFull : OptionalArgument String, private : OptionalArgument Bool, startsAt : OptionalArgument GraphCool.Scalar.DateTime, createdById : OptionalArgument GraphCool.Scalar.Id, poolId : OptionalArgument GraphCool.Scalar.Id, pool : OptionalArgument GraphCool.InputObject.EventpoolPool, chatsIds : OptionalArgument (List GraphCool.Scalar.Id), chats : OptionalArgument (List GraphCool.InputObject.EventchatsChat), hostsIds : OptionalArgument (List GraphCool.Scalar.Id), hosts : OptionalArgument (List GraphCool.InputObject.EventhostsHost), venuesIds : OptionalArgument (List GraphCool.Scalar.Id), venues : OptionalArgument (List GraphCool.InputObject.EventvenuesVenue) }) -> { id : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.Event -> Field (Maybe decodesTo) RootMutation
updateEvent fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { endsAt = Absent, name = Absent, nameFull = Absent, private = Absent, startsAt = Absent, createdById = Absent, poolId = Absent, pool = Absent, chatsIds = Absent, chats = Absent, hostsIds = Absent, hosts = Absent, venuesIds = Absent, venues = Absent }

        optionalArgs =
            [ Argument.optional "endsAt" filledInOptionals.endsAt (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw), Argument.optional "name" filledInOptionals.name Encode.string, Argument.optional "nameFull" filledInOptionals.nameFull Encode.string, Argument.optional "private" filledInOptionals.private Encode.bool, Argument.optional "startsAt" filledInOptionals.startsAt (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw), Argument.optional "createdById" filledInOptionals.createdById (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "poolId" filledInOptionals.poolId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "pool" filledInOptionals.pool GraphCool.InputObject.encodeEventpoolPool, Argument.optional "chatsIds" filledInOptionals.chatsIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "chats" filledInOptionals.chats (GraphCool.InputObject.encodeEventchatsChat |> Encode.list), Argument.optional "hostsIds" filledInOptionals.hostsIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "hosts" filledInOptionals.hosts (GraphCool.InputObject.encodeEventhostsHost |> Encode.list), Argument.optional "venuesIds" filledInOptionals.venuesIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "venues" filledInOptionals.venues (GraphCool.InputObject.encodeEventvenuesVenue |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionField "updateEvent" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ]) object (identity >> Decode.maybe)


updateFile : ({ name : OptionalArgument String } -> { name : OptionalArgument String }) -> { id : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.File -> Field (Maybe decodesTo) RootMutation
updateFile fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { name = Absent }

        optionalArgs =
            [ Argument.optional "name" filledInOptionals.name Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionField "updateFile" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ]) object (identity >> Decode.maybe)


updateHost : ({ description : OptionalArgument String, name : OptionalArgument String, nameFull : OptionalArgument String, eventsIds : OptionalArgument (List GraphCool.Scalar.Id), events : OptionalArgument (List GraphCool.InputObject.HosteventsEvent), usersIds : OptionalArgument (List GraphCool.Scalar.Id), venuesIds : OptionalArgument (List GraphCool.Scalar.Id), venues : OptionalArgument (List GraphCool.InputObject.HostvenuesVenue) } -> { description : OptionalArgument String, name : OptionalArgument String, nameFull : OptionalArgument String, eventsIds : OptionalArgument (List GraphCool.Scalar.Id), events : OptionalArgument (List GraphCool.InputObject.HosteventsEvent), usersIds : OptionalArgument (List GraphCool.Scalar.Id), venuesIds : OptionalArgument (List GraphCool.Scalar.Id), venues : OptionalArgument (List GraphCool.InputObject.HostvenuesVenue) }) -> { id : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.Host -> Field (Maybe decodesTo) RootMutation
updateHost fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { description = Absent, name = Absent, nameFull = Absent, eventsIds = Absent, events = Absent, usersIds = Absent, venuesIds = Absent, venues = Absent }

        optionalArgs =
            [ Argument.optional "description" filledInOptionals.description Encode.string, Argument.optional "name" filledInOptionals.name Encode.string, Argument.optional "nameFull" filledInOptionals.nameFull Encode.string, Argument.optional "eventsIds" filledInOptionals.eventsIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "events" filledInOptionals.events (GraphCool.InputObject.encodeHosteventsEvent |> Encode.list), Argument.optional "usersIds" filledInOptionals.usersIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "venuesIds" filledInOptionals.venuesIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "venues" filledInOptionals.venues (GraphCool.InputObject.encodeHostvenuesVenue |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionField "updateHost" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ]) object (identity >> Decode.maybe)


updateLocation : ({ address : OptionalArgument String, addressFull : OptionalArgument String, city : OptionalArgument String, country : OptionalArgument String, lat : OptionalArgument Float, lon : OptionalArgument Float, state : OptionalArgument String, zip : OptionalArgument String, venueId : OptionalArgument GraphCool.Scalar.Id, venue : OptionalArgument GraphCool.InputObject.LocationvenueVenue } -> { address : OptionalArgument String, addressFull : OptionalArgument String, city : OptionalArgument String, country : OptionalArgument String, lat : OptionalArgument Float, lon : OptionalArgument Float, state : OptionalArgument String, zip : OptionalArgument String, venueId : OptionalArgument GraphCool.Scalar.Id, venue : OptionalArgument GraphCool.InputObject.LocationvenueVenue }) -> { id : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.Location -> Field (Maybe decodesTo) RootMutation
updateLocation fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { address = Absent, addressFull = Absent, city = Absent, country = Absent, lat = Absent, lon = Absent, state = Absent, zip = Absent, venueId = Absent, venue = Absent }

        optionalArgs =
            [ Argument.optional "address" filledInOptionals.address Encode.string, Argument.optional "addressFull" filledInOptionals.addressFull Encode.string, Argument.optional "city" filledInOptionals.city Encode.string, Argument.optional "country" filledInOptionals.country Encode.string, Argument.optional "lat" filledInOptionals.lat Encode.float, Argument.optional "lon" filledInOptionals.lon Encode.float, Argument.optional "state" filledInOptionals.state Encode.string, Argument.optional "zip" filledInOptionals.zip Encode.string, Argument.optional "venueId" filledInOptionals.venueId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "venue" filledInOptionals.venue GraphCool.InputObject.encodeLocationvenueVenue ]
                |> List.filterMap identity
    in
    Object.selectionField "updateLocation" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ]) object (identity >> Decode.maybe)


updateMessage : ({ text : OptionalArgument String, chatId : OptionalArgument GraphCool.Scalar.Id, chat : OptionalArgument GraphCool.InputObject.MessagechatChat, fromId : OptionalArgument GraphCool.Scalar.Id } -> { text : OptionalArgument String, chatId : OptionalArgument GraphCool.Scalar.Id, chat : OptionalArgument GraphCool.InputObject.MessagechatChat, fromId : OptionalArgument GraphCool.Scalar.Id }) -> { id : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.Message -> Field (Maybe decodesTo) RootMutation
updateMessage fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { text = Absent, chatId = Absent, chat = Absent, fromId = Absent }

        optionalArgs =
            [ Argument.optional "text" filledInOptionals.text Encode.string, Argument.optional "chatId" filledInOptionals.chatId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "chat" filledInOptionals.chat GraphCool.InputObject.encodeMessagechatChat, Argument.optional "fromId" filledInOptionals.fromId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ]
                |> List.filterMap identity
    in
    Object.selectionField "updateMessage" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ]) object (identity >> Decode.maybe)


updatePool : ({ seatGeekId : OptionalArgument String, eventId : OptionalArgument GraphCool.Scalar.Id, event : OptionalArgument GraphCool.InputObject.PooleventEvent, attendingIds : OptionalArgument (List GraphCool.Scalar.Id), chatsIds : OptionalArgument (List GraphCool.Scalar.Id), chats : OptionalArgument (List GraphCool.InputObject.PoolchatsChat), likedIds : OptionalArgument (List GraphCool.Scalar.Id), viewedIds : OptionalArgument (List GraphCool.Scalar.Id) } -> { seatGeekId : OptionalArgument String, eventId : OptionalArgument GraphCool.Scalar.Id, event : OptionalArgument GraphCool.InputObject.PooleventEvent, attendingIds : OptionalArgument (List GraphCool.Scalar.Id), chatsIds : OptionalArgument (List GraphCool.Scalar.Id), chats : OptionalArgument (List GraphCool.InputObject.PoolchatsChat), likedIds : OptionalArgument (List GraphCool.Scalar.Id), viewedIds : OptionalArgument (List GraphCool.Scalar.Id) }) -> { id : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.Pool -> Field (Maybe decodesTo) RootMutation
updatePool fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { seatGeekId = Absent, eventId = Absent, event = Absent, attendingIds = Absent, chatsIds = Absent, chats = Absent, likedIds = Absent, viewedIds = Absent }

        optionalArgs =
            [ Argument.optional "seatGeekId" filledInOptionals.seatGeekId Encode.string, Argument.optional "eventId" filledInOptionals.eventId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "event" filledInOptionals.event GraphCool.InputObject.encodePooleventEvent, Argument.optional "attendingIds" filledInOptionals.attendingIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "chatsIds" filledInOptionals.chatsIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "chats" filledInOptionals.chats (GraphCool.InputObject.encodePoolchatsChat |> Encode.list), Argument.optional "likedIds" filledInOptionals.likedIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "viewedIds" filledInOptionals.viewedIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionField "updatePool" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ]) object (identity >> Decode.maybe)


updateUser : ({ bio : OptionalArgument String, birthday : OptionalArgument GraphCool.Scalar.DateTime, name : OptionalArgument String, nameFull : OptionalArgument String, attendingEventIds : OptionalArgument (List GraphCool.Scalar.Id), attendingEvent : OptionalArgument (List GraphCool.InputObject.UserattendingEventPool), createdEventsIds : OptionalArgument (List GraphCool.Scalar.Id), createdEvents : OptionalArgument (List GraphCool.InputObject.UsercreatedEventsEvent), datesCanceledIds : OptionalArgument (List GraphCool.Scalar.Id), datesCanceled : OptionalArgument (List GraphCool.InputObject.UserdatesCanceledChat), hostsIds : OptionalArgument (List GraphCool.Scalar.Id), hosts : OptionalArgument (List GraphCool.InputObject.UserhostsHost), initiatedIds : OptionalArgument (List GraphCool.Scalar.Id), initiated : OptionalArgument (List GraphCool.InputObject.UserinitiatedChat), likedEventIds : OptionalArgument (List GraphCool.Scalar.Id), likedEvent : OptionalArgument (List GraphCool.InputObject.UserlikedEventPool), passedIds : OptionalArgument (List GraphCool.Scalar.Id), passed : OptionalArgument (List GraphCool.InputObject.UserpassedChat), proposedIds : OptionalArgument (List GraphCool.Scalar.Id), proposed : OptionalArgument (List GraphCool.InputObject.UserproposedChat), recipientIds : OptionalArgument (List GraphCool.Scalar.Id), recipient : OptionalArgument (List GraphCool.InputObject.UserrecipientChat), sentIds : OptionalArgument (List GraphCool.Scalar.Id), sent : OptionalArgument (List GraphCool.InputObject.UsersentMessage), viewedEventIds : OptionalArgument (List GraphCool.Scalar.Id), viewedEvent : OptionalArgument (List GraphCool.InputObject.UserviewedEventPool) } -> { bio : OptionalArgument String, birthday : OptionalArgument GraphCool.Scalar.DateTime, name : OptionalArgument String, nameFull : OptionalArgument String, attendingEventIds : OptionalArgument (List GraphCool.Scalar.Id), attendingEvent : OptionalArgument (List GraphCool.InputObject.UserattendingEventPool), createdEventsIds : OptionalArgument (List GraphCool.Scalar.Id), createdEvents : OptionalArgument (List GraphCool.InputObject.UsercreatedEventsEvent), datesCanceledIds : OptionalArgument (List GraphCool.Scalar.Id), datesCanceled : OptionalArgument (List GraphCool.InputObject.UserdatesCanceledChat), hostsIds : OptionalArgument (List GraphCool.Scalar.Id), hosts : OptionalArgument (List GraphCool.InputObject.UserhostsHost), initiatedIds : OptionalArgument (List GraphCool.Scalar.Id), initiated : OptionalArgument (List GraphCool.InputObject.UserinitiatedChat), likedEventIds : OptionalArgument (List GraphCool.Scalar.Id), likedEvent : OptionalArgument (List GraphCool.InputObject.UserlikedEventPool), passedIds : OptionalArgument (List GraphCool.Scalar.Id), passed : OptionalArgument (List GraphCool.InputObject.UserpassedChat), proposedIds : OptionalArgument (List GraphCool.Scalar.Id), proposed : OptionalArgument (List GraphCool.InputObject.UserproposedChat), recipientIds : OptionalArgument (List GraphCool.Scalar.Id), recipient : OptionalArgument (List GraphCool.InputObject.UserrecipientChat), sentIds : OptionalArgument (List GraphCool.Scalar.Id), sent : OptionalArgument (List GraphCool.InputObject.UsersentMessage), viewedEventIds : OptionalArgument (List GraphCool.Scalar.Id), viewedEvent : OptionalArgument (List GraphCool.InputObject.UserviewedEventPool) }) -> { id : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.User -> Field (Maybe decodesTo) RootMutation
updateUser fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { bio = Absent, birthday = Absent, name = Absent, nameFull = Absent, attendingEventIds = Absent, attendingEvent = Absent, createdEventsIds = Absent, createdEvents = Absent, datesCanceledIds = Absent, datesCanceled = Absent, hostsIds = Absent, hosts = Absent, initiatedIds = Absent, initiated = Absent, likedEventIds = Absent, likedEvent = Absent, passedIds = Absent, passed = Absent, proposedIds = Absent, proposed = Absent, recipientIds = Absent, recipient = Absent, sentIds = Absent, sent = Absent, viewedEventIds = Absent, viewedEvent = Absent }

        optionalArgs =
            [ Argument.optional "bio" filledInOptionals.bio Encode.string, Argument.optional "birthday" filledInOptionals.birthday (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw), Argument.optional "name" filledInOptionals.name Encode.string, Argument.optional "nameFull" filledInOptionals.nameFull Encode.string, Argument.optional "attendingEventIds" filledInOptionals.attendingEventIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "attendingEvent" filledInOptionals.attendingEvent (GraphCool.InputObject.encodeUserattendingEventPool |> Encode.list), Argument.optional "createdEventsIds" filledInOptionals.createdEventsIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "createdEvents" filledInOptionals.createdEvents (GraphCool.InputObject.encodeUsercreatedEventsEvent |> Encode.list), Argument.optional "datesCanceledIds" filledInOptionals.datesCanceledIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "datesCanceled" filledInOptionals.datesCanceled (GraphCool.InputObject.encodeUserdatesCanceledChat |> Encode.list), Argument.optional "hostsIds" filledInOptionals.hostsIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "hosts" filledInOptionals.hosts (GraphCool.InputObject.encodeUserhostsHost |> Encode.list), Argument.optional "initiatedIds" filledInOptionals.initiatedIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "initiated" filledInOptionals.initiated (GraphCool.InputObject.encodeUserinitiatedChat |> Encode.list), Argument.optional "likedEventIds" filledInOptionals.likedEventIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "likedEvent" filledInOptionals.likedEvent (GraphCool.InputObject.encodeUserlikedEventPool |> Encode.list), Argument.optional "passedIds" filledInOptionals.passedIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "passed" filledInOptionals.passed (GraphCool.InputObject.encodeUserpassedChat |> Encode.list), Argument.optional "proposedIds" filledInOptionals.proposedIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "proposed" filledInOptionals.proposed (GraphCool.InputObject.encodeUserproposedChat |> Encode.list), Argument.optional "recipientIds" filledInOptionals.recipientIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "recipient" filledInOptionals.recipient (GraphCool.InputObject.encodeUserrecipientChat |> Encode.list), Argument.optional "sentIds" filledInOptionals.sentIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "sent" filledInOptionals.sent (GraphCool.InputObject.encodeUsersentMessage |> Encode.list), Argument.optional "viewedEventIds" filledInOptionals.viewedEventIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "viewedEvent" filledInOptionals.viewedEvent (GraphCool.InputObject.encodeUserviewedEventPool |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionField "updateUser" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ]) object (identity >> Decode.maybe)


updateVenue : ({ description : OptionalArgument String, name : OptionalArgument String, nameFull : OptionalArgument String, locationId : OptionalArgument GraphCool.Scalar.Id, location : OptionalArgument GraphCool.InputObject.VenuelocationLocation, eventsIds : OptionalArgument (List GraphCool.Scalar.Id), events : OptionalArgument (List GraphCool.InputObject.VenueeventsEvent), hostsIds : OptionalArgument (List GraphCool.Scalar.Id), hosts : OptionalArgument (List GraphCool.InputObject.VenuehostsHost) } -> { description : OptionalArgument String, name : OptionalArgument String, nameFull : OptionalArgument String, locationId : OptionalArgument GraphCool.Scalar.Id, location : OptionalArgument GraphCool.InputObject.VenuelocationLocation, eventsIds : OptionalArgument (List GraphCool.Scalar.Id), events : OptionalArgument (List GraphCool.InputObject.VenueeventsEvent), hostsIds : OptionalArgument (List GraphCool.Scalar.Id), hosts : OptionalArgument (List GraphCool.InputObject.VenuehostsHost) }) -> { id : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.Venue -> Field (Maybe decodesTo) RootMutation
updateVenue fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { description = Absent, name = Absent, nameFull = Absent, locationId = Absent, location = Absent, eventsIds = Absent, events = Absent, hostsIds = Absent, hosts = Absent }

        optionalArgs =
            [ Argument.optional "description" filledInOptionals.description Encode.string, Argument.optional "name" filledInOptionals.name Encode.string, Argument.optional "nameFull" filledInOptionals.nameFull Encode.string, Argument.optional "locationId" filledInOptionals.locationId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "location" filledInOptionals.location GraphCool.InputObject.encodeVenuelocationLocation, Argument.optional "eventsIds" filledInOptionals.eventsIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "events" filledInOptionals.events (GraphCool.InputObject.encodeVenueeventsEvent |> Encode.list), Argument.optional "hostsIds" filledInOptionals.hostsIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "hosts" filledInOptionals.hosts (GraphCool.InputObject.encodeVenuehostsHost |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionField "updateVenue" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ]) object (identity >> Decode.maybe)


updateOrCreateChat : { update : GraphCool.InputObject.UpdateChat, create : GraphCool.InputObject.CreateChat } -> SelectionSet decodesTo GraphCool.Object.Chat -> Field (Maybe decodesTo) RootMutation
updateOrCreateChat requiredArgs object =
    Object.selectionField "updateOrCreateChat" [ Argument.required "update" requiredArgs.update GraphCool.InputObject.encodeUpdateChat, Argument.required "create" requiredArgs.create GraphCool.InputObject.encodeCreateChat ] object (identity >> Decode.maybe)


updateOrCreateEvent : { update : GraphCool.InputObject.UpdateEvent, create : GraphCool.InputObject.CreateEvent } -> SelectionSet decodesTo GraphCool.Object.Event -> Field (Maybe decodesTo) RootMutation
updateOrCreateEvent requiredArgs object =
    Object.selectionField "updateOrCreateEvent" [ Argument.required "update" requiredArgs.update GraphCool.InputObject.encodeUpdateEvent, Argument.required "create" requiredArgs.create GraphCool.InputObject.encodeCreateEvent ] object (identity >> Decode.maybe)


updateOrCreateFile : { update : GraphCool.InputObject.UpdateFile, create : GraphCool.InputObject.CreateFile } -> SelectionSet decodesTo GraphCool.Object.File -> Field (Maybe decodesTo) RootMutation
updateOrCreateFile requiredArgs object =
    Object.selectionField "updateOrCreateFile" [ Argument.required "update" requiredArgs.update GraphCool.InputObject.encodeUpdateFile, Argument.required "create" requiredArgs.create GraphCool.InputObject.encodeCreateFile ] object (identity >> Decode.maybe)


updateOrCreateHost : { update : GraphCool.InputObject.UpdateHost, create : GraphCool.InputObject.CreateHost } -> SelectionSet decodesTo GraphCool.Object.Host -> Field (Maybe decodesTo) RootMutation
updateOrCreateHost requiredArgs object =
    Object.selectionField "updateOrCreateHost" [ Argument.required "update" requiredArgs.update GraphCool.InputObject.encodeUpdateHost, Argument.required "create" requiredArgs.create GraphCool.InputObject.encodeCreateHost ] object (identity >> Decode.maybe)


updateOrCreateLocation : { update : GraphCool.InputObject.UpdateLocation, create : GraphCool.InputObject.CreateLocation } -> SelectionSet decodesTo GraphCool.Object.Location -> Field (Maybe decodesTo) RootMutation
updateOrCreateLocation requiredArgs object =
    Object.selectionField "updateOrCreateLocation" [ Argument.required "update" requiredArgs.update GraphCool.InputObject.encodeUpdateLocation, Argument.required "create" requiredArgs.create GraphCool.InputObject.encodeCreateLocation ] object (identity >> Decode.maybe)


updateOrCreateMessage : { update : GraphCool.InputObject.UpdateMessage, create : GraphCool.InputObject.CreateMessage } -> SelectionSet decodesTo GraphCool.Object.Message -> Field (Maybe decodesTo) RootMutation
updateOrCreateMessage requiredArgs object =
    Object.selectionField "updateOrCreateMessage" [ Argument.required "update" requiredArgs.update GraphCool.InputObject.encodeUpdateMessage, Argument.required "create" requiredArgs.create GraphCool.InputObject.encodeCreateMessage ] object (identity >> Decode.maybe)


updateOrCreatePool : { update : GraphCool.InputObject.UpdatePool, create : GraphCool.InputObject.CreatePool } -> SelectionSet decodesTo GraphCool.Object.Pool -> Field (Maybe decodesTo) RootMutation
updateOrCreatePool requiredArgs object =
    Object.selectionField "updateOrCreatePool" [ Argument.required "update" requiredArgs.update GraphCool.InputObject.encodeUpdatePool, Argument.required "create" requiredArgs.create GraphCool.InputObject.encodeCreatePool ] object (identity >> Decode.maybe)


updateOrCreateUser : { update : GraphCool.InputObject.UpdateUser, create : GraphCool.InputObject.CreateUser } -> SelectionSet decodesTo GraphCool.Object.User -> Field (Maybe decodesTo) RootMutation
updateOrCreateUser requiredArgs object =
    Object.selectionField "updateOrCreateUser" [ Argument.required "update" requiredArgs.update GraphCool.InputObject.encodeUpdateUser, Argument.required "create" requiredArgs.create GraphCool.InputObject.encodeCreateUser ] object (identity >> Decode.maybe)


updateOrCreateVenue : { update : GraphCool.InputObject.UpdateVenue, create : GraphCool.InputObject.CreateVenue } -> SelectionSet decodesTo GraphCool.Object.Venue -> Field (Maybe decodesTo) RootMutation
updateOrCreateVenue requiredArgs object =
    Object.selectionField "updateOrCreateVenue" [ Argument.required "update" requiredArgs.update GraphCool.InputObject.encodeUpdateVenue, Argument.required "create" requiredArgs.create GraphCool.InputObject.encodeCreateVenue ] object (identity >> Decode.maybe)


deleteChat : { id : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.Chat -> Field (Maybe decodesTo) RootMutation
deleteChat requiredArgs object =
    Object.selectionField "deleteChat" [ Argument.required "id" requiredArgs.id (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


deleteEvent : { id : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.Event -> Field (Maybe decodesTo) RootMutation
deleteEvent requiredArgs object =
    Object.selectionField "deleteEvent" [ Argument.required "id" requiredArgs.id (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


deleteFile : { id : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.File -> Field (Maybe decodesTo) RootMutation
deleteFile requiredArgs object =
    Object.selectionField "deleteFile" [ Argument.required "id" requiredArgs.id (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


deleteHost : { id : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.Host -> Field (Maybe decodesTo) RootMutation
deleteHost requiredArgs object =
    Object.selectionField "deleteHost" [ Argument.required "id" requiredArgs.id (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


deleteLocation : { id : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.Location -> Field (Maybe decodesTo) RootMutation
deleteLocation requiredArgs object =
    Object.selectionField "deleteLocation" [ Argument.required "id" requiredArgs.id (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


deleteMessage : { id : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.Message -> Field (Maybe decodesTo) RootMutation
deleteMessage requiredArgs object =
    Object.selectionField "deleteMessage" [ Argument.required "id" requiredArgs.id (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


deletePool : { id : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.Pool -> Field (Maybe decodesTo) RootMutation
deletePool requiredArgs object =
    Object.selectionField "deletePool" [ Argument.required "id" requiredArgs.id (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


deleteUser : { id : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.User -> Field (Maybe decodesTo) RootMutation
deleteUser requiredArgs object =
    Object.selectionField "deleteUser" [ Argument.required "id" requiredArgs.id (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


deleteVenue : { id : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.Venue -> Field (Maybe decodesTo) RootMutation
deleteVenue requiredArgs object =
    Object.selectionField "deleteVenue" [ Argument.required "id" requiredArgs.id (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


setEventOnPool : { poolPoolId : GraphCool.Scalar.Id, eventEventId : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.SetEventOnPoolPayload -> Field (Maybe decodesTo) RootMutation
setEventOnPool requiredArgs object =
    Object.selectionField "setEventOnPool" [ Argument.required "poolPoolId" requiredArgs.poolPoolId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "eventEventId" requiredArgs.eventEventId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


setVenueOnLocation : { venueVenueId : GraphCool.Scalar.Id, locationLocationId : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.SetVenueOnLocationPayload -> Field (Maybe decodesTo) RootMutation
setVenueOnLocation requiredArgs object =
    Object.selectionField "setVenueOnLocation" [ Argument.required "venueVenueId" requiredArgs.venueVenueId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "locationLocationId" requiredArgs.locationLocationId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


unsetVenueOnLocation : { venueVenueId : GraphCool.Scalar.Id, locationLocationId : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.UnsetVenueOnLocationPayload -> Field (Maybe decodesTo) RootMutation
unsetVenueOnLocation requiredArgs object =
    Object.selectionField "unsetVenueOnLocation" [ Argument.required "venueVenueId" requiredArgs.venueVenueId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "locationLocationId" requiredArgs.locationLocationId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


addToAttendingEvent : { attendingUserId : GraphCool.Scalar.Id, attendingEventPoolId : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.AddToAttendingEventPayload -> Field (Maybe decodesTo) RootMutation
addToAttendingEvent requiredArgs object =
    Object.selectionField "addToAttendingEvent" [ Argument.required "attendingUserId" requiredArgs.attendingUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "attendingEventPoolId" requiredArgs.attendingEventPoolId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


addToChatInitBy : { initiatedUserId : GraphCool.Scalar.Id, initiatedChatId : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.AddToChatInitByPayload -> Field (Maybe decodesTo) RootMutation
addToChatInitBy requiredArgs object =
    Object.selectionField "addToChatInitBy" [ Argument.required "initiatedUserId" requiredArgs.initiatedUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "initiatedChatId" requiredArgs.initiatedChatId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


addToChatOfEvent : { eventEventId : GraphCool.Scalar.Id, chatsChatId : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.AddToChatOfEventPayload -> Field (Maybe decodesTo) RootMutation
addToChatOfEvent requiredArgs object =
    Object.selectionField "addToChatOfEvent" [ Argument.required "eventEventId" requiredArgs.eventEventId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "chatsChatId" requiredArgs.chatsChatId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


addToChatPassed : { passedUserId : GraphCool.Scalar.Id, passedChatId : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.AddToChatPassedPayload -> Field (Maybe decodesTo) RootMutation
addToChatPassed requiredArgs object =
    Object.selectionField "addToChatPassed" [ Argument.required "passedUserId" requiredArgs.passedUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "passedChatId" requiredArgs.passedChatId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


addToChatProposed : { proposedUserId : GraphCool.Scalar.Id, proposedChatId : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.AddToChatProposedPayload -> Field (Maybe decodesTo) RootMutation
addToChatProposed requiredArgs object =
    Object.selectionField "addToChatProposed" [ Argument.required "proposedUserId" requiredArgs.proposedUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "proposedChatId" requiredArgs.proposedChatId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


addToDateCanceled : { canceledUserId : GraphCool.Scalar.Id, datesCanceledChatId : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.AddToDateCanceledPayload -> Field (Maybe decodesTo) RootMutation
addToDateCanceled requiredArgs object =
    Object.selectionField "addToDateCanceled" [ Argument.required "canceledUserId" requiredArgs.canceledUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "datesCanceledChatId" requiredArgs.datesCanceledChatId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


addToEventCreator : { createdByUserId : GraphCool.Scalar.Id, createdEventsEventId : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.AddToEventCreatorPayload -> Field (Maybe decodesTo) RootMutation
addToEventCreator requiredArgs object =
    Object.selectionField "addToEventCreator" [ Argument.required "createdByUserId" requiredArgs.createdByUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "createdEventsEventId" requiredArgs.createdEventsEventId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


addToHostOfEvent : { hostsHostId : GraphCool.Scalar.Id, eventsEventId : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.AddToHostOfEventPayload -> Field (Maybe decodesTo) RootMutation
addToHostOfEvent requiredArgs object =
    Object.selectionField "addToHostOfEvent" [ Argument.required "hostsHostId" requiredArgs.hostsHostId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "eventsEventId" requiredArgs.eventsEventId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


addToHostOfVenue : { venuesVenueId : GraphCool.Scalar.Id, hostsHostId : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.AddToHostOfVenuePayload -> Field (Maybe decodesTo) RootMutation
addToHostOfVenue requiredArgs object =
    Object.selectionField "addToHostOfVenue" [ Argument.required "venuesVenueId" requiredArgs.venuesVenueId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "hostsHostId" requiredArgs.hostsHostId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


addToLikedEvent : { likedUserId : GraphCool.Scalar.Id, likedEventPoolId : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.AddToLikedEventPayload -> Field (Maybe decodesTo) RootMutation
addToLikedEvent requiredArgs object =
    Object.selectionField "addToLikedEvent" [ Argument.required "likedUserId" requiredArgs.likedUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "likedEventPoolId" requiredArgs.likedEventPoolId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


addToMessageFromUser : { fromUserId : GraphCool.Scalar.Id, sentMessageId : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.AddToMessageFromUserPayload -> Field (Maybe decodesTo) RootMutation
addToMessageFromUser requiredArgs object =
    Object.selectionField "addToMessageFromUser" [ Argument.required "fromUserId" requiredArgs.fromUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "sentMessageId" requiredArgs.sentMessageId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


addToMessageOfChat : { messagesMessageId : GraphCool.Scalar.Id, chatChatId : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.AddToMessageOfChatPayload -> Field (Maybe decodesTo) RootMutation
addToMessageOfChat requiredArgs object =
    Object.selectionField "addToMessageOfChat" [ Argument.required "messagesMessageId" requiredArgs.messagesMessageId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "chatChatId" requiredArgs.chatChatId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


addToPoolOnChat : { chatsChatId : GraphCool.Scalar.Id, poolPoolId : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.AddToPoolOnChatPayload -> Field (Maybe decodesTo) RootMutation
addToPoolOnChat requiredArgs object =
    Object.selectionField "addToPoolOnChat" [ Argument.required "chatsChatId" requiredArgs.chatsChatId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "poolPoolId" requiredArgs.poolPoolId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


addToPoolOnUser : { viewedUserId : GraphCool.Scalar.Id, viewedEventPoolId : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.AddToPoolOnUserPayload -> Field (Maybe decodesTo) RootMutation
addToPoolOnUser requiredArgs object =
    Object.selectionField "addToPoolOnUser" [ Argument.required "viewedUserId" requiredArgs.viewedUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "viewedEventPoolId" requiredArgs.viewedEventPoolId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


addToRecipientOfChat : { recipientUserId : GraphCool.Scalar.Id, recipientChatId : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.AddToRecipientOfChatPayload -> Field (Maybe decodesTo) RootMutation
addToRecipientOfChat requiredArgs object =
    Object.selectionField "addToRecipientOfChat" [ Argument.required "recipientUserId" requiredArgs.recipientUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "recipientChatId" requiredArgs.recipientChatId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


addToUserIsHost : { usersUserId : GraphCool.Scalar.Id, hostsHostId : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.AddToUserIsHostPayload -> Field (Maybe decodesTo) RootMutation
addToUserIsHost requiredArgs object =
    Object.selectionField "addToUserIsHost" [ Argument.required "usersUserId" requiredArgs.usersUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "hostsHostId" requiredArgs.hostsHostId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


addToVenueOfEvent : { venuesVenueId : GraphCool.Scalar.Id, eventsEventId : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.AddToVenueOfEventPayload -> Field (Maybe decodesTo) RootMutation
addToVenueOfEvent requiredArgs object =
    Object.selectionField "addToVenueOfEvent" [ Argument.required "venuesVenueId" requiredArgs.venuesVenueId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "eventsEventId" requiredArgs.eventsEventId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


removeFromAttendingEvent : { attendingUserId : GraphCool.Scalar.Id, attendingEventPoolId : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.RemoveFromAttendingEventPayload -> Field (Maybe decodesTo) RootMutation
removeFromAttendingEvent requiredArgs object =
    Object.selectionField "removeFromAttendingEvent" [ Argument.required "attendingUserId" requiredArgs.attendingUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "attendingEventPoolId" requiredArgs.attendingEventPoolId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


removeFromChatPassed : { passedUserId : GraphCool.Scalar.Id, passedChatId : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.RemoveFromChatPassedPayload -> Field (Maybe decodesTo) RootMutation
removeFromChatPassed requiredArgs object =
    Object.selectionField "removeFromChatPassed" [ Argument.required "passedUserId" requiredArgs.passedUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "passedChatId" requiredArgs.passedChatId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


removeFromChatProposed : { proposedUserId : GraphCool.Scalar.Id, proposedChatId : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.RemoveFromChatProposedPayload -> Field (Maybe decodesTo) RootMutation
removeFromChatProposed requiredArgs object =
    Object.selectionField "removeFromChatProposed" [ Argument.required "proposedUserId" requiredArgs.proposedUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "proposedChatId" requiredArgs.proposedChatId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


removeFromDateCanceled : { canceledUserId : GraphCool.Scalar.Id, datesCanceledChatId : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.RemoveFromDateCanceledPayload -> Field (Maybe decodesTo) RootMutation
removeFromDateCanceled requiredArgs object =
    Object.selectionField "removeFromDateCanceled" [ Argument.required "canceledUserId" requiredArgs.canceledUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "datesCanceledChatId" requiredArgs.datesCanceledChatId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


removeFromHostOfEvent : { hostsHostId : GraphCool.Scalar.Id, eventsEventId : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.RemoveFromHostOfEventPayload -> Field (Maybe decodesTo) RootMutation
removeFromHostOfEvent requiredArgs object =
    Object.selectionField "removeFromHostOfEvent" [ Argument.required "hostsHostId" requiredArgs.hostsHostId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "eventsEventId" requiredArgs.eventsEventId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


removeFromHostOfVenue : { venuesVenueId : GraphCool.Scalar.Id, hostsHostId : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.RemoveFromHostOfVenuePayload -> Field (Maybe decodesTo) RootMutation
removeFromHostOfVenue requiredArgs object =
    Object.selectionField "removeFromHostOfVenue" [ Argument.required "venuesVenueId" requiredArgs.venuesVenueId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "hostsHostId" requiredArgs.hostsHostId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


removeFromLikedEvent : { likedUserId : GraphCool.Scalar.Id, likedEventPoolId : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.RemoveFromLikedEventPayload -> Field (Maybe decodesTo) RootMutation
removeFromLikedEvent requiredArgs object =
    Object.selectionField "removeFromLikedEvent" [ Argument.required "likedUserId" requiredArgs.likedUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "likedEventPoolId" requiredArgs.likedEventPoolId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


removeFromMessageFromUser : { fromUserId : GraphCool.Scalar.Id, sentMessageId : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.RemoveFromMessageFromUserPayload -> Field (Maybe decodesTo) RootMutation
removeFromMessageFromUser requiredArgs object =
    Object.selectionField "removeFromMessageFromUser" [ Argument.required "fromUserId" requiredArgs.fromUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "sentMessageId" requiredArgs.sentMessageId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


removeFromPoolOnChat : { chatsChatId : GraphCool.Scalar.Id, poolPoolId : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.RemoveFromPoolOnChatPayload -> Field (Maybe decodesTo) RootMutation
removeFromPoolOnChat requiredArgs object =
    Object.selectionField "removeFromPoolOnChat" [ Argument.required "chatsChatId" requiredArgs.chatsChatId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "poolPoolId" requiredArgs.poolPoolId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


removeFromPoolOnUser : { viewedUserId : GraphCool.Scalar.Id, viewedEventPoolId : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.RemoveFromPoolOnUserPayload -> Field (Maybe decodesTo) RootMutation
removeFromPoolOnUser requiredArgs object =
    Object.selectionField "removeFromPoolOnUser" [ Argument.required "viewedUserId" requiredArgs.viewedUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "viewedEventPoolId" requiredArgs.viewedEventPoolId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


removeFromRecipientOfChat : { recipientUserId : GraphCool.Scalar.Id, recipientChatId : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.RemoveFromRecipientOfChatPayload -> Field (Maybe decodesTo) RootMutation
removeFromRecipientOfChat requiredArgs object =
    Object.selectionField "removeFromRecipientOfChat" [ Argument.required "recipientUserId" requiredArgs.recipientUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "recipientChatId" requiredArgs.recipientChatId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


removeFromUserIsHost : { usersUserId : GraphCool.Scalar.Id, hostsHostId : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.RemoveFromUserIsHostPayload -> Field (Maybe decodesTo) RootMutation
removeFromUserIsHost requiredArgs object =
    Object.selectionField "removeFromUserIsHost" [ Argument.required "usersUserId" requiredArgs.usersUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "hostsHostId" requiredArgs.hostsHostId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


removeFromVenueOfEvent : { venuesVenueId : GraphCool.Scalar.Id, eventsEventId : GraphCool.Scalar.Id } -> SelectionSet decodesTo GraphCool.Object.RemoveFromVenueOfEventPayload -> Field (Maybe decodesTo) RootMutation
removeFromVenueOfEvent requiredArgs object =
    Object.selectionField "removeFromVenueOfEvent" [ Argument.required "venuesVenueId" requiredArgs.venuesVenueId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "eventsEventId" requiredArgs.eventsEventId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


signinUser : ({ email : OptionalArgument GraphCool.InputObject.AuthProviderEmail, auth0 : OptionalArgument GraphCool.InputObject.AuthProviderAuth0 } -> { email : OptionalArgument GraphCool.InputObject.AuthProviderEmail, auth0 : OptionalArgument GraphCool.InputObject.AuthProviderAuth0 }) -> SelectionSet decodesTo GraphCool.Object.SigninPayload -> Field decodesTo RootMutation
signinUser fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { email = Absent, auth0 = Absent }

        optionalArgs =
            [ Argument.optional "email" filledInOptionals.email GraphCool.InputObject.encodeAuthProviderEmail, Argument.optional "auth0" filledInOptionals.auth0 GraphCool.InputObject.encodeAuthProviderAuth0 ]
                |> List.filterMap identity
    in
    Object.selectionField "signinUser" optionalArgs object identity


createUser : ({ bio : OptionalArgument String, nameFull : OptionalArgument String, attendingEventIds : OptionalArgument (List GraphCool.Scalar.Id), attendingEvent : OptionalArgument (List GraphCool.InputObject.UserattendingEventPool), createdEventsIds : OptionalArgument (List GraphCool.Scalar.Id), createdEvents : OptionalArgument (List GraphCool.InputObject.UsercreatedEventsEvent), datesCanceledIds : OptionalArgument (List GraphCool.Scalar.Id), datesCanceled : OptionalArgument (List GraphCool.InputObject.UserdatesCanceledChat), hostsIds : OptionalArgument (List GraphCool.Scalar.Id), hosts : OptionalArgument (List GraphCool.InputObject.UserhostsHost), initiatedIds : OptionalArgument (List GraphCool.Scalar.Id), initiated : OptionalArgument (List GraphCool.InputObject.UserinitiatedChat), likedEventIds : OptionalArgument (List GraphCool.Scalar.Id), likedEvent : OptionalArgument (List GraphCool.InputObject.UserlikedEventPool), passedIds : OptionalArgument (List GraphCool.Scalar.Id), passed : OptionalArgument (List GraphCool.InputObject.UserpassedChat), proposedIds : OptionalArgument (List GraphCool.Scalar.Id), proposed : OptionalArgument (List GraphCool.InputObject.UserproposedChat), recipientIds : OptionalArgument (List GraphCool.Scalar.Id), recipient : OptionalArgument (List GraphCool.InputObject.UserrecipientChat), sentIds : OptionalArgument (List GraphCool.Scalar.Id), sent : OptionalArgument (List GraphCool.InputObject.UsersentMessage), viewedEventIds : OptionalArgument (List GraphCool.Scalar.Id), viewedEvent : OptionalArgument (List GraphCool.InputObject.UserviewedEventPool) } -> { bio : OptionalArgument String, nameFull : OptionalArgument String, attendingEventIds : OptionalArgument (List GraphCool.Scalar.Id), attendingEvent : OptionalArgument (List GraphCool.InputObject.UserattendingEventPool), createdEventsIds : OptionalArgument (List GraphCool.Scalar.Id), createdEvents : OptionalArgument (List GraphCool.InputObject.UsercreatedEventsEvent), datesCanceledIds : OptionalArgument (List GraphCool.Scalar.Id), datesCanceled : OptionalArgument (List GraphCool.InputObject.UserdatesCanceledChat), hostsIds : OptionalArgument (List GraphCool.Scalar.Id), hosts : OptionalArgument (List GraphCool.InputObject.UserhostsHost), initiatedIds : OptionalArgument (List GraphCool.Scalar.Id), initiated : OptionalArgument (List GraphCool.InputObject.UserinitiatedChat), likedEventIds : OptionalArgument (List GraphCool.Scalar.Id), likedEvent : OptionalArgument (List GraphCool.InputObject.UserlikedEventPool), passedIds : OptionalArgument (List GraphCool.Scalar.Id), passed : OptionalArgument (List GraphCool.InputObject.UserpassedChat), proposedIds : OptionalArgument (List GraphCool.Scalar.Id), proposed : OptionalArgument (List GraphCool.InputObject.UserproposedChat), recipientIds : OptionalArgument (List GraphCool.Scalar.Id), recipient : OptionalArgument (List GraphCool.InputObject.UserrecipientChat), sentIds : OptionalArgument (List GraphCool.Scalar.Id), sent : OptionalArgument (List GraphCool.InputObject.UsersentMessage), viewedEventIds : OptionalArgument (List GraphCool.Scalar.Id), viewedEvent : OptionalArgument (List GraphCool.InputObject.UserviewedEventPool) }) -> { birthday : GraphCool.Scalar.DateTime, name : String, authProvider : GraphCool.InputObject.AuthProviderSignupData } -> SelectionSet decodesTo GraphCool.Object.User -> Field (Maybe decodesTo) RootMutation
createUser fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { bio = Absent, nameFull = Absent, attendingEventIds = Absent, attendingEvent = Absent, createdEventsIds = Absent, createdEvents = Absent, datesCanceledIds = Absent, datesCanceled = Absent, hostsIds = Absent, hosts = Absent, initiatedIds = Absent, initiated = Absent, likedEventIds = Absent, likedEvent = Absent, passedIds = Absent, passed = Absent, proposedIds = Absent, proposed = Absent, recipientIds = Absent, recipient = Absent, sentIds = Absent, sent = Absent, viewedEventIds = Absent, viewedEvent = Absent }

        optionalArgs =
            [ Argument.optional "bio" filledInOptionals.bio Encode.string, Argument.optional "nameFull" filledInOptionals.nameFull Encode.string, Argument.optional "attendingEventIds" filledInOptionals.attendingEventIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "attendingEvent" filledInOptionals.attendingEvent (GraphCool.InputObject.encodeUserattendingEventPool |> Encode.list), Argument.optional "createdEventsIds" filledInOptionals.createdEventsIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "createdEvents" filledInOptionals.createdEvents (GraphCool.InputObject.encodeUsercreatedEventsEvent |> Encode.list), Argument.optional "datesCanceledIds" filledInOptionals.datesCanceledIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "datesCanceled" filledInOptionals.datesCanceled (GraphCool.InputObject.encodeUserdatesCanceledChat |> Encode.list), Argument.optional "hostsIds" filledInOptionals.hostsIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "hosts" filledInOptionals.hosts (GraphCool.InputObject.encodeUserhostsHost |> Encode.list), Argument.optional "initiatedIds" filledInOptionals.initiatedIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "initiated" filledInOptionals.initiated (GraphCool.InputObject.encodeUserinitiatedChat |> Encode.list), Argument.optional "likedEventIds" filledInOptionals.likedEventIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "likedEvent" filledInOptionals.likedEvent (GraphCool.InputObject.encodeUserlikedEventPool |> Encode.list), Argument.optional "passedIds" filledInOptionals.passedIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "passed" filledInOptionals.passed (GraphCool.InputObject.encodeUserpassedChat |> Encode.list), Argument.optional "proposedIds" filledInOptionals.proposedIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "proposed" filledInOptionals.proposed (GraphCool.InputObject.encodeUserproposedChat |> Encode.list), Argument.optional "recipientIds" filledInOptionals.recipientIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "recipient" filledInOptionals.recipient (GraphCool.InputObject.encodeUserrecipientChat |> Encode.list), Argument.optional "sentIds" filledInOptionals.sentIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "sent" filledInOptionals.sent (GraphCool.InputObject.encodeUsersentMessage |> Encode.list), Argument.optional "viewedEventIds" filledInOptionals.viewedEventIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "viewedEvent" filledInOptionals.viewedEvent (GraphCool.InputObject.encodeUserviewedEventPool |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionField "createUser" (optionalArgs ++ [ Argument.required "birthday" requiredArgs.birthday (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw), Argument.required "name" requiredArgs.name Encode.string, Argument.required "authProvider" requiredArgs.authProvider GraphCool.InputObject.encodeAuthProviderSignupData ]) object (identity >> Decode.maybe)
