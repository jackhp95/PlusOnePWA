-- Do not manually edit this file, it was auto-generated by Graphqelm
-- https://github.com/dillonkearns/graphqelm


module PlusOne.Object.Location exposing (..)

import Graphqelm.Field as Field exposing (Field)
import Graphqelm.Internal.Builder.Argument as Argument exposing (Argument)
import Graphqelm.Internal.Builder.Object as Object
import Graphqelm.Internal.Encode as Encode exposing (Value)
import Graphqelm.OptionalArgument exposing (OptionalArgument(Absent))
import Graphqelm.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import PlusOne.InputObject
import PlusOne.Interface
import PlusOne.Object
import PlusOne.Scalar
import PlusOne.Union


{-| Select fields to build up a SelectionSet for this object.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) PlusOne.Object.Location
selection constructor =
    Object.selection constructor


address : Field (Maybe String) PlusOne.Object.Location
address =
    Object.fieldDecoder "address" [] (Decode.string |> Decode.maybe)


addressFull : Field (Maybe String) PlusOne.Object.Location
addressFull =
    Object.fieldDecoder "addressFull" [] (Decode.string |> Decode.maybe)


city : Field (Maybe String) PlusOne.Object.Location
city =
    Object.fieldDecoder "city" [] (Decode.string |> Decode.maybe)


country : Field (Maybe String) PlusOne.Object.Location
country =
    Object.fieldDecoder "country" [] (Decode.string |> Decode.maybe)


createdAt : Field PlusOne.Scalar.DateTime PlusOne.Object.Location
createdAt =
    Object.fieldDecoder "createdAt" [] (Decode.string |> Decode.map PlusOne.Scalar.DateTime)


id : Field PlusOne.Scalar.Id PlusOne.Object.Location
id =
    Object.fieldDecoder "id" [] (Decode.string |> Decode.map PlusOne.Scalar.Id)


lat : Field Float PlusOne.Object.Location
lat =
    Object.fieldDecoder "lat" [] Decode.float


lon : Field Float PlusOne.Object.Location
lon =
    Object.fieldDecoder "lon" [] Decode.float


state : Field String PlusOne.Object.Location
state =
    Object.fieldDecoder "state" [] Decode.string


{-|

  - filter -

-}
venue : ({ filter : OptionalArgument PlusOne.InputObject.VenueFilter } -> { filter : OptionalArgument PlusOne.InputObject.VenueFilter }) -> SelectionSet decodesTo PlusOne.Object.Venue -> Field (Maybe decodesTo) PlusOne.Object.Location
venue fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter PlusOne.InputObject.encodeVenueFilter ]
                |> List.filterMap identity
    in
    Object.selectionField "venue" optionalArgs object (identity >> Decode.maybe)


zip : Field (Maybe String) PlusOne.Object.Location
zip =
    Object.fieldDecoder "zip" [] (Decode.string |> Decode.maybe)
