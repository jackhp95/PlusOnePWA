-- Do not manually edit this file, it was auto-generated by Graphqelm
-- https://github.com/dillonkearns/graphqelm


module PlusOne.Mutation exposing (..)

import Graphqelm.Field as Field exposing (Field)
import Graphqelm.Internal.Builder.Argument as Argument exposing (Argument)
import Graphqelm.Internal.Builder.Object as Object
import Graphqelm.Internal.Encode as Encode exposing (Value)
import Graphqelm.Operation exposing (RootMutation)
import Graphqelm.OptionalArgument exposing (OptionalArgument(Absent))
import Graphqelm.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import PlusOne.Enum.DateState
import PlusOne.InputObject
import PlusOne.Interface
import PlusOne.Object
import PlusOne.Scalar
import PlusOne.Union


{-| Select fields to build up a top-level mutation. The request can be sent with
functions from `Graphqelm.Http`.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) RootMutation
selection constructor =
    Object.selection constructor


createChat : ({ dateState : OptionalArgument PlusOne.Enum.DateState.DateState, canceledId : OptionalArgument PlusOne.Scalar.Id, eventId : OptionalArgument PlusOne.Scalar.Id, event : OptionalArgument PlusOne.InputObject.ChateventEvent, initiatedId : OptionalArgument PlusOne.Scalar.Id, passedId : OptionalArgument PlusOne.Scalar.Id, proposedId : OptionalArgument PlusOne.Scalar.Id, recipientId : OptionalArgument PlusOne.Scalar.Id, messagesIds : OptionalArgument (List PlusOne.Scalar.Id), messages : OptionalArgument (List PlusOne.InputObject.ChatmessagesMessage) } -> { dateState : OptionalArgument PlusOne.Enum.DateState.DateState, canceledId : OptionalArgument PlusOne.Scalar.Id, eventId : OptionalArgument PlusOne.Scalar.Id, event : OptionalArgument PlusOne.InputObject.ChateventEvent, initiatedId : OptionalArgument PlusOne.Scalar.Id, passedId : OptionalArgument PlusOne.Scalar.Id, proposedId : OptionalArgument PlusOne.Scalar.Id, recipientId : OptionalArgument PlusOne.Scalar.Id, messagesIds : OptionalArgument (List PlusOne.Scalar.Id), messages : OptionalArgument (List PlusOne.InputObject.ChatmessagesMessage) }) -> SelectionSet decodesTo PlusOne.Object.Chat -> Field (Maybe decodesTo) RootMutation
createChat fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { dateState = Absent, canceledId = Absent, eventId = Absent, event = Absent, initiatedId = Absent, passedId = Absent, proposedId = Absent, recipientId = Absent, messagesIds = Absent, messages = Absent }

        optionalArgs =
            [ Argument.optional "dateState" filledInOptionals.dateState (Encode.enum PlusOne.Enum.DateState.toString), Argument.optional "canceledId" filledInOptionals.canceledId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.optional "eventId" filledInOptionals.eventId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.optional "event" filledInOptionals.event PlusOne.InputObject.encodeChateventEvent, Argument.optional "initiatedId" filledInOptionals.initiatedId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.optional "passedId" filledInOptionals.passedId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.optional "proposedId" filledInOptionals.proposedId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.optional "recipientId" filledInOptionals.recipientId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.optional "messagesIds" filledInOptionals.messagesIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "messages" filledInOptionals.messages (PlusOne.InputObject.encodeChatmessagesMessage |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionField "createChat" optionalArgs object (identity >> Decode.maybe)


createEvent : ({ endsAt : OptionalArgument PlusOne.Scalar.DateTime, nameFull : OptionalArgument String, private : OptionalArgument Bool, createdById : OptionalArgument PlusOne.Scalar.Id, chatsIds : OptionalArgument (List PlusOne.Scalar.Id), chats : OptionalArgument (List PlusOne.InputObject.EventchatsChat), hostsIds : OptionalArgument (List PlusOne.Scalar.Id), hosts : OptionalArgument (List PlusOne.InputObject.EventhostsHost), usersAttendingIds : OptionalArgument (List PlusOne.Scalar.Id), usersLikedIds : OptionalArgument (List PlusOne.Scalar.Id), usersViewedIds : OptionalArgument (List PlusOne.Scalar.Id), venuesIds : OptionalArgument (List PlusOne.Scalar.Id), venues : OptionalArgument (List PlusOne.InputObject.EventvenuesVenue) } -> { endsAt : OptionalArgument PlusOne.Scalar.DateTime, nameFull : OptionalArgument String, private : OptionalArgument Bool, createdById : OptionalArgument PlusOne.Scalar.Id, chatsIds : OptionalArgument (List PlusOne.Scalar.Id), chats : OptionalArgument (List PlusOne.InputObject.EventchatsChat), hostsIds : OptionalArgument (List PlusOne.Scalar.Id), hosts : OptionalArgument (List PlusOne.InputObject.EventhostsHost), usersAttendingIds : OptionalArgument (List PlusOne.Scalar.Id), usersLikedIds : OptionalArgument (List PlusOne.Scalar.Id), usersViewedIds : OptionalArgument (List PlusOne.Scalar.Id), venuesIds : OptionalArgument (List PlusOne.Scalar.Id), venues : OptionalArgument (List PlusOne.InputObject.EventvenuesVenue) }) -> { name : String, startsAt : PlusOne.Scalar.DateTime } -> SelectionSet decodesTo PlusOne.Object.Event -> Field (Maybe decodesTo) RootMutation
createEvent fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { endsAt = Absent, nameFull = Absent, private = Absent, createdById = Absent, chatsIds = Absent, chats = Absent, hostsIds = Absent, hosts = Absent, usersAttendingIds = Absent, usersLikedIds = Absent, usersViewedIds = Absent, venuesIds = Absent, venues = Absent }

        optionalArgs =
            [ Argument.optional "endsAt" filledInOptionals.endsAt (\(PlusOne.Scalar.DateTime raw) -> Encode.string raw), Argument.optional "nameFull" filledInOptionals.nameFull Encode.string, Argument.optional "private" filledInOptionals.private Encode.bool, Argument.optional "createdById" filledInOptionals.createdById (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.optional "chatsIds" filledInOptionals.chatsIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "chats" filledInOptionals.chats (PlusOne.InputObject.encodeEventchatsChat |> Encode.list), Argument.optional "hostsIds" filledInOptionals.hostsIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "hosts" filledInOptionals.hosts (PlusOne.InputObject.encodeEventhostsHost |> Encode.list), Argument.optional "usersAttendingIds" filledInOptionals.usersAttendingIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "usersLikedIds" filledInOptionals.usersLikedIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "usersViewedIds" filledInOptionals.usersViewedIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "venuesIds" filledInOptionals.venuesIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "venues" filledInOptionals.venues (PlusOne.InputObject.encodeEventvenuesVenue |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionField "createEvent" (optionalArgs ++ [ Argument.required "name" requiredArgs.name Encode.string, Argument.required "startsAt" requiredArgs.startsAt (\(PlusOne.Scalar.DateTime raw) -> Encode.string raw) ]) object (identity >> Decode.maybe)


createFile : { name : String } -> SelectionSet decodesTo PlusOne.Object.File -> Field (Maybe decodesTo) RootMutation
createFile requiredArgs object =
    Object.selectionField "createFile" [ Argument.required "name" requiredArgs.name Encode.string ] object (identity >> Decode.maybe)


createHost : ({ description : OptionalArgument String, nameFull : OptionalArgument String, eventsIds : OptionalArgument (List PlusOne.Scalar.Id), events : OptionalArgument (List PlusOne.InputObject.HosteventsEvent), usersIds : OptionalArgument (List PlusOne.Scalar.Id), venuesIds : OptionalArgument (List PlusOne.Scalar.Id), venues : OptionalArgument (List PlusOne.InputObject.HostvenuesVenue) } -> { description : OptionalArgument String, nameFull : OptionalArgument String, eventsIds : OptionalArgument (List PlusOne.Scalar.Id), events : OptionalArgument (List PlusOne.InputObject.HosteventsEvent), usersIds : OptionalArgument (List PlusOne.Scalar.Id), venuesIds : OptionalArgument (List PlusOne.Scalar.Id), venues : OptionalArgument (List PlusOne.InputObject.HostvenuesVenue) }) -> { name : String } -> SelectionSet decodesTo PlusOne.Object.Host -> Field (Maybe decodesTo) RootMutation
createHost fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { description = Absent, nameFull = Absent, eventsIds = Absent, events = Absent, usersIds = Absent, venuesIds = Absent, venues = Absent }

        optionalArgs =
            [ Argument.optional "description" filledInOptionals.description Encode.string, Argument.optional "nameFull" filledInOptionals.nameFull Encode.string, Argument.optional "eventsIds" filledInOptionals.eventsIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "events" filledInOptionals.events (PlusOne.InputObject.encodeHosteventsEvent |> Encode.list), Argument.optional "usersIds" filledInOptionals.usersIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "venuesIds" filledInOptionals.venuesIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "venues" filledInOptionals.venues (PlusOne.InputObject.encodeHostvenuesVenue |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionField "createHost" (optionalArgs ++ [ Argument.required "name" requiredArgs.name Encode.string ]) object (identity >> Decode.maybe)


createLocation : ({ address : OptionalArgument String, addressFull : OptionalArgument String, city : OptionalArgument String, country : OptionalArgument String, zip : OptionalArgument String, venueId : OptionalArgument PlusOne.Scalar.Id, venue : OptionalArgument PlusOne.InputObject.LocationvenueVenue } -> { address : OptionalArgument String, addressFull : OptionalArgument String, city : OptionalArgument String, country : OptionalArgument String, zip : OptionalArgument String, venueId : OptionalArgument PlusOne.Scalar.Id, venue : OptionalArgument PlusOne.InputObject.LocationvenueVenue }) -> { lat : Float, lon : Float, state : String } -> SelectionSet decodesTo PlusOne.Object.Location -> Field (Maybe decodesTo) RootMutation
createLocation fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { address = Absent, addressFull = Absent, city = Absent, country = Absent, zip = Absent, venueId = Absent, venue = Absent }

        optionalArgs =
            [ Argument.optional "address" filledInOptionals.address Encode.string, Argument.optional "addressFull" filledInOptionals.addressFull Encode.string, Argument.optional "city" filledInOptionals.city Encode.string, Argument.optional "country" filledInOptionals.country Encode.string, Argument.optional "zip" filledInOptionals.zip Encode.string, Argument.optional "venueId" filledInOptionals.venueId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.optional "venue" filledInOptionals.venue PlusOne.InputObject.encodeLocationvenueVenue ]
                |> List.filterMap identity
    in
    Object.selectionField "createLocation" (optionalArgs ++ [ Argument.required "lat" requiredArgs.lat Encode.float, Argument.required "lon" requiredArgs.lon Encode.float, Argument.required "state" requiredArgs.state Encode.string ]) object (identity >> Decode.maybe)


createMessage : ({ chatId : OptionalArgument PlusOne.Scalar.Id, chat : OptionalArgument PlusOne.InputObject.MessagechatChat, fromId : OptionalArgument PlusOne.Scalar.Id } -> { chatId : OptionalArgument PlusOne.Scalar.Id, chat : OptionalArgument PlusOne.InputObject.MessagechatChat, fromId : OptionalArgument PlusOne.Scalar.Id }) -> { text : String } -> SelectionSet decodesTo PlusOne.Object.Message -> Field (Maybe decodesTo) RootMutation
createMessage fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { chatId = Absent, chat = Absent, fromId = Absent }

        optionalArgs =
            [ Argument.optional "chatId" filledInOptionals.chatId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.optional "chat" filledInOptionals.chat PlusOne.InputObject.encodeMessagechatChat, Argument.optional "fromId" filledInOptionals.fromId (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ]
                |> List.filterMap identity
    in
    Object.selectionField "createMessage" (optionalArgs ++ [ Argument.required "text" requiredArgs.text Encode.string ]) object (identity >> Decode.maybe)


createVenue : ({ description : OptionalArgument String, locationId : OptionalArgument PlusOne.Scalar.Id, location : OptionalArgument PlusOne.InputObject.VenuelocationLocation, eventsIds : OptionalArgument (List PlusOne.Scalar.Id), events : OptionalArgument (List PlusOne.InputObject.VenueeventsEvent), hostsIds : OptionalArgument (List PlusOne.Scalar.Id), hosts : OptionalArgument (List PlusOne.InputObject.VenuehostsHost) } -> { description : OptionalArgument String, locationId : OptionalArgument PlusOne.Scalar.Id, location : OptionalArgument PlusOne.InputObject.VenuelocationLocation, eventsIds : OptionalArgument (List PlusOne.Scalar.Id), events : OptionalArgument (List PlusOne.InputObject.VenueeventsEvent), hostsIds : OptionalArgument (List PlusOne.Scalar.Id), hosts : OptionalArgument (List PlusOne.InputObject.VenuehostsHost) }) -> { name : String, nameFull : String } -> SelectionSet decodesTo PlusOne.Object.Venue -> Field (Maybe decodesTo) RootMutation
createVenue fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { description = Absent, locationId = Absent, location = Absent, eventsIds = Absent, events = Absent, hostsIds = Absent, hosts = Absent }

        optionalArgs =
            [ Argument.optional "description" filledInOptionals.description Encode.string, Argument.optional "locationId" filledInOptionals.locationId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.optional "location" filledInOptionals.location PlusOne.InputObject.encodeVenuelocationLocation, Argument.optional "eventsIds" filledInOptionals.eventsIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "events" filledInOptionals.events (PlusOne.InputObject.encodeVenueeventsEvent |> Encode.list), Argument.optional "hostsIds" filledInOptionals.hostsIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "hosts" filledInOptionals.hosts (PlusOne.InputObject.encodeVenuehostsHost |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionField "createVenue" (optionalArgs ++ [ Argument.required "name" requiredArgs.name Encode.string, Argument.required "nameFull" requiredArgs.nameFull Encode.string ]) object (identity >> Decode.maybe)


updateChat : ({ dateState : OptionalArgument PlusOne.Enum.DateState.DateState, canceledId : OptionalArgument PlusOne.Scalar.Id, eventId : OptionalArgument PlusOne.Scalar.Id, event : OptionalArgument PlusOne.InputObject.ChateventEvent, initiatedId : OptionalArgument PlusOne.Scalar.Id, passedId : OptionalArgument PlusOne.Scalar.Id, proposedId : OptionalArgument PlusOne.Scalar.Id, recipientId : OptionalArgument PlusOne.Scalar.Id, messagesIds : OptionalArgument (List PlusOne.Scalar.Id), messages : OptionalArgument (List PlusOne.InputObject.ChatmessagesMessage) } -> { dateState : OptionalArgument PlusOne.Enum.DateState.DateState, canceledId : OptionalArgument PlusOne.Scalar.Id, eventId : OptionalArgument PlusOne.Scalar.Id, event : OptionalArgument PlusOne.InputObject.ChateventEvent, initiatedId : OptionalArgument PlusOne.Scalar.Id, passedId : OptionalArgument PlusOne.Scalar.Id, proposedId : OptionalArgument PlusOne.Scalar.Id, recipientId : OptionalArgument PlusOne.Scalar.Id, messagesIds : OptionalArgument (List PlusOne.Scalar.Id), messages : OptionalArgument (List PlusOne.InputObject.ChatmessagesMessage) }) -> { id : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.Chat -> Field (Maybe decodesTo) RootMutation
updateChat fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { dateState = Absent, canceledId = Absent, eventId = Absent, event = Absent, initiatedId = Absent, passedId = Absent, proposedId = Absent, recipientId = Absent, messagesIds = Absent, messages = Absent }

        optionalArgs =
            [ Argument.optional "dateState" filledInOptionals.dateState (Encode.enum PlusOne.Enum.DateState.toString), Argument.optional "canceledId" filledInOptionals.canceledId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.optional "eventId" filledInOptionals.eventId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.optional "event" filledInOptionals.event PlusOne.InputObject.encodeChateventEvent, Argument.optional "initiatedId" filledInOptionals.initiatedId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.optional "passedId" filledInOptionals.passedId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.optional "proposedId" filledInOptionals.proposedId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.optional "recipientId" filledInOptionals.recipientId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.optional "messagesIds" filledInOptionals.messagesIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "messages" filledInOptionals.messages (PlusOne.InputObject.encodeChatmessagesMessage |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionField "updateChat" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ]) object (identity >> Decode.maybe)


updateEvent : ({ endsAt : OptionalArgument PlusOne.Scalar.DateTime, name : OptionalArgument String, nameFull : OptionalArgument String, private : OptionalArgument Bool, startsAt : OptionalArgument PlusOne.Scalar.DateTime, createdById : OptionalArgument PlusOne.Scalar.Id, chatsIds : OptionalArgument (List PlusOne.Scalar.Id), chats : OptionalArgument (List PlusOne.InputObject.EventchatsChat), hostsIds : OptionalArgument (List PlusOne.Scalar.Id), hosts : OptionalArgument (List PlusOne.InputObject.EventhostsHost), usersAttendingIds : OptionalArgument (List PlusOne.Scalar.Id), usersLikedIds : OptionalArgument (List PlusOne.Scalar.Id), usersViewedIds : OptionalArgument (List PlusOne.Scalar.Id), venuesIds : OptionalArgument (List PlusOne.Scalar.Id), venues : OptionalArgument (List PlusOne.InputObject.EventvenuesVenue) } -> { endsAt : OptionalArgument PlusOne.Scalar.DateTime, name : OptionalArgument String, nameFull : OptionalArgument String, private : OptionalArgument Bool, startsAt : OptionalArgument PlusOne.Scalar.DateTime, createdById : OptionalArgument PlusOne.Scalar.Id, chatsIds : OptionalArgument (List PlusOne.Scalar.Id), chats : OptionalArgument (List PlusOne.InputObject.EventchatsChat), hostsIds : OptionalArgument (List PlusOne.Scalar.Id), hosts : OptionalArgument (List PlusOne.InputObject.EventhostsHost), usersAttendingIds : OptionalArgument (List PlusOne.Scalar.Id), usersLikedIds : OptionalArgument (List PlusOne.Scalar.Id), usersViewedIds : OptionalArgument (List PlusOne.Scalar.Id), venuesIds : OptionalArgument (List PlusOne.Scalar.Id), venues : OptionalArgument (List PlusOne.InputObject.EventvenuesVenue) }) -> { id : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.Event -> Field (Maybe decodesTo) RootMutation
updateEvent fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { endsAt = Absent, name = Absent, nameFull = Absent, private = Absent, startsAt = Absent, createdById = Absent, chatsIds = Absent, chats = Absent, hostsIds = Absent, hosts = Absent, usersAttendingIds = Absent, usersLikedIds = Absent, usersViewedIds = Absent, venuesIds = Absent, venues = Absent }

        optionalArgs =
            [ Argument.optional "endsAt" filledInOptionals.endsAt (\(PlusOne.Scalar.DateTime raw) -> Encode.string raw), Argument.optional "name" filledInOptionals.name Encode.string, Argument.optional "nameFull" filledInOptionals.nameFull Encode.string, Argument.optional "private" filledInOptionals.private Encode.bool, Argument.optional "startsAt" filledInOptionals.startsAt (\(PlusOne.Scalar.DateTime raw) -> Encode.string raw), Argument.optional "createdById" filledInOptionals.createdById (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.optional "chatsIds" filledInOptionals.chatsIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "chats" filledInOptionals.chats (PlusOne.InputObject.encodeEventchatsChat |> Encode.list), Argument.optional "hostsIds" filledInOptionals.hostsIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "hosts" filledInOptionals.hosts (PlusOne.InputObject.encodeEventhostsHost |> Encode.list), Argument.optional "usersAttendingIds" filledInOptionals.usersAttendingIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "usersLikedIds" filledInOptionals.usersLikedIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "usersViewedIds" filledInOptionals.usersViewedIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "venuesIds" filledInOptionals.venuesIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "venues" filledInOptionals.venues (PlusOne.InputObject.encodeEventvenuesVenue |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionField "updateEvent" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ]) object (identity >> Decode.maybe)


updateFile : ({ name : OptionalArgument String } -> { name : OptionalArgument String }) -> { id : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.File -> Field (Maybe decodesTo) RootMutation
updateFile fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { name = Absent }

        optionalArgs =
            [ Argument.optional "name" filledInOptionals.name Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionField "updateFile" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ]) object (identity >> Decode.maybe)


updateHost : ({ description : OptionalArgument String, name : OptionalArgument String, nameFull : OptionalArgument String, eventsIds : OptionalArgument (List PlusOne.Scalar.Id), events : OptionalArgument (List PlusOne.InputObject.HosteventsEvent), usersIds : OptionalArgument (List PlusOne.Scalar.Id), venuesIds : OptionalArgument (List PlusOne.Scalar.Id), venues : OptionalArgument (List PlusOne.InputObject.HostvenuesVenue) } -> { description : OptionalArgument String, name : OptionalArgument String, nameFull : OptionalArgument String, eventsIds : OptionalArgument (List PlusOne.Scalar.Id), events : OptionalArgument (List PlusOne.InputObject.HosteventsEvent), usersIds : OptionalArgument (List PlusOne.Scalar.Id), venuesIds : OptionalArgument (List PlusOne.Scalar.Id), venues : OptionalArgument (List PlusOne.InputObject.HostvenuesVenue) }) -> { id : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.Host -> Field (Maybe decodesTo) RootMutation
updateHost fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { description = Absent, name = Absent, nameFull = Absent, eventsIds = Absent, events = Absent, usersIds = Absent, venuesIds = Absent, venues = Absent }

        optionalArgs =
            [ Argument.optional "description" filledInOptionals.description Encode.string, Argument.optional "name" filledInOptionals.name Encode.string, Argument.optional "nameFull" filledInOptionals.nameFull Encode.string, Argument.optional "eventsIds" filledInOptionals.eventsIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "events" filledInOptionals.events (PlusOne.InputObject.encodeHosteventsEvent |> Encode.list), Argument.optional "usersIds" filledInOptionals.usersIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "venuesIds" filledInOptionals.venuesIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "venues" filledInOptionals.venues (PlusOne.InputObject.encodeHostvenuesVenue |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionField "updateHost" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ]) object (identity >> Decode.maybe)


updateLocation : ({ address : OptionalArgument String, addressFull : OptionalArgument String, city : OptionalArgument String, country : OptionalArgument String, lat : OptionalArgument Float, lon : OptionalArgument Float, state : OptionalArgument String, zip : OptionalArgument String, venueId : OptionalArgument PlusOne.Scalar.Id, venue : OptionalArgument PlusOne.InputObject.LocationvenueVenue } -> { address : OptionalArgument String, addressFull : OptionalArgument String, city : OptionalArgument String, country : OptionalArgument String, lat : OptionalArgument Float, lon : OptionalArgument Float, state : OptionalArgument String, zip : OptionalArgument String, venueId : OptionalArgument PlusOne.Scalar.Id, venue : OptionalArgument PlusOne.InputObject.LocationvenueVenue }) -> { id : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.Location -> Field (Maybe decodesTo) RootMutation
updateLocation fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { address = Absent, addressFull = Absent, city = Absent, country = Absent, lat = Absent, lon = Absent, state = Absent, zip = Absent, venueId = Absent, venue = Absent }

        optionalArgs =
            [ Argument.optional "address" filledInOptionals.address Encode.string, Argument.optional "addressFull" filledInOptionals.addressFull Encode.string, Argument.optional "city" filledInOptionals.city Encode.string, Argument.optional "country" filledInOptionals.country Encode.string, Argument.optional "lat" filledInOptionals.lat Encode.float, Argument.optional "lon" filledInOptionals.lon Encode.float, Argument.optional "state" filledInOptionals.state Encode.string, Argument.optional "zip" filledInOptionals.zip Encode.string, Argument.optional "venueId" filledInOptionals.venueId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.optional "venue" filledInOptionals.venue PlusOne.InputObject.encodeLocationvenueVenue ]
                |> List.filterMap identity
    in
    Object.selectionField "updateLocation" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ]) object (identity >> Decode.maybe)


updateMessage : ({ text : OptionalArgument String, chatId : OptionalArgument PlusOne.Scalar.Id, chat : OptionalArgument PlusOne.InputObject.MessagechatChat, fromId : OptionalArgument PlusOne.Scalar.Id } -> { text : OptionalArgument String, chatId : OptionalArgument PlusOne.Scalar.Id, chat : OptionalArgument PlusOne.InputObject.MessagechatChat, fromId : OptionalArgument PlusOne.Scalar.Id }) -> { id : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.Message -> Field (Maybe decodesTo) RootMutation
updateMessage fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { text = Absent, chatId = Absent, chat = Absent, fromId = Absent }

        optionalArgs =
            [ Argument.optional "text" filledInOptionals.text Encode.string, Argument.optional "chatId" filledInOptionals.chatId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.optional "chat" filledInOptionals.chat PlusOne.InputObject.encodeMessagechatChat, Argument.optional "fromId" filledInOptionals.fromId (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ]
                |> List.filterMap identity
    in
    Object.selectionField "updateMessage" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ]) object (identity >> Decode.maybe)


updateUser : ({ bio : OptionalArgument String, birthday : OptionalArgument PlusOne.Scalar.DateTime, name : OptionalArgument String, nameFull : OptionalArgument String, createdEventsIds : OptionalArgument (List PlusOne.Scalar.Id), createdEvents : OptionalArgument (List PlusOne.InputObject.UsercreatedEventsEvent), datesCanceledIds : OptionalArgument (List PlusOne.Scalar.Id), datesCanceled : OptionalArgument (List PlusOne.InputObject.UserdatesCanceledChat), eventsAttendingIds : OptionalArgument (List PlusOne.Scalar.Id), eventsAttending : OptionalArgument (List PlusOne.InputObject.UsereventsAttendingEvent), eventsLikedIds : OptionalArgument (List PlusOne.Scalar.Id), eventsLiked : OptionalArgument (List PlusOne.InputObject.UsereventsLikedEvent), eventsViewedIds : OptionalArgument (List PlusOne.Scalar.Id), eventsViewed : OptionalArgument (List PlusOne.InputObject.UsereventsViewedEvent), hostsIds : OptionalArgument (List PlusOne.Scalar.Id), hosts : OptionalArgument (List PlusOne.InputObject.UserhostsHost), initiatedIds : OptionalArgument (List PlusOne.Scalar.Id), initiated : OptionalArgument (List PlusOne.InputObject.UserinitiatedChat), passedIds : OptionalArgument (List PlusOne.Scalar.Id), passed : OptionalArgument (List PlusOne.InputObject.UserpassedChat), proposedIds : OptionalArgument (List PlusOne.Scalar.Id), proposed : OptionalArgument (List PlusOne.InputObject.UserproposedChat), recipientIds : OptionalArgument (List PlusOne.Scalar.Id), recipient : OptionalArgument (List PlusOne.InputObject.UserrecipientChat), sentIds : OptionalArgument (List PlusOne.Scalar.Id), sent : OptionalArgument (List PlusOne.InputObject.UsersentMessage) } -> { bio : OptionalArgument String, birthday : OptionalArgument PlusOne.Scalar.DateTime, name : OptionalArgument String, nameFull : OptionalArgument String, createdEventsIds : OptionalArgument (List PlusOne.Scalar.Id), createdEvents : OptionalArgument (List PlusOne.InputObject.UsercreatedEventsEvent), datesCanceledIds : OptionalArgument (List PlusOne.Scalar.Id), datesCanceled : OptionalArgument (List PlusOne.InputObject.UserdatesCanceledChat), eventsAttendingIds : OptionalArgument (List PlusOne.Scalar.Id), eventsAttending : OptionalArgument (List PlusOne.InputObject.UsereventsAttendingEvent), eventsLikedIds : OptionalArgument (List PlusOne.Scalar.Id), eventsLiked : OptionalArgument (List PlusOne.InputObject.UsereventsLikedEvent), eventsViewedIds : OptionalArgument (List PlusOne.Scalar.Id), eventsViewed : OptionalArgument (List PlusOne.InputObject.UsereventsViewedEvent), hostsIds : OptionalArgument (List PlusOne.Scalar.Id), hosts : OptionalArgument (List PlusOne.InputObject.UserhostsHost), initiatedIds : OptionalArgument (List PlusOne.Scalar.Id), initiated : OptionalArgument (List PlusOne.InputObject.UserinitiatedChat), passedIds : OptionalArgument (List PlusOne.Scalar.Id), passed : OptionalArgument (List PlusOne.InputObject.UserpassedChat), proposedIds : OptionalArgument (List PlusOne.Scalar.Id), proposed : OptionalArgument (List PlusOne.InputObject.UserproposedChat), recipientIds : OptionalArgument (List PlusOne.Scalar.Id), recipient : OptionalArgument (List PlusOne.InputObject.UserrecipientChat), sentIds : OptionalArgument (List PlusOne.Scalar.Id), sent : OptionalArgument (List PlusOne.InputObject.UsersentMessage) }) -> { id : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.User -> Field (Maybe decodesTo) RootMutation
updateUser fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { bio = Absent, birthday = Absent, name = Absent, nameFull = Absent, createdEventsIds = Absent, createdEvents = Absent, datesCanceledIds = Absent, datesCanceled = Absent, eventsAttendingIds = Absent, eventsAttending = Absent, eventsLikedIds = Absent, eventsLiked = Absent, eventsViewedIds = Absent, eventsViewed = Absent, hostsIds = Absent, hosts = Absent, initiatedIds = Absent, initiated = Absent, passedIds = Absent, passed = Absent, proposedIds = Absent, proposed = Absent, recipientIds = Absent, recipient = Absent, sentIds = Absent, sent = Absent }

        optionalArgs =
            [ Argument.optional "bio" filledInOptionals.bio Encode.string, Argument.optional "birthday" filledInOptionals.birthday (\(PlusOne.Scalar.DateTime raw) -> Encode.string raw), Argument.optional "name" filledInOptionals.name Encode.string, Argument.optional "nameFull" filledInOptionals.nameFull Encode.string, Argument.optional "createdEventsIds" filledInOptionals.createdEventsIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "createdEvents" filledInOptionals.createdEvents (PlusOne.InputObject.encodeUsercreatedEventsEvent |> Encode.list), Argument.optional "datesCanceledIds" filledInOptionals.datesCanceledIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "datesCanceled" filledInOptionals.datesCanceled (PlusOne.InputObject.encodeUserdatesCanceledChat |> Encode.list), Argument.optional "eventsAttendingIds" filledInOptionals.eventsAttendingIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "eventsAttending" filledInOptionals.eventsAttending (PlusOne.InputObject.encodeUsereventsAttendingEvent |> Encode.list), Argument.optional "eventsLikedIds" filledInOptionals.eventsLikedIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "eventsLiked" filledInOptionals.eventsLiked (PlusOne.InputObject.encodeUsereventsLikedEvent |> Encode.list), Argument.optional "eventsViewedIds" filledInOptionals.eventsViewedIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "eventsViewed" filledInOptionals.eventsViewed (PlusOne.InputObject.encodeUsereventsViewedEvent |> Encode.list), Argument.optional "hostsIds" filledInOptionals.hostsIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "hosts" filledInOptionals.hosts (PlusOne.InputObject.encodeUserhostsHost |> Encode.list), Argument.optional "initiatedIds" filledInOptionals.initiatedIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "initiated" filledInOptionals.initiated (PlusOne.InputObject.encodeUserinitiatedChat |> Encode.list), Argument.optional "passedIds" filledInOptionals.passedIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "passed" filledInOptionals.passed (PlusOne.InputObject.encodeUserpassedChat |> Encode.list), Argument.optional "proposedIds" filledInOptionals.proposedIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "proposed" filledInOptionals.proposed (PlusOne.InputObject.encodeUserproposedChat |> Encode.list), Argument.optional "recipientIds" filledInOptionals.recipientIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "recipient" filledInOptionals.recipient (PlusOne.InputObject.encodeUserrecipientChat |> Encode.list), Argument.optional "sentIds" filledInOptionals.sentIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "sent" filledInOptionals.sent (PlusOne.InputObject.encodeUsersentMessage |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionField "updateUser" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ]) object (identity >> Decode.maybe)


updateVenue : ({ description : OptionalArgument String, name : OptionalArgument String, nameFull : OptionalArgument String, locationId : OptionalArgument PlusOne.Scalar.Id, location : OptionalArgument PlusOne.InputObject.VenuelocationLocation, eventsIds : OptionalArgument (List PlusOne.Scalar.Id), events : OptionalArgument (List PlusOne.InputObject.VenueeventsEvent), hostsIds : OptionalArgument (List PlusOne.Scalar.Id), hosts : OptionalArgument (List PlusOne.InputObject.VenuehostsHost) } -> { description : OptionalArgument String, name : OptionalArgument String, nameFull : OptionalArgument String, locationId : OptionalArgument PlusOne.Scalar.Id, location : OptionalArgument PlusOne.InputObject.VenuelocationLocation, eventsIds : OptionalArgument (List PlusOne.Scalar.Id), events : OptionalArgument (List PlusOne.InputObject.VenueeventsEvent), hostsIds : OptionalArgument (List PlusOne.Scalar.Id), hosts : OptionalArgument (List PlusOne.InputObject.VenuehostsHost) }) -> { id : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.Venue -> Field (Maybe decodesTo) RootMutation
updateVenue fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { description = Absent, name = Absent, nameFull = Absent, locationId = Absent, location = Absent, eventsIds = Absent, events = Absent, hostsIds = Absent, hosts = Absent }

        optionalArgs =
            [ Argument.optional "description" filledInOptionals.description Encode.string, Argument.optional "name" filledInOptionals.name Encode.string, Argument.optional "nameFull" filledInOptionals.nameFull Encode.string, Argument.optional "locationId" filledInOptionals.locationId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.optional "location" filledInOptionals.location PlusOne.InputObject.encodeVenuelocationLocation, Argument.optional "eventsIds" filledInOptionals.eventsIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "events" filledInOptionals.events (PlusOne.InputObject.encodeVenueeventsEvent |> Encode.list), Argument.optional "hostsIds" filledInOptionals.hostsIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "hosts" filledInOptionals.hosts (PlusOne.InputObject.encodeVenuehostsHost |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionField "updateVenue" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ]) object (identity >> Decode.maybe)


updateOrCreateChat : { update : PlusOne.InputObject.UpdateChat, create : PlusOne.InputObject.CreateChat } -> SelectionSet decodesTo PlusOne.Object.Chat -> Field (Maybe decodesTo) RootMutation
updateOrCreateChat requiredArgs object =
    Object.selectionField "updateOrCreateChat" [ Argument.required "update" requiredArgs.update PlusOne.InputObject.encodeUpdateChat, Argument.required "create" requiredArgs.create PlusOne.InputObject.encodeCreateChat ] object (identity >> Decode.maybe)


updateOrCreateEvent : { update : PlusOne.InputObject.UpdateEvent, create : PlusOne.InputObject.CreateEvent } -> SelectionSet decodesTo PlusOne.Object.Event -> Field (Maybe decodesTo) RootMutation
updateOrCreateEvent requiredArgs object =
    Object.selectionField "updateOrCreateEvent" [ Argument.required "update" requiredArgs.update PlusOne.InputObject.encodeUpdateEvent, Argument.required "create" requiredArgs.create PlusOne.InputObject.encodeCreateEvent ] object (identity >> Decode.maybe)


updateOrCreateFile : { update : PlusOne.InputObject.UpdateFile, create : PlusOne.InputObject.CreateFile } -> SelectionSet decodesTo PlusOne.Object.File -> Field (Maybe decodesTo) RootMutation
updateOrCreateFile requiredArgs object =
    Object.selectionField "updateOrCreateFile" [ Argument.required "update" requiredArgs.update PlusOne.InputObject.encodeUpdateFile, Argument.required "create" requiredArgs.create PlusOne.InputObject.encodeCreateFile ] object (identity >> Decode.maybe)


updateOrCreateHost : { update : PlusOne.InputObject.UpdateHost, create : PlusOne.InputObject.CreateHost } -> SelectionSet decodesTo PlusOne.Object.Host -> Field (Maybe decodesTo) RootMutation
updateOrCreateHost requiredArgs object =
    Object.selectionField "updateOrCreateHost" [ Argument.required "update" requiredArgs.update PlusOne.InputObject.encodeUpdateHost, Argument.required "create" requiredArgs.create PlusOne.InputObject.encodeCreateHost ] object (identity >> Decode.maybe)


updateOrCreateLocation : { update : PlusOne.InputObject.UpdateLocation, create : PlusOne.InputObject.CreateLocation } -> SelectionSet decodesTo PlusOne.Object.Location -> Field (Maybe decodesTo) RootMutation
updateOrCreateLocation requiredArgs object =
    Object.selectionField "updateOrCreateLocation" [ Argument.required "update" requiredArgs.update PlusOne.InputObject.encodeUpdateLocation, Argument.required "create" requiredArgs.create PlusOne.InputObject.encodeCreateLocation ] object (identity >> Decode.maybe)


updateOrCreateMessage : { update : PlusOne.InputObject.UpdateMessage, create : PlusOne.InputObject.CreateMessage } -> SelectionSet decodesTo PlusOne.Object.Message -> Field (Maybe decodesTo) RootMutation
updateOrCreateMessage requiredArgs object =
    Object.selectionField "updateOrCreateMessage" [ Argument.required "update" requiredArgs.update PlusOne.InputObject.encodeUpdateMessage, Argument.required "create" requiredArgs.create PlusOne.InputObject.encodeCreateMessage ] object (identity >> Decode.maybe)


updateOrCreateUser : { update : PlusOne.InputObject.UpdateUser, create : PlusOne.InputObject.CreateUser } -> SelectionSet decodesTo PlusOne.Object.User -> Field (Maybe decodesTo) RootMutation
updateOrCreateUser requiredArgs object =
    Object.selectionField "updateOrCreateUser" [ Argument.required "update" requiredArgs.update PlusOne.InputObject.encodeUpdateUser, Argument.required "create" requiredArgs.create PlusOne.InputObject.encodeCreateUser ] object (identity >> Decode.maybe)


updateOrCreateVenue : { update : PlusOne.InputObject.UpdateVenue, create : PlusOne.InputObject.CreateVenue } -> SelectionSet decodesTo PlusOne.Object.Venue -> Field (Maybe decodesTo) RootMutation
updateOrCreateVenue requiredArgs object =
    Object.selectionField "updateOrCreateVenue" [ Argument.required "update" requiredArgs.update PlusOne.InputObject.encodeUpdateVenue, Argument.required "create" requiredArgs.create PlusOne.InputObject.encodeCreateVenue ] object (identity >> Decode.maybe)


deleteChat : { id : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.Chat -> Field (Maybe decodesTo) RootMutation
deleteChat requiredArgs object =
    Object.selectionField "deleteChat" [ Argument.required "id" requiredArgs.id (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


deleteEvent : { id : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.Event -> Field (Maybe decodesTo) RootMutation
deleteEvent requiredArgs object =
    Object.selectionField "deleteEvent" [ Argument.required "id" requiredArgs.id (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


deleteFile : { id : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.File -> Field (Maybe decodesTo) RootMutation
deleteFile requiredArgs object =
    Object.selectionField "deleteFile" [ Argument.required "id" requiredArgs.id (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


deleteHost : { id : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.Host -> Field (Maybe decodesTo) RootMutation
deleteHost requiredArgs object =
    Object.selectionField "deleteHost" [ Argument.required "id" requiredArgs.id (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


deleteLocation : { id : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.Location -> Field (Maybe decodesTo) RootMutation
deleteLocation requiredArgs object =
    Object.selectionField "deleteLocation" [ Argument.required "id" requiredArgs.id (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


deleteMessage : { id : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.Message -> Field (Maybe decodesTo) RootMutation
deleteMessage requiredArgs object =
    Object.selectionField "deleteMessage" [ Argument.required "id" requiredArgs.id (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


deleteUser : { id : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.User -> Field (Maybe decodesTo) RootMutation
deleteUser requiredArgs object =
    Object.selectionField "deleteUser" [ Argument.required "id" requiredArgs.id (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


deleteVenue : { id : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.Venue -> Field (Maybe decodesTo) RootMutation
deleteVenue requiredArgs object =
    Object.selectionField "deleteVenue" [ Argument.required "id" requiredArgs.id (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


setVenueOnLocation : { locationLocationId : PlusOne.Scalar.Id, venueVenueId : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.SetVenueOnLocationPayload -> Field (Maybe decodesTo) RootMutation
setVenueOnLocation requiredArgs object =
    Object.selectionField "setVenueOnLocation" [ Argument.required "locationLocationId" requiredArgs.locationLocationId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.required "venueVenueId" requiredArgs.venueVenueId (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


unsetVenueOnLocation : { locationLocationId : PlusOne.Scalar.Id, venueVenueId : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.UnsetVenueOnLocationPayload -> Field (Maybe decodesTo) RootMutation
unsetVenueOnLocation requiredArgs object =
    Object.selectionField "unsetVenueOnLocation" [ Argument.required "locationLocationId" requiredArgs.locationLocationId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.required "venueVenueId" requiredArgs.venueVenueId (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


addToAttendingEvent : { eventsAttendingEventId : PlusOne.Scalar.Id, usersAttendingUserId : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.AddToAttendingEventPayload -> Field (Maybe decodesTo) RootMutation
addToAttendingEvent requiredArgs object =
    Object.selectionField "addToAttendingEvent" [ Argument.required "eventsAttendingEventId" requiredArgs.eventsAttendingEventId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.required "usersAttendingUserId" requiredArgs.usersAttendingUserId (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


addToChatInitBy : { initiatedUserId : PlusOne.Scalar.Id, initiatedChatId : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.AddToChatInitByPayload -> Field (Maybe decodesTo) RootMutation
addToChatInitBy requiredArgs object =
    Object.selectionField "addToChatInitBy" [ Argument.required "initiatedUserId" requiredArgs.initiatedUserId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.required "initiatedChatId" requiredArgs.initiatedChatId (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


addToChatOfEvent : { eventEventId : PlusOne.Scalar.Id, chatsChatId : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.AddToChatOfEventPayload -> Field (Maybe decodesTo) RootMutation
addToChatOfEvent requiredArgs object =
    Object.selectionField "addToChatOfEvent" [ Argument.required "eventEventId" requiredArgs.eventEventId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.required "chatsChatId" requiredArgs.chatsChatId (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


addToChatPassed : { passedUserId : PlusOne.Scalar.Id, passedChatId : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.AddToChatPassedPayload -> Field (Maybe decodesTo) RootMutation
addToChatPassed requiredArgs object =
    Object.selectionField "addToChatPassed" [ Argument.required "passedUserId" requiredArgs.passedUserId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.required "passedChatId" requiredArgs.passedChatId (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


addToChatProposed : { proposedUserId : PlusOne.Scalar.Id, proposedChatId : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.AddToChatProposedPayload -> Field (Maybe decodesTo) RootMutation
addToChatProposed requiredArgs object =
    Object.selectionField "addToChatProposed" [ Argument.required "proposedUserId" requiredArgs.proposedUserId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.required "proposedChatId" requiredArgs.proposedChatId (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


addToDateCanceled : { canceledUserId : PlusOne.Scalar.Id, datesCanceledChatId : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.AddToDateCanceledPayload -> Field (Maybe decodesTo) RootMutation
addToDateCanceled requiredArgs object =
    Object.selectionField "addToDateCanceled" [ Argument.required "canceledUserId" requiredArgs.canceledUserId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.required "datesCanceledChatId" requiredArgs.datesCanceledChatId (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


addToEventCreator : { createdByUserId : PlusOne.Scalar.Id, createdEventsEventId : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.AddToEventCreatorPayload -> Field (Maybe decodesTo) RootMutation
addToEventCreator requiredArgs object =
    Object.selectionField "addToEventCreator" [ Argument.required "createdByUserId" requiredArgs.createdByUserId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.required "createdEventsEventId" requiredArgs.createdEventsEventId (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


addToHostOfEvent : { eventsEventId : PlusOne.Scalar.Id, hostsHostId : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.AddToHostOfEventPayload -> Field (Maybe decodesTo) RootMutation
addToHostOfEvent requiredArgs object =
    Object.selectionField "addToHostOfEvent" [ Argument.required "eventsEventId" requiredArgs.eventsEventId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.required "hostsHostId" requiredArgs.hostsHostId (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


addToHostOfVenue : { venuesVenueId : PlusOne.Scalar.Id, hostsHostId : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.AddToHostOfVenuePayload -> Field (Maybe decodesTo) RootMutation
addToHostOfVenue requiredArgs object =
    Object.selectionField "addToHostOfVenue" [ Argument.required "venuesVenueId" requiredArgs.venuesVenueId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.required "hostsHostId" requiredArgs.hostsHostId (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


addToLikedEvent : { eventsLikedEventId : PlusOne.Scalar.Id, usersLikedUserId : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.AddToLikedEventPayload -> Field (Maybe decodesTo) RootMutation
addToLikedEvent requiredArgs object =
    Object.selectionField "addToLikedEvent" [ Argument.required "eventsLikedEventId" requiredArgs.eventsLikedEventId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.required "usersLikedUserId" requiredArgs.usersLikedUserId (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


addToMessageFromUser : { fromUserId : PlusOne.Scalar.Id, sentMessageId : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.AddToMessageFromUserPayload -> Field (Maybe decodesTo) RootMutation
addToMessageFromUser requiredArgs object =
    Object.selectionField "addToMessageFromUser" [ Argument.required "fromUserId" requiredArgs.fromUserId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.required "sentMessageId" requiredArgs.sentMessageId (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


addToMessageOfChat : { chatChatId : PlusOne.Scalar.Id, messagesMessageId : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.AddToMessageOfChatPayload -> Field (Maybe decodesTo) RootMutation
addToMessageOfChat requiredArgs object =
    Object.selectionField "addToMessageOfChat" [ Argument.required "chatChatId" requiredArgs.chatChatId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.required "messagesMessageId" requiredArgs.messagesMessageId (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


addToRecipientOfChat : { recipientChatId : PlusOne.Scalar.Id, recipientUserId : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.AddToRecipientOfChatPayload -> Field (Maybe decodesTo) RootMutation
addToRecipientOfChat requiredArgs object =
    Object.selectionField "addToRecipientOfChat" [ Argument.required "recipientChatId" requiredArgs.recipientChatId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.required "recipientUserId" requiredArgs.recipientUserId (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


addToUserIsHost : { hostsHostId : PlusOne.Scalar.Id, usersUserId : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.AddToUserIsHostPayload -> Field (Maybe decodesTo) RootMutation
addToUserIsHost requiredArgs object =
    Object.selectionField "addToUserIsHost" [ Argument.required "hostsHostId" requiredArgs.hostsHostId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.required "usersUserId" requiredArgs.usersUserId (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


addToUserViewedEvent : { eventsViewedEventId : PlusOne.Scalar.Id, usersViewedUserId : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.AddToUserViewedEventPayload -> Field (Maybe decodesTo) RootMutation
addToUserViewedEvent requiredArgs object =
    Object.selectionField "addToUserViewedEvent" [ Argument.required "eventsViewedEventId" requiredArgs.eventsViewedEventId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.required "usersViewedUserId" requiredArgs.usersViewedUserId (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


addToVenueOfEvent : { eventsEventId : PlusOne.Scalar.Id, venuesVenueId : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.AddToVenueOfEventPayload -> Field (Maybe decodesTo) RootMutation
addToVenueOfEvent requiredArgs object =
    Object.selectionField "addToVenueOfEvent" [ Argument.required "eventsEventId" requiredArgs.eventsEventId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.required "venuesVenueId" requiredArgs.venuesVenueId (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


removeFromAttendingEvent : { eventsAttendingEventId : PlusOne.Scalar.Id, usersAttendingUserId : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.RemoveFromAttendingEventPayload -> Field (Maybe decodesTo) RootMutation
removeFromAttendingEvent requiredArgs object =
    Object.selectionField "removeFromAttendingEvent" [ Argument.required "eventsAttendingEventId" requiredArgs.eventsAttendingEventId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.required "usersAttendingUserId" requiredArgs.usersAttendingUserId (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


removeFromChatPassed : { passedUserId : PlusOne.Scalar.Id, passedChatId : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.RemoveFromChatPassedPayload -> Field (Maybe decodesTo) RootMutation
removeFromChatPassed requiredArgs object =
    Object.selectionField "removeFromChatPassed" [ Argument.required "passedUserId" requiredArgs.passedUserId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.required "passedChatId" requiredArgs.passedChatId (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


removeFromChatProposed : { proposedUserId : PlusOne.Scalar.Id, proposedChatId : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.RemoveFromChatProposedPayload -> Field (Maybe decodesTo) RootMutation
removeFromChatProposed requiredArgs object =
    Object.selectionField "removeFromChatProposed" [ Argument.required "proposedUserId" requiredArgs.proposedUserId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.required "proposedChatId" requiredArgs.proposedChatId (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


removeFromDateCanceled : { canceledUserId : PlusOne.Scalar.Id, datesCanceledChatId : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.RemoveFromDateCanceledPayload -> Field (Maybe decodesTo) RootMutation
removeFromDateCanceled requiredArgs object =
    Object.selectionField "removeFromDateCanceled" [ Argument.required "canceledUserId" requiredArgs.canceledUserId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.required "datesCanceledChatId" requiredArgs.datesCanceledChatId (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


removeFromHostOfEvent : { eventsEventId : PlusOne.Scalar.Id, hostsHostId : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.RemoveFromHostOfEventPayload -> Field (Maybe decodesTo) RootMutation
removeFromHostOfEvent requiredArgs object =
    Object.selectionField "removeFromHostOfEvent" [ Argument.required "eventsEventId" requiredArgs.eventsEventId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.required "hostsHostId" requiredArgs.hostsHostId (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


removeFromHostOfVenue : { venuesVenueId : PlusOne.Scalar.Id, hostsHostId : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.RemoveFromHostOfVenuePayload -> Field (Maybe decodesTo) RootMutation
removeFromHostOfVenue requiredArgs object =
    Object.selectionField "removeFromHostOfVenue" [ Argument.required "venuesVenueId" requiredArgs.venuesVenueId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.required "hostsHostId" requiredArgs.hostsHostId (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


removeFromLikedEvent : { eventsLikedEventId : PlusOne.Scalar.Id, usersLikedUserId : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.RemoveFromLikedEventPayload -> Field (Maybe decodesTo) RootMutation
removeFromLikedEvent requiredArgs object =
    Object.selectionField "removeFromLikedEvent" [ Argument.required "eventsLikedEventId" requiredArgs.eventsLikedEventId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.required "usersLikedUserId" requiredArgs.usersLikedUserId (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


removeFromMessageFromUser : { fromUserId : PlusOne.Scalar.Id, sentMessageId : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.RemoveFromMessageFromUserPayload -> Field (Maybe decodesTo) RootMutation
removeFromMessageFromUser requiredArgs object =
    Object.selectionField "removeFromMessageFromUser" [ Argument.required "fromUserId" requiredArgs.fromUserId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.required "sentMessageId" requiredArgs.sentMessageId (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


removeFromRecipientOfChat : { recipientChatId : PlusOne.Scalar.Id, recipientUserId : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.RemoveFromRecipientOfChatPayload -> Field (Maybe decodesTo) RootMutation
removeFromRecipientOfChat requiredArgs object =
    Object.selectionField "removeFromRecipientOfChat" [ Argument.required "recipientChatId" requiredArgs.recipientChatId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.required "recipientUserId" requiredArgs.recipientUserId (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


removeFromUserIsHost : { hostsHostId : PlusOne.Scalar.Id, usersUserId : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.RemoveFromUserIsHostPayload -> Field (Maybe decodesTo) RootMutation
removeFromUserIsHost requiredArgs object =
    Object.selectionField "removeFromUserIsHost" [ Argument.required "hostsHostId" requiredArgs.hostsHostId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.required "usersUserId" requiredArgs.usersUserId (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


removeFromUserViewedEvent : { eventsViewedEventId : PlusOne.Scalar.Id, usersViewedUserId : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.RemoveFromUserViewedEventPayload -> Field (Maybe decodesTo) RootMutation
removeFromUserViewedEvent requiredArgs object =
    Object.selectionField "removeFromUserViewedEvent" [ Argument.required "eventsViewedEventId" requiredArgs.eventsViewedEventId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.required "usersViewedUserId" requiredArgs.usersViewedUserId (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


removeFromVenueOfEvent : { eventsEventId : PlusOne.Scalar.Id, venuesVenueId : PlusOne.Scalar.Id } -> SelectionSet decodesTo PlusOne.Object.RemoveFromVenueOfEventPayload -> Field (Maybe decodesTo) RootMutation
removeFromVenueOfEvent requiredArgs object =
    Object.selectionField "removeFromVenueOfEvent" [ Argument.required "eventsEventId" requiredArgs.eventsEventId (\(PlusOne.Scalar.Id raw) -> Encode.string raw), Argument.required "venuesVenueId" requiredArgs.venuesVenueId (\(PlusOne.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


signinUser : ({ email : OptionalArgument PlusOne.InputObject.AuthProviderEmail, auth0 : OptionalArgument PlusOne.InputObject.AuthProviderAuth0 } -> { email : OptionalArgument PlusOne.InputObject.AuthProviderEmail, auth0 : OptionalArgument PlusOne.InputObject.AuthProviderAuth0 }) -> SelectionSet decodesTo PlusOne.Object.SigninPayload -> Field decodesTo RootMutation
signinUser fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { email = Absent, auth0 = Absent }

        optionalArgs =
            [ Argument.optional "email" filledInOptionals.email PlusOne.InputObject.encodeAuthProviderEmail, Argument.optional "auth0" filledInOptionals.auth0 PlusOne.InputObject.encodeAuthProviderAuth0 ]
                |> List.filterMap identity
    in
    Object.selectionField "signinUser" optionalArgs object identity


createUser : ({ bio : OptionalArgument String, nameFull : OptionalArgument String, createdEventsIds : OptionalArgument (List PlusOne.Scalar.Id), createdEvents : OptionalArgument (List PlusOne.InputObject.UsercreatedEventsEvent), datesCanceledIds : OptionalArgument (List PlusOne.Scalar.Id), datesCanceled : OptionalArgument (List PlusOne.InputObject.UserdatesCanceledChat), eventsAttendingIds : OptionalArgument (List PlusOne.Scalar.Id), eventsAttending : OptionalArgument (List PlusOne.InputObject.UsereventsAttendingEvent), eventsLikedIds : OptionalArgument (List PlusOne.Scalar.Id), eventsLiked : OptionalArgument (List PlusOne.InputObject.UsereventsLikedEvent), eventsViewedIds : OptionalArgument (List PlusOne.Scalar.Id), eventsViewed : OptionalArgument (List PlusOne.InputObject.UsereventsViewedEvent), hostsIds : OptionalArgument (List PlusOne.Scalar.Id), hosts : OptionalArgument (List PlusOne.InputObject.UserhostsHost), initiatedIds : OptionalArgument (List PlusOne.Scalar.Id), initiated : OptionalArgument (List PlusOne.InputObject.UserinitiatedChat), passedIds : OptionalArgument (List PlusOne.Scalar.Id), passed : OptionalArgument (List PlusOne.InputObject.UserpassedChat), proposedIds : OptionalArgument (List PlusOne.Scalar.Id), proposed : OptionalArgument (List PlusOne.InputObject.UserproposedChat), recipientIds : OptionalArgument (List PlusOne.Scalar.Id), recipient : OptionalArgument (List PlusOne.InputObject.UserrecipientChat), sentIds : OptionalArgument (List PlusOne.Scalar.Id), sent : OptionalArgument (List PlusOne.InputObject.UsersentMessage) } -> { bio : OptionalArgument String, nameFull : OptionalArgument String, createdEventsIds : OptionalArgument (List PlusOne.Scalar.Id), createdEvents : OptionalArgument (List PlusOne.InputObject.UsercreatedEventsEvent), datesCanceledIds : OptionalArgument (List PlusOne.Scalar.Id), datesCanceled : OptionalArgument (List PlusOne.InputObject.UserdatesCanceledChat), eventsAttendingIds : OptionalArgument (List PlusOne.Scalar.Id), eventsAttending : OptionalArgument (List PlusOne.InputObject.UsereventsAttendingEvent), eventsLikedIds : OptionalArgument (List PlusOne.Scalar.Id), eventsLiked : OptionalArgument (List PlusOne.InputObject.UsereventsLikedEvent), eventsViewedIds : OptionalArgument (List PlusOne.Scalar.Id), eventsViewed : OptionalArgument (List PlusOne.InputObject.UsereventsViewedEvent), hostsIds : OptionalArgument (List PlusOne.Scalar.Id), hosts : OptionalArgument (List PlusOne.InputObject.UserhostsHost), initiatedIds : OptionalArgument (List PlusOne.Scalar.Id), initiated : OptionalArgument (List PlusOne.InputObject.UserinitiatedChat), passedIds : OptionalArgument (List PlusOne.Scalar.Id), passed : OptionalArgument (List PlusOne.InputObject.UserpassedChat), proposedIds : OptionalArgument (List PlusOne.Scalar.Id), proposed : OptionalArgument (List PlusOne.InputObject.UserproposedChat), recipientIds : OptionalArgument (List PlusOne.Scalar.Id), recipient : OptionalArgument (List PlusOne.InputObject.UserrecipientChat), sentIds : OptionalArgument (List PlusOne.Scalar.Id), sent : OptionalArgument (List PlusOne.InputObject.UsersentMessage) }) -> { birthday : PlusOne.Scalar.DateTime, name : String, authProvider : PlusOne.InputObject.AuthProviderSignupData } -> SelectionSet decodesTo PlusOne.Object.User -> Field (Maybe decodesTo) RootMutation
createUser fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { bio = Absent, nameFull = Absent, createdEventsIds = Absent, createdEvents = Absent, datesCanceledIds = Absent, datesCanceled = Absent, eventsAttendingIds = Absent, eventsAttending = Absent, eventsLikedIds = Absent, eventsLiked = Absent, eventsViewedIds = Absent, eventsViewed = Absent, hostsIds = Absent, hosts = Absent, initiatedIds = Absent, initiated = Absent, passedIds = Absent, passed = Absent, proposedIds = Absent, proposed = Absent, recipientIds = Absent, recipient = Absent, sentIds = Absent, sent = Absent }

        optionalArgs =
            [ Argument.optional "bio" filledInOptionals.bio Encode.string, Argument.optional "nameFull" filledInOptionals.nameFull Encode.string, Argument.optional "createdEventsIds" filledInOptionals.createdEventsIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "createdEvents" filledInOptionals.createdEvents (PlusOne.InputObject.encodeUsercreatedEventsEvent |> Encode.list), Argument.optional "datesCanceledIds" filledInOptionals.datesCanceledIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "datesCanceled" filledInOptionals.datesCanceled (PlusOne.InputObject.encodeUserdatesCanceledChat |> Encode.list), Argument.optional "eventsAttendingIds" filledInOptionals.eventsAttendingIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "eventsAttending" filledInOptionals.eventsAttending (PlusOne.InputObject.encodeUsereventsAttendingEvent |> Encode.list), Argument.optional "eventsLikedIds" filledInOptionals.eventsLikedIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "eventsLiked" filledInOptionals.eventsLiked (PlusOne.InputObject.encodeUsereventsLikedEvent |> Encode.list), Argument.optional "eventsViewedIds" filledInOptionals.eventsViewedIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "eventsViewed" filledInOptionals.eventsViewed (PlusOne.InputObject.encodeUsereventsViewedEvent |> Encode.list), Argument.optional "hostsIds" filledInOptionals.hostsIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "hosts" filledInOptionals.hosts (PlusOne.InputObject.encodeUserhostsHost |> Encode.list), Argument.optional "initiatedIds" filledInOptionals.initiatedIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "initiated" filledInOptionals.initiated (PlusOne.InputObject.encodeUserinitiatedChat |> Encode.list), Argument.optional "passedIds" filledInOptionals.passedIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "passed" filledInOptionals.passed (PlusOne.InputObject.encodeUserpassedChat |> Encode.list), Argument.optional "proposedIds" filledInOptionals.proposedIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "proposed" filledInOptionals.proposed (PlusOne.InputObject.encodeUserproposedChat |> Encode.list), Argument.optional "recipientIds" filledInOptionals.recipientIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "recipient" filledInOptionals.recipient (PlusOne.InputObject.encodeUserrecipientChat |> Encode.list), Argument.optional "sentIds" filledInOptionals.sentIds ((\(PlusOne.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "sent" filledInOptionals.sent (PlusOne.InputObject.encodeUsersentMessage |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionField "createUser" (optionalArgs ++ [ Argument.required "birthday" requiredArgs.birthday (\(PlusOne.Scalar.DateTime raw) -> Encode.string raw), Argument.required "name" requiredArgs.name Encode.string, Argument.required "authProvider" requiredArgs.authProvider PlusOne.InputObject.encodeAuthProviderSignupData ]) object (identity >> Decode.maybe)
