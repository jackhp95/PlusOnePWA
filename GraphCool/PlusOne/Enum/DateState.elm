-- Do not manually edit this file, it was auto-generated by Graphqelm
-- https://github.com/dillonkearns/graphqelm


module PlusOne.Enum.DateState exposing (..)

import Json.Decode as Decode exposing (Decoder)


type DateState
    = Passed
    | Confirmed
    | Canceled
    | Active
    | Proposed


decoder : Decoder DateState
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "Passed" ->
                        Decode.succeed Passed

                    "Confirmed" ->
                        Decode.succeed Confirmed

                    "Canceled" ->
                        Decode.succeed Canceled

                    "Active" ->
                        Decode.succeed Active

                    "Proposed" ->
                        Decode.succeed Proposed

                    _ ->
                        Decode.fail ("Invalid DateState type, " ++ string ++ " try re-running the graphqelm CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : DateState -> String
toString enum =
    case enum of
        Passed ->
            "Passed"

        Confirmed ->
            "Confirmed"

        Canceled ->
            "Canceled"

        Active ->
            "Active"

        Proposed ->
            "Proposed"
