-- Do not manually edit this file, it was auto-generated by Graphqelm
-- https://github.com/dillonkearns/graphqelm


module PlusOne.Subscription exposing (..)

import Graphqelm.Field as Field exposing (Field)
import Graphqelm.Internal.Builder.Argument as Argument exposing (Argument)
import Graphqelm.Internal.Builder.Object as Object
import Graphqelm.Internal.Encode as Encode exposing (Value)
import Graphqelm.Operation exposing (RootSubscription)
import Graphqelm.OptionalArgument exposing (OptionalArgument(Absent))
import Graphqelm.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import PlusOne.InputObject
import PlusOne.Interface
import PlusOne.Object
import PlusOne.Scalar
import PlusOne.Union


{-| Select fields to build up a top-level mutation. The request can be sent with
functions from `Graphqelm.Http`.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) RootSubscription
selection constructor =
    Object.selection constructor


{-|

  - filter -

-}
chat : ({ filter : OptionalArgument PlusOne.InputObject.ChatSubscriptionFilter } -> { filter : OptionalArgument PlusOne.InputObject.ChatSubscriptionFilter }) -> SelectionSet decodesTo PlusOne.Object.ChatSubscriptionPayload -> Field (Maybe decodesTo) RootSubscription
chat fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter PlusOne.InputObject.encodeChatSubscriptionFilter ]
                |> List.filterMap identity
    in
    Object.selectionField "Chat" optionalArgs object (identity >> Decode.maybe)


{-|

  - filter -

-}
event : ({ filter : OptionalArgument PlusOne.InputObject.EventSubscriptionFilter } -> { filter : OptionalArgument PlusOne.InputObject.EventSubscriptionFilter }) -> SelectionSet decodesTo PlusOne.Object.EventSubscriptionPayload -> Field (Maybe decodesTo) RootSubscription
event fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter PlusOne.InputObject.encodeEventSubscriptionFilter ]
                |> List.filterMap identity
    in
    Object.selectionField "Event" optionalArgs object (identity >> Decode.maybe)


{-|

  - filter -

-}
file : ({ filter : OptionalArgument PlusOne.InputObject.FileSubscriptionFilter } -> { filter : OptionalArgument PlusOne.InputObject.FileSubscriptionFilter }) -> SelectionSet decodesTo PlusOne.Object.FileSubscriptionPayload -> Field (Maybe decodesTo) RootSubscription
file fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter PlusOne.InputObject.encodeFileSubscriptionFilter ]
                |> List.filterMap identity
    in
    Object.selectionField "File" optionalArgs object (identity >> Decode.maybe)


{-|

  - filter -

-}
host : ({ filter : OptionalArgument PlusOne.InputObject.HostSubscriptionFilter } -> { filter : OptionalArgument PlusOne.InputObject.HostSubscriptionFilter }) -> SelectionSet decodesTo PlusOne.Object.HostSubscriptionPayload -> Field (Maybe decodesTo) RootSubscription
host fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter PlusOne.InputObject.encodeHostSubscriptionFilter ]
                |> List.filterMap identity
    in
    Object.selectionField "Host" optionalArgs object (identity >> Decode.maybe)


{-|

  - filter -

-}
location : ({ filter : OptionalArgument PlusOne.InputObject.LocationSubscriptionFilter } -> { filter : OptionalArgument PlusOne.InputObject.LocationSubscriptionFilter }) -> SelectionSet decodesTo PlusOne.Object.LocationSubscriptionPayload -> Field (Maybe decodesTo) RootSubscription
location fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter PlusOne.InputObject.encodeLocationSubscriptionFilter ]
                |> List.filterMap identity
    in
    Object.selectionField "Location" optionalArgs object (identity >> Decode.maybe)


{-|

  - filter -

-}
message : ({ filter : OptionalArgument PlusOne.InputObject.MessageSubscriptionFilter } -> { filter : OptionalArgument PlusOne.InputObject.MessageSubscriptionFilter }) -> SelectionSet decodesTo PlusOne.Object.MessageSubscriptionPayload -> Field (Maybe decodesTo) RootSubscription
message fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter PlusOne.InputObject.encodeMessageSubscriptionFilter ]
                |> List.filterMap identity
    in
    Object.selectionField "Message" optionalArgs object (identity >> Decode.maybe)


{-|

  - filter -

-}
user : ({ filter : OptionalArgument PlusOne.InputObject.UserSubscriptionFilter } -> { filter : OptionalArgument PlusOne.InputObject.UserSubscriptionFilter }) -> SelectionSet decodesTo PlusOne.Object.UserSubscriptionPayload -> Field (Maybe decodesTo) RootSubscription
user fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter PlusOne.InputObject.encodeUserSubscriptionFilter ]
                |> List.filterMap identity
    in
    Object.selectionField "User" optionalArgs object (identity >> Decode.maybe)


{-|

  - filter -

-}
venue : ({ filter : OptionalArgument PlusOne.InputObject.VenueSubscriptionFilter } -> { filter : OptionalArgument PlusOne.InputObject.VenueSubscriptionFilter }) -> SelectionSet decodesTo PlusOne.Object.VenueSubscriptionPayload -> Field (Maybe decodesTo) RootSubscription
venue fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter PlusOne.InputObject.encodeVenueSubscriptionFilter ]
                |> List.filterMap identity
    in
    Object.selectionField "Venue" optionalArgs object (identity >> Decode.maybe)
