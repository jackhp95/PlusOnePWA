-- Do not manually edit this file, it was auto-generated by Graphqelm
-- https://github.com/dillonkearns/graphqelm


module GraphCool.Object.Message exposing (..)

import GraphCool.InputObject
import GraphCool.Interface
import GraphCool.Object
import GraphCool.Scalar
import GraphCool.Union
import Graphqelm.Field as Field exposing (Field)
import Graphqelm.Internal.Builder.Argument as Argument exposing (Argument)
import Graphqelm.Internal.Builder.Object as Object
import Graphqelm.Internal.Encode as Encode exposing (Value)
import Graphqelm.OptionalArgument exposing (OptionalArgument(Absent))
import Graphqelm.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| Select fields to build up a SelectionSet for this object.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) GraphCool.Object.Message
selection constructor =
    Object.selection constructor


{-|

  - filter -

-}
chat : ({ filter : OptionalArgument GraphCool.InputObject.ChatFilter } -> { filter : OptionalArgument GraphCool.InputObject.ChatFilter }) -> SelectionSet decodesTo GraphCool.Object.Chat -> Field decodesTo GraphCool.Object.Message
chat fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter GraphCool.InputObject.encodeChatFilter ]
                |> List.filterMap identity
    in
    Object.selectionField "chat" optionalArgs object identity


createdAt : Field GraphCool.Scalar.DateTime GraphCool.Object.Message
createdAt =
    Object.fieldDecoder "createdAt" [] (Decode.string |> Decode.map GraphCool.Scalar.DateTime)


{-|

  - filter -

-}
from : ({ filter : OptionalArgument GraphCool.InputObject.UserFilter } -> { filter : OptionalArgument GraphCool.InputObject.UserFilter }) -> SelectionSet decodesTo GraphCool.Object.User -> Field (Maybe decodesTo) GraphCool.Object.Message
from fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter GraphCool.InputObject.encodeUserFilter ]
                |> List.filterMap identity
    in
    Object.selectionField "from" optionalArgs object (identity >> Decode.maybe)


id : Field GraphCool.Scalar.Id GraphCool.Object.Message
id =
    Object.fieldDecoder "id" [] (Decode.string |> Decode.map GraphCool.Scalar.Id)


text : Field String GraphCool.Object.Message
text =
    Object.fieldDecoder "text" [] Decode.string
