-- Do not manually edit this file, it was auto-generated by Graphqelm
-- https://github.com/dillonkearns/graphqelm


module GraphCool.InputObject exposing (..)

import GraphCool.Enum.DateState
import GraphCool.Enum.ModelMutationType_
import GraphCool.Interface
import GraphCool.Object
import GraphCool.Scalar
import GraphCool.Union
import Graphqelm.Field as Field exposing (Field)
import Graphqelm.Internal.Builder.Argument as Argument exposing (Argument)
import Graphqelm.Internal.Builder.Object as Object
import Graphqelm.Internal.Encode as Encode exposing (Value)
import Graphqelm.OptionalArgument exposing (OptionalArgument(Absent))
import Graphqelm.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| Type for the AuthProviderAuth0 input object.
-}
type alias AuthProviderAuth0 =
    { idToken : String }


{-| Encode a AuthProviderAuth0 into a value that can be used as an argument.
-}
encodeAuthProviderAuth0 : AuthProviderAuth0 -> Value
encodeAuthProviderAuth0 input =
    Encode.maybeObject
        [ ( "idToken", Encode.string input.idToken |> Just ) ]


{-| Type for the AuthProviderEmail input object.
-}
type alias AuthProviderEmail =
    { email : String, password : String }


{-| Encode a AuthProviderEmail into a value that can be used as an argument.
-}
encodeAuthProviderEmail : AuthProviderEmail -> Value
encodeAuthProviderEmail input =
    Encode.maybeObject
        [ ( "email", Encode.string input.email |> Just ), ( "password", Encode.string input.password |> Just ) ]


{-| Type for the AuthProviderSignupData input object.
-}
type alias AuthProviderSignupData =
    { email : OptionalArgument AuthProviderEmail, auth0 : OptionalArgument AuthProviderAuth0 }


{-| Encode a AuthProviderSignupData into a value that can be used as an argument.
-}
encodeAuthProviderSignupData : AuthProviderSignupData -> Value
encodeAuthProviderSignupData input =
    Encode.maybeObject
        [ ( "email", encodeAuthProviderEmail |> Encode.optional input.email ), ( "auth0", encodeAuthProviderAuth0 |> Encode.optional input.auth0 ) ]


{-| Type alias for the `ChatFilter` attributes. Note that this type
needs to use the `ChatFilter` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias ChatFilterRaw =
    { and : OptionalArgument (List ChatFilter), or : OptionalArgument (List ChatFilter), dateState : OptionalArgument GraphCool.Enum.DateState.DateState, dateState_not : OptionalArgument GraphCool.Enum.DateState.DateState, dateState_in : OptionalArgument (List GraphCool.Enum.DateState.DateState), dateState_not_in : OptionalArgument (List GraphCool.Enum.DateState.DateState), id : OptionalArgument GraphCool.Scalar.Id, id_not : OptionalArgument GraphCool.Scalar.Id, id_in : OptionalArgument (List GraphCool.Scalar.Id), id_not_in : OptionalArgument (List GraphCool.Scalar.Id), id_lt : OptionalArgument GraphCool.Scalar.Id, id_lte : OptionalArgument GraphCool.Scalar.Id, id_gt : OptionalArgument GraphCool.Scalar.Id, id_gte : OptionalArgument GraphCool.Scalar.Id, id_contains : OptionalArgument GraphCool.Scalar.Id, id_not_contains : OptionalArgument GraphCool.Scalar.Id, id_starts_with : OptionalArgument GraphCool.Scalar.Id, id_not_starts_with : OptionalArgument GraphCool.Scalar.Id, id_ends_with : OptionalArgument GraphCool.Scalar.Id, id_not_ends_with : OptionalArgument GraphCool.Scalar.Id, canceled : OptionalArgument UserFilter, initiated : OptionalArgument UserFilter, messages_every : OptionalArgument MessageFilter, messages_some : OptionalArgument MessageFilter, messages_none : OptionalArgument MessageFilter, passed : OptionalArgument UserFilter, pool : OptionalArgument PoolFilter, proposed : OptionalArgument UserFilter, recipient : OptionalArgument UserFilter }


{-| Type for the ChatFilter input object.
-}
type ChatFilter
    = ChatFilter ChatFilterRaw


{-| Encode a ChatFilter into a value that can be used as an argument.
-}
encodeChatFilter : ChatFilter -> Value
encodeChatFilter (ChatFilter input) =
    Encode.maybeObject
        [ ( "and", (encodeChatFilter |> Encode.list) |> Encode.optional input.and ), ( "or", (encodeChatFilter |> Encode.list) |> Encode.optional input.or ), ( "dateState", Encode.enum GraphCool.Enum.DateState.toString |> Encode.optional input.dateState ), ( "dateState_not", Encode.enum GraphCool.Enum.DateState.toString |> Encode.optional input.dateState_not ), ( "dateState_in", (Encode.enum GraphCool.Enum.DateState.toString |> Encode.list) |> Encode.optional input.dateState_in ), ( "dateState_not_in", (Encode.enum GraphCool.Enum.DateState.toString |> Encode.list) |> Encode.optional input.dateState_not_in ), ( "id", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "canceled", encodeUserFilter |> Encode.optional input.canceled ), ( "initiated", encodeUserFilter |> Encode.optional input.initiated ), ( "messages_every", encodeMessageFilter |> Encode.optional input.messages_every ), ( "messages_some", encodeMessageFilter |> Encode.optional input.messages_some ), ( "messages_none", encodeMessageFilter |> Encode.optional input.messages_none ), ( "passed", encodeUserFilter |> Encode.optional input.passed ), ( "pool", encodePoolFilter |> Encode.optional input.pool ), ( "proposed", encodeUserFilter |> Encode.optional input.proposed ), ( "recipient", encodeUserFilter |> Encode.optional input.recipient ) ]


{-| Type alias for the `ChatSubscriptionFilter` attributes. Note that this type
needs to use the `ChatSubscriptionFilter` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias ChatSubscriptionFilterRaw =
    { and : OptionalArgument (List ChatSubscriptionFilter), or : OptionalArgument (List ChatSubscriptionFilter), mutation_in : OptionalArgument (List GraphCool.Enum.ModelMutationType_.ModelMutationType_), updatedFields_contains : OptionalArgument String, updatedFields_contains_every : OptionalArgument (List String), updatedFields_contains_some : OptionalArgument (List String), node : OptionalArgument ChatSubscriptionFilterNode }


{-| Type for the ChatSubscriptionFilter input object.
-}
type ChatSubscriptionFilter
    = ChatSubscriptionFilter ChatSubscriptionFilterRaw


{-| Encode a ChatSubscriptionFilter into a value that can be used as an argument.
-}
encodeChatSubscriptionFilter : ChatSubscriptionFilter -> Value
encodeChatSubscriptionFilter (ChatSubscriptionFilter input) =
    Encode.maybeObject
        [ ( "and", (encodeChatSubscriptionFilter |> Encode.list) |> Encode.optional input.and ), ( "or", (encodeChatSubscriptionFilter |> Encode.list) |> Encode.optional input.or ), ( "mutation_in", (Encode.enum GraphCool.Enum.ModelMutationType_.toString |> Encode.list) |> Encode.optional input.mutation_in ), ( "updatedFields_contains", Encode.string |> Encode.optional input.updatedFields_contains ), ( "updatedFields_contains_every", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_every ), ( "updatedFields_contains_some", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_some ), ( "node", encodeChatSubscriptionFilterNode |> Encode.optional input.node ) ]


{-| Type alias for the `ChatSubscriptionFilterNode` attributes. Note that this type
needs to use the `ChatSubscriptionFilterNode` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias ChatSubscriptionFilterNodeRaw =
    { dateState : OptionalArgument GraphCool.Enum.DateState.DateState, dateState_not : OptionalArgument GraphCool.Enum.DateState.DateState, dateState_in : OptionalArgument (List GraphCool.Enum.DateState.DateState), dateState_not_in : OptionalArgument (List GraphCool.Enum.DateState.DateState), id : OptionalArgument GraphCool.Scalar.Id, id_not : OptionalArgument GraphCool.Scalar.Id, id_in : OptionalArgument (List GraphCool.Scalar.Id), id_not_in : OptionalArgument (List GraphCool.Scalar.Id), id_lt : OptionalArgument GraphCool.Scalar.Id, id_lte : OptionalArgument GraphCool.Scalar.Id, id_gt : OptionalArgument GraphCool.Scalar.Id, id_gte : OptionalArgument GraphCool.Scalar.Id, id_contains : OptionalArgument GraphCool.Scalar.Id, id_not_contains : OptionalArgument GraphCool.Scalar.Id, id_starts_with : OptionalArgument GraphCool.Scalar.Id, id_not_starts_with : OptionalArgument GraphCool.Scalar.Id, id_ends_with : OptionalArgument GraphCool.Scalar.Id, id_not_ends_with : OptionalArgument GraphCool.Scalar.Id, canceled : OptionalArgument UserFilter, initiated : OptionalArgument UserFilter, messages_every : OptionalArgument MessageFilter, messages_some : OptionalArgument MessageFilter, messages_none : OptionalArgument MessageFilter, passed : OptionalArgument UserFilter, pool : OptionalArgument PoolFilter, proposed : OptionalArgument UserFilter, recipient : OptionalArgument UserFilter }


{-| Type for the ChatSubscriptionFilterNode input object.
-}
type ChatSubscriptionFilterNode
    = ChatSubscriptionFilterNode ChatSubscriptionFilterNodeRaw


{-| Encode a ChatSubscriptionFilterNode into a value that can be used as an argument.
-}
encodeChatSubscriptionFilterNode : ChatSubscriptionFilterNode -> Value
encodeChatSubscriptionFilterNode (ChatSubscriptionFilterNode input) =
    Encode.maybeObject
        [ ( "dateState", Encode.enum GraphCool.Enum.DateState.toString |> Encode.optional input.dateState ), ( "dateState_not", Encode.enum GraphCool.Enum.DateState.toString |> Encode.optional input.dateState_not ), ( "dateState_in", (Encode.enum GraphCool.Enum.DateState.toString |> Encode.list) |> Encode.optional input.dateState_in ), ( "dateState_not_in", (Encode.enum GraphCool.Enum.DateState.toString |> Encode.list) |> Encode.optional input.dateState_not_in ), ( "id", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "canceled", encodeUserFilter |> Encode.optional input.canceled ), ( "initiated", encodeUserFilter |> Encode.optional input.initiated ), ( "messages_every", encodeMessageFilter |> Encode.optional input.messages_every ), ( "messages_some", encodeMessageFilter |> Encode.optional input.messages_some ), ( "messages_none", encodeMessageFilter |> Encode.optional input.messages_none ), ( "passed", encodeUserFilter |> Encode.optional input.passed ), ( "pool", encodePoolFilter |> Encode.optional input.pool ), ( "proposed", encodeUserFilter |> Encode.optional input.proposed ), ( "recipient", encodeUserFilter |> Encode.optional input.recipient ) ]


{-| Type for the ChatmessagesMessage input object.
-}
type alias ChatmessagesMessage =
    { text : String, fromId : OptionalArgument GraphCool.Scalar.Id }


{-| Encode a ChatmessagesMessage into a value that can be used as an argument.
-}
encodeChatmessagesMessage : ChatmessagesMessage -> Value
encodeChatmessagesMessage input =
    Encode.maybeObject
        [ ( "text", Encode.string input.text |> Just ), ( "fromId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.fromId ) ]


{-| Type alias for the `ChatpoolPool` attributes. Note that this type
needs to use the `ChatpoolPool` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias ChatpoolPoolRaw =
    { seatGeekId : OptionalArgument String, eventId : OptionalArgument GraphCool.Scalar.Id, event : OptionalArgument PooleventEvent, attendingIds : OptionalArgument (List GraphCool.Scalar.Id), chatsIds : OptionalArgument (List GraphCool.Scalar.Id), chats : OptionalArgument (List PoolchatsChat), likedIds : OptionalArgument (List GraphCool.Scalar.Id), viewedIds : OptionalArgument (List GraphCool.Scalar.Id) }


{-| Type for the ChatpoolPool input object.
-}
type ChatpoolPool
    = ChatpoolPool ChatpoolPoolRaw


{-| Encode a ChatpoolPool into a value that can be used as an argument.
-}
encodeChatpoolPool : ChatpoolPool -> Value
encodeChatpoolPool (ChatpoolPool input) =
    Encode.maybeObject
        [ ( "seatGeekId", Encode.string |> Encode.optional input.seatGeekId ), ( "eventId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.eventId ), ( "event", encodePooleventEvent |> Encode.optional input.event ), ( "attendingIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.attendingIds ), ( "chatsIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.chatsIds ), ( "chats", (encodePoolchatsChat |> Encode.list) |> Encode.optional input.chats ), ( "likedIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.likedIds ), ( "viewedIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.viewedIds ) ]


{-| Type alias for the `CreateChat` attributes. Note that this type
needs to use the `CreateChat` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias CreateChatRaw =
    { dateState : OptionalArgument GraphCool.Enum.DateState.DateState, canceledId : OptionalArgument GraphCool.Scalar.Id, initiatedId : OptionalArgument GraphCool.Scalar.Id, passedId : OptionalArgument GraphCool.Scalar.Id, poolId : OptionalArgument GraphCool.Scalar.Id, pool : OptionalArgument ChatpoolPool, proposedId : OptionalArgument GraphCool.Scalar.Id, recipientId : OptionalArgument GraphCool.Scalar.Id, messagesIds : OptionalArgument (List GraphCool.Scalar.Id), messages : OptionalArgument (List ChatmessagesMessage) }


{-| Type for the CreateChat input object.
-}
type CreateChat
    = CreateChat CreateChatRaw


{-| Encode a CreateChat into a value that can be used as an argument.
-}
encodeCreateChat : CreateChat -> Value
encodeCreateChat (CreateChat input) =
    Encode.maybeObject
        [ ( "dateState", Encode.enum GraphCool.Enum.DateState.toString |> Encode.optional input.dateState ), ( "canceledId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.canceledId ), ( "initiatedId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.initiatedId ), ( "passedId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.passedId ), ( "poolId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.poolId ), ( "pool", encodeChatpoolPool |> Encode.optional input.pool ), ( "proposedId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.proposedId ), ( "recipientId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.recipientId ), ( "messagesIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.messagesIds ), ( "messages", (encodeChatmessagesMessage |> Encode.list) |> Encode.optional input.messages ) ]


{-| Type alias for the `CreateEvent` attributes. Note that this type
needs to use the `CreateEvent` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias CreateEventRaw =
    { endsAt : OptionalArgument GraphCool.Scalar.DateTime, name : String, nameFull : OptionalArgument String, private : OptionalArgument Bool, startsAt : GraphCool.Scalar.DateTime, createdById : OptionalArgument GraphCool.Scalar.Id, poolId : OptionalArgument GraphCool.Scalar.Id, pool : OptionalArgument EventpoolPool, hostsIds : OptionalArgument (List GraphCool.Scalar.Id), hosts : OptionalArgument (List EventhostsHost), venuesIds : OptionalArgument (List GraphCool.Scalar.Id), venues : OptionalArgument (List EventvenuesVenue) }


{-| Type for the CreateEvent input object.
-}
type CreateEvent
    = CreateEvent CreateEventRaw


{-| Encode a CreateEvent into a value that can be used as an argument.
-}
encodeCreateEvent : CreateEvent -> Value
encodeCreateEvent (CreateEvent input) =
    Encode.maybeObject
        [ ( "endsAt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.endsAt ), ( "name", Encode.string input.name |> Just ), ( "nameFull", Encode.string |> Encode.optional input.nameFull ), ( "private", Encode.bool |> Encode.optional input.private ), ( "startsAt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) input.startsAt |> Just ), ( "createdById", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.createdById ), ( "poolId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.poolId ), ( "pool", encodeEventpoolPool |> Encode.optional input.pool ), ( "hostsIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.hostsIds ), ( "hosts", (encodeEventhostsHost |> Encode.list) |> Encode.optional input.hosts ), ( "venuesIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.venuesIds ), ( "venues", (encodeEventvenuesVenue |> Encode.list) |> Encode.optional input.venues ) ]


{-| Type for the CreateFile input object.
-}
type alias CreateFile =
    { name : String }


{-| Encode a CreateFile into a value that can be used as an argument.
-}
encodeCreateFile : CreateFile -> Value
encodeCreateFile input =
    Encode.maybeObject
        [ ( "name", Encode.string input.name |> Just ) ]


{-| Type alias for the `CreateHost` attributes. Note that this type
needs to use the `CreateHost` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias CreateHostRaw =
    { description : OptionalArgument String, name : String, nameFull : OptionalArgument String, eventsIds : OptionalArgument (List GraphCool.Scalar.Id), events : OptionalArgument (List HosteventsEvent), usersIds : OptionalArgument (List GraphCool.Scalar.Id), venuesIds : OptionalArgument (List GraphCool.Scalar.Id), venues : OptionalArgument (List HostvenuesVenue) }


{-| Type for the CreateHost input object.
-}
type CreateHost
    = CreateHost CreateHostRaw


{-| Encode a CreateHost into a value that can be used as an argument.
-}
encodeCreateHost : CreateHost -> Value
encodeCreateHost (CreateHost input) =
    Encode.maybeObject
        [ ( "description", Encode.string |> Encode.optional input.description ), ( "name", Encode.string input.name |> Just ), ( "nameFull", Encode.string |> Encode.optional input.nameFull ), ( "eventsIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.eventsIds ), ( "events", (encodeHosteventsEvent |> Encode.list) |> Encode.optional input.events ), ( "usersIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.usersIds ), ( "venuesIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.venuesIds ), ( "venues", (encodeHostvenuesVenue |> Encode.list) |> Encode.optional input.venues ) ]


{-| Type alias for the `CreateLocation` attributes. Note that this type
needs to use the `CreateLocation` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias CreateLocationRaw =
    { address : OptionalArgument String, addressFull : OptionalArgument String, city : OptionalArgument String, country : OptionalArgument String, lat : Float, lon : Float, state : String, zip : OptionalArgument String, venueId : OptionalArgument GraphCool.Scalar.Id, venue : OptionalArgument LocationvenueVenue }


{-| Type for the CreateLocation input object.
-}
type CreateLocation
    = CreateLocation CreateLocationRaw


{-| Encode a CreateLocation into a value that can be used as an argument.
-}
encodeCreateLocation : CreateLocation -> Value
encodeCreateLocation (CreateLocation input) =
    Encode.maybeObject
        [ ( "address", Encode.string |> Encode.optional input.address ), ( "addressFull", Encode.string |> Encode.optional input.addressFull ), ( "city", Encode.string |> Encode.optional input.city ), ( "country", Encode.string |> Encode.optional input.country ), ( "lat", Encode.float input.lat |> Just ), ( "lon", Encode.float input.lon |> Just ), ( "state", Encode.string input.state |> Just ), ( "zip", Encode.string |> Encode.optional input.zip ), ( "venueId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.venueId ), ( "venue", encodeLocationvenueVenue |> Encode.optional input.venue ) ]


{-| Type alias for the `CreateMessage` attributes. Note that this type
needs to use the `CreateMessage` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias CreateMessageRaw =
    { text : String, chatId : OptionalArgument GraphCool.Scalar.Id, chat : OptionalArgument MessagechatChat, fromId : OptionalArgument GraphCool.Scalar.Id }


{-| Type for the CreateMessage input object.
-}
type CreateMessage
    = CreateMessage CreateMessageRaw


{-| Encode a CreateMessage into a value that can be used as an argument.
-}
encodeCreateMessage : CreateMessage -> Value
encodeCreateMessage (CreateMessage input) =
    Encode.maybeObject
        [ ( "text", Encode.string input.text |> Just ), ( "chatId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.chatId ), ( "chat", encodeMessagechatChat |> Encode.optional input.chat ), ( "fromId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.fromId ) ]


{-| Type alias for the `CreatePool` attributes. Note that this type
needs to use the `CreatePool` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias CreatePoolRaw =
    { seatGeekId : OptionalArgument String, eventId : OptionalArgument GraphCool.Scalar.Id, event : OptionalArgument PooleventEvent, attendingIds : OptionalArgument (List GraphCool.Scalar.Id), chatsIds : OptionalArgument (List GraphCool.Scalar.Id), chats : OptionalArgument (List PoolchatsChat), likedIds : OptionalArgument (List GraphCool.Scalar.Id), viewedIds : OptionalArgument (List GraphCool.Scalar.Id) }


{-| Type for the CreatePool input object.
-}
type CreatePool
    = CreatePool CreatePoolRaw


{-| Encode a CreatePool into a value that can be used as an argument.
-}
encodeCreatePool : CreatePool -> Value
encodeCreatePool (CreatePool input) =
    Encode.maybeObject
        [ ( "seatGeekId", Encode.string |> Encode.optional input.seatGeekId ), ( "eventId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.eventId ), ( "event", encodePooleventEvent |> Encode.optional input.event ), ( "attendingIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.attendingIds ), ( "chatsIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.chatsIds ), ( "chats", (encodePoolchatsChat |> Encode.list) |> Encode.optional input.chats ), ( "likedIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.likedIds ), ( "viewedIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.viewedIds ) ]


{-| Type alias for the `CreateUser` attributes. Note that this type
needs to use the `CreateUser` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias CreateUserRaw =
    { bio : OptionalArgument String, birthday : GraphCool.Scalar.DateTime, name : String, nameFull : OptionalArgument String, attendingEventIds : OptionalArgument (List GraphCool.Scalar.Id), attendingEvent : OptionalArgument (List UserattendingEventPool), createdEventsIds : OptionalArgument (List GraphCool.Scalar.Id), createdEvents : OptionalArgument (List UsercreatedEventsEvent), datesCanceledIds : OptionalArgument (List GraphCool.Scalar.Id), datesCanceled : OptionalArgument (List UserdatesCanceledChat), hostsIds : OptionalArgument (List GraphCool.Scalar.Id), hosts : OptionalArgument (List UserhostsHost), initiatedIds : OptionalArgument (List GraphCool.Scalar.Id), initiated : OptionalArgument (List UserinitiatedChat), likedEventIds : OptionalArgument (List GraphCool.Scalar.Id), likedEvent : OptionalArgument (List UserlikedEventPool), passedIds : OptionalArgument (List GraphCool.Scalar.Id), passed : OptionalArgument (List UserpassedChat), proposedIds : OptionalArgument (List GraphCool.Scalar.Id), proposed : OptionalArgument (List UserproposedChat), recipientIds : OptionalArgument (List GraphCool.Scalar.Id), recipient : OptionalArgument (List UserrecipientChat), sentIds : OptionalArgument (List GraphCool.Scalar.Id), sent : OptionalArgument (List UsersentMessage), viewedEventIds : OptionalArgument (List GraphCool.Scalar.Id), viewedEvent : OptionalArgument (List UserviewedEventPool) }


{-| Type for the CreateUser input object.
-}
type CreateUser
    = CreateUser CreateUserRaw


{-| Encode a CreateUser into a value that can be used as an argument.
-}
encodeCreateUser : CreateUser -> Value
encodeCreateUser (CreateUser input) =
    Encode.maybeObject
        [ ( "bio", Encode.string |> Encode.optional input.bio ), ( "birthday", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) input.birthday |> Just ), ( "name", Encode.string input.name |> Just ), ( "nameFull", Encode.string |> Encode.optional input.nameFull ), ( "attendingEventIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.attendingEventIds ), ( "attendingEvent", (encodeUserattendingEventPool |> Encode.list) |> Encode.optional input.attendingEvent ), ( "createdEventsIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdEventsIds ), ( "createdEvents", (encodeUsercreatedEventsEvent |> Encode.list) |> Encode.optional input.createdEvents ), ( "datesCanceledIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.datesCanceledIds ), ( "datesCanceled", (encodeUserdatesCanceledChat |> Encode.list) |> Encode.optional input.datesCanceled ), ( "hostsIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.hostsIds ), ( "hosts", (encodeUserhostsHost |> Encode.list) |> Encode.optional input.hosts ), ( "initiatedIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.initiatedIds ), ( "initiated", (encodeUserinitiatedChat |> Encode.list) |> Encode.optional input.initiated ), ( "likedEventIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.likedEventIds ), ( "likedEvent", (encodeUserlikedEventPool |> Encode.list) |> Encode.optional input.likedEvent ), ( "passedIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.passedIds ), ( "passed", (encodeUserpassedChat |> Encode.list) |> Encode.optional input.passed ), ( "proposedIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.proposedIds ), ( "proposed", (encodeUserproposedChat |> Encode.list) |> Encode.optional input.proposed ), ( "recipientIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.recipientIds ), ( "recipient", (encodeUserrecipientChat |> Encode.list) |> Encode.optional input.recipient ), ( "sentIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.sentIds ), ( "sent", (encodeUsersentMessage |> Encode.list) |> Encode.optional input.sent ), ( "viewedEventIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.viewedEventIds ), ( "viewedEvent", (encodeUserviewedEventPool |> Encode.list) |> Encode.optional input.viewedEvent ) ]


{-| Type alias for the `CreateVenue` attributes. Note that this type
needs to use the `CreateVenue` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias CreateVenueRaw =
    { description : OptionalArgument String, name : String, nameFull : String, locationId : OptionalArgument GraphCool.Scalar.Id, location : OptionalArgument VenuelocationLocation, eventsIds : OptionalArgument (List GraphCool.Scalar.Id), events : OptionalArgument (List VenueeventsEvent), hostsIds : OptionalArgument (List GraphCool.Scalar.Id), hosts : OptionalArgument (List VenuehostsHost) }


{-| Type for the CreateVenue input object.
-}
type CreateVenue
    = CreateVenue CreateVenueRaw


{-| Encode a CreateVenue into a value that can be used as an argument.
-}
encodeCreateVenue : CreateVenue -> Value
encodeCreateVenue (CreateVenue input) =
    Encode.maybeObject
        [ ( "description", Encode.string |> Encode.optional input.description ), ( "name", Encode.string input.name |> Just ), ( "nameFull", Encode.string input.nameFull |> Just ), ( "locationId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.locationId ), ( "location", encodeVenuelocationLocation |> Encode.optional input.location ), ( "eventsIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.eventsIds ), ( "events", (encodeVenueeventsEvent |> Encode.list) |> Encode.optional input.events ), ( "hostsIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.hostsIds ), ( "hosts", (encodeVenuehostsHost |> Encode.list) |> Encode.optional input.hosts ) ]


{-| Type alias for the `EventFilter` attributes. Note that this type
needs to use the `EventFilter` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias EventFilterRaw =
    { and : OptionalArgument (List EventFilter), or : OptionalArgument (List EventFilter), createdAt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_not : OptionalArgument GraphCool.Scalar.DateTime, createdAt_in : OptionalArgument (List GraphCool.Scalar.DateTime), createdAt_not_in : OptionalArgument (List GraphCool.Scalar.DateTime), createdAt_lt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_lte : OptionalArgument GraphCool.Scalar.DateTime, createdAt_gt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_gte : OptionalArgument GraphCool.Scalar.DateTime, endsAt : OptionalArgument GraphCool.Scalar.DateTime, endsAt_not : OptionalArgument GraphCool.Scalar.DateTime, endsAt_in : OptionalArgument (List GraphCool.Scalar.DateTime), endsAt_not_in : OptionalArgument (List GraphCool.Scalar.DateTime), endsAt_lt : OptionalArgument GraphCool.Scalar.DateTime, endsAt_lte : OptionalArgument GraphCool.Scalar.DateTime, endsAt_gt : OptionalArgument GraphCool.Scalar.DateTime, endsAt_gte : OptionalArgument GraphCool.Scalar.DateTime, id : OptionalArgument GraphCool.Scalar.Id, id_not : OptionalArgument GraphCool.Scalar.Id, id_in : OptionalArgument (List GraphCool.Scalar.Id), id_not_in : OptionalArgument (List GraphCool.Scalar.Id), id_lt : OptionalArgument GraphCool.Scalar.Id, id_lte : OptionalArgument GraphCool.Scalar.Id, id_gt : OptionalArgument GraphCool.Scalar.Id, id_gte : OptionalArgument GraphCool.Scalar.Id, id_contains : OptionalArgument GraphCool.Scalar.Id, id_not_contains : OptionalArgument GraphCool.Scalar.Id, id_starts_with : OptionalArgument GraphCool.Scalar.Id, id_not_starts_with : OptionalArgument GraphCool.Scalar.Id, id_ends_with : OptionalArgument GraphCool.Scalar.Id, id_not_ends_with : OptionalArgument GraphCool.Scalar.Id, name : OptionalArgument String, name_not : OptionalArgument String, name_in : OptionalArgument (List String), name_not_in : OptionalArgument (List String), name_lt : OptionalArgument String, name_lte : OptionalArgument String, name_gt : OptionalArgument String, name_gte : OptionalArgument String, name_contains : OptionalArgument String, name_not_contains : OptionalArgument String, name_starts_with : OptionalArgument String, name_not_starts_with : OptionalArgument String, name_ends_with : OptionalArgument String, name_not_ends_with : OptionalArgument String, nameFull : OptionalArgument String, nameFull_not : OptionalArgument String, nameFull_in : OptionalArgument (List String), nameFull_not_in : OptionalArgument (List String), nameFull_lt : OptionalArgument String, nameFull_lte : OptionalArgument String, nameFull_gt : OptionalArgument String, nameFull_gte : OptionalArgument String, nameFull_contains : OptionalArgument String, nameFull_not_contains : OptionalArgument String, nameFull_starts_with : OptionalArgument String, nameFull_not_starts_with : OptionalArgument String, nameFull_ends_with : OptionalArgument String, nameFull_not_ends_with : OptionalArgument String, private : OptionalArgument Bool, private_not : OptionalArgument Bool, startsAt : OptionalArgument GraphCool.Scalar.DateTime, startsAt_not : OptionalArgument GraphCool.Scalar.DateTime, startsAt_in : OptionalArgument (List GraphCool.Scalar.DateTime), startsAt_not_in : OptionalArgument (List GraphCool.Scalar.DateTime), startsAt_lt : OptionalArgument GraphCool.Scalar.DateTime, startsAt_lte : OptionalArgument GraphCool.Scalar.DateTime, startsAt_gt : OptionalArgument GraphCool.Scalar.DateTime, startsAt_gte : OptionalArgument GraphCool.Scalar.DateTime, createdBy : OptionalArgument UserFilter, hosts_every : OptionalArgument HostFilter, hosts_some : OptionalArgument HostFilter, hosts_none : OptionalArgument HostFilter, pool : OptionalArgument PoolFilter, venues_every : OptionalArgument VenueFilter, venues_some : OptionalArgument VenueFilter, venues_none : OptionalArgument VenueFilter }


{-| Type for the EventFilter input object.
-}
type EventFilter
    = EventFilter EventFilterRaw


{-| Encode a EventFilter into a value that can be used as an argument.
-}
encodeEventFilter : EventFilter -> Value
encodeEventFilter (EventFilter input) =
    Encode.maybeObject
        [ ( "and", (encodeEventFilter |> Encode.list) |> Encode.optional input.and ), ( "or", (encodeEventFilter |> Encode.list) |> Encode.optional input.or ), ( "createdAt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "endsAt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.endsAt ), ( "endsAt_not", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.endsAt_not ), ( "endsAt_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.endsAt_in ), ( "endsAt_not_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.endsAt_not_in ), ( "endsAt_lt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.endsAt_lt ), ( "endsAt_lte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.endsAt_lte ), ( "endsAt_gt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.endsAt_gt ), ( "endsAt_gte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.endsAt_gte ), ( "id", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "name", Encode.string |> Encode.optional input.name ), ( "name_not", Encode.string |> Encode.optional input.name_not ), ( "name_in", (Encode.string |> Encode.list) |> Encode.optional input.name_in ), ( "name_not_in", (Encode.string |> Encode.list) |> Encode.optional input.name_not_in ), ( "name_lt", Encode.string |> Encode.optional input.name_lt ), ( "name_lte", Encode.string |> Encode.optional input.name_lte ), ( "name_gt", Encode.string |> Encode.optional input.name_gt ), ( "name_gte", Encode.string |> Encode.optional input.name_gte ), ( "name_contains", Encode.string |> Encode.optional input.name_contains ), ( "name_not_contains", Encode.string |> Encode.optional input.name_not_contains ), ( "name_starts_with", Encode.string |> Encode.optional input.name_starts_with ), ( "name_not_starts_with", Encode.string |> Encode.optional input.name_not_starts_with ), ( "name_ends_with", Encode.string |> Encode.optional input.name_ends_with ), ( "name_not_ends_with", Encode.string |> Encode.optional input.name_not_ends_with ), ( "nameFull", Encode.string |> Encode.optional input.nameFull ), ( "nameFull_not", Encode.string |> Encode.optional input.nameFull_not ), ( "nameFull_in", (Encode.string |> Encode.list) |> Encode.optional input.nameFull_in ), ( "nameFull_not_in", (Encode.string |> Encode.list) |> Encode.optional input.nameFull_not_in ), ( "nameFull_lt", Encode.string |> Encode.optional input.nameFull_lt ), ( "nameFull_lte", Encode.string |> Encode.optional input.nameFull_lte ), ( "nameFull_gt", Encode.string |> Encode.optional input.nameFull_gt ), ( "nameFull_gte", Encode.string |> Encode.optional input.nameFull_gte ), ( "nameFull_contains", Encode.string |> Encode.optional input.nameFull_contains ), ( "nameFull_not_contains", Encode.string |> Encode.optional input.nameFull_not_contains ), ( "nameFull_starts_with", Encode.string |> Encode.optional input.nameFull_starts_with ), ( "nameFull_not_starts_with", Encode.string |> Encode.optional input.nameFull_not_starts_with ), ( "nameFull_ends_with", Encode.string |> Encode.optional input.nameFull_ends_with ), ( "nameFull_not_ends_with", Encode.string |> Encode.optional input.nameFull_not_ends_with ), ( "private", Encode.bool |> Encode.optional input.private ), ( "private_not", Encode.bool |> Encode.optional input.private_not ), ( "startsAt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.startsAt ), ( "startsAt_not", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.startsAt_not ), ( "startsAt_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.startsAt_in ), ( "startsAt_not_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.startsAt_not_in ), ( "startsAt_lt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.startsAt_lt ), ( "startsAt_lte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.startsAt_lte ), ( "startsAt_gt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.startsAt_gt ), ( "startsAt_gte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.startsAt_gte ), ( "createdBy", encodeUserFilter |> Encode.optional input.createdBy ), ( "hosts_every", encodeHostFilter |> Encode.optional input.hosts_every ), ( "hosts_some", encodeHostFilter |> Encode.optional input.hosts_some ), ( "hosts_none", encodeHostFilter |> Encode.optional input.hosts_none ), ( "pool", encodePoolFilter |> Encode.optional input.pool ), ( "venues_every", encodeVenueFilter |> Encode.optional input.venues_every ), ( "venues_some", encodeVenueFilter |> Encode.optional input.venues_some ), ( "venues_none", encodeVenueFilter |> Encode.optional input.venues_none ) ]


{-| Type alias for the `EventSubscriptionFilter` attributes. Note that this type
needs to use the `EventSubscriptionFilter` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias EventSubscriptionFilterRaw =
    { and : OptionalArgument (List EventSubscriptionFilter), or : OptionalArgument (List EventSubscriptionFilter), mutation_in : OptionalArgument (List GraphCool.Enum.ModelMutationType_.ModelMutationType_), updatedFields_contains : OptionalArgument String, updatedFields_contains_every : OptionalArgument (List String), updatedFields_contains_some : OptionalArgument (List String), node : OptionalArgument EventSubscriptionFilterNode }


{-| Type for the EventSubscriptionFilter input object.
-}
type EventSubscriptionFilter
    = EventSubscriptionFilter EventSubscriptionFilterRaw


{-| Encode a EventSubscriptionFilter into a value that can be used as an argument.
-}
encodeEventSubscriptionFilter : EventSubscriptionFilter -> Value
encodeEventSubscriptionFilter (EventSubscriptionFilter input) =
    Encode.maybeObject
        [ ( "and", (encodeEventSubscriptionFilter |> Encode.list) |> Encode.optional input.and ), ( "or", (encodeEventSubscriptionFilter |> Encode.list) |> Encode.optional input.or ), ( "mutation_in", (Encode.enum GraphCool.Enum.ModelMutationType_.toString |> Encode.list) |> Encode.optional input.mutation_in ), ( "updatedFields_contains", Encode.string |> Encode.optional input.updatedFields_contains ), ( "updatedFields_contains_every", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_every ), ( "updatedFields_contains_some", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_some ), ( "node", encodeEventSubscriptionFilterNode |> Encode.optional input.node ) ]


{-| Type alias for the `EventSubscriptionFilterNode` attributes. Note that this type
needs to use the `EventSubscriptionFilterNode` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias EventSubscriptionFilterNodeRaw =
    { createdAt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_not : OptionalArgument GraphCool.Scalar.DateTime, createdAt_in : OptionalArgument (List GraphCool.Scalar.DateTime), createdAt_not_in : OptionalArgument (List GraphCool.Scalar.DateTime), createdAt_lt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_lte : OptionalArgument GraphCool.Scalar.DateTime, createdAt_gt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_gte : OptionalArgument GraphCool.Scalar.DateTime, endsAt : OptionalArgument GraphCool.Scalar.DateTime, endsAt_not : OptionalArgument GraphCool.Scalar.DateTime, endsAt_in : OptionalArgument (List GraphCool.Scalar.DateTime), endsAt_not_in : OptionalArgument (List GraphCool.Scalar.DateTime), endsAt_lt : OptionalArgument GraphCool.Scalar.DateTime, endsAt_lte : OptionalArgument GraphCool.Scalar.DateTime, endsAt_gt : OptionalArgument GraphCool.Scalar.DateTime, endsAt_gte : OptionalArgument GraphCool.Scalar.DateTime, id : OptionalArgument GraphCool.Scalar.Id, id_not : OptionalArgument GraphCool.Scalar.Id, id_in : OptionalArgument (List GraphCool.Scalar.Id), id_not_in : OptionalArgument (List GraphCool.Scalar.Id), id_lt : OptionalArgument GraphCool.Scalar.Id, id_lte : OptionalArgument GraphCool.Scalar.Id, id_gt : OptionalArgument GraphCool.Scalar.Id, id_gte : OptionalArgument GraphCool.Scalar.Id, id_contains : OptionalArgument GraphCool.Scalar.Id, id_not_contains : OptionalArgument GraphCool.Scalar.Id, id_starts_with : OptionalArgument GraphCool.Scalar.Id, id_not_starts_with : OptionalArgument GraphCool.Scalar.Id, id_ends_with : OptionalArgument GraphCool.Scalar.Id, id_not_ends_with : OptionalArgument GraphCool.Scalar.Id, name : OptionalArgument String, name_not : OptionalArgument String, name_in : OptionalArgument (List String), name_not_in : OptionalArgument (List String), name_lt : OptionalArgument String, name_lte : OptionalArgument String, name_gt : OptionalArgument String, name_gte : OptionalArgument String, name_contains : OptionalArgument String, name_not_contains : OptionalArgument String, name_starts_with : OptionalArgument String, name_not_starts_with : OptionalArgument String, name_ends_with : OptionalArgument String, name_not_ends_with : OptionalArgument String, nameFull : OptionalArgument String, nameFull_not : OptionalArgument String, nameFull_in : OptionalArgument (List String), nameFull_not_in : OptionalArgument (List String), nameFull_lt : OptionalArgument String, nameFull_lte : OptionalArgument String, nameFull_gt : OptionalArgument String, nameFull_gte : OptionalArgument String, nameFull_contains : OptionalArgument String, nameFull_not_contains : OptionalArgument String, nameFull_starts_with : OptionalArgument String, nameFull_not_starts_with : OptionalArgument String, nameFull_ends_with : OptionalArgument String, nameFull_not_ends_with : OptionalArgument String, private : OptionalArgument Bool, private_not : OptionalArgument Bool, startsAt : OptionalArgument GraphCool.Scalar.DateTime, startsAt_not : OptionalArgument GraphCool.Scalar.DateTime, startsAt_in : OptionalArgument (List GraphCool.Scalar.DateTime), startsAt_not_in : OptionalArgument (List GraphCool.Scalar.DateTime), startsAt_lt : OptionalArgument GraphCool.Scalar.DateTime, startsAt_lte : OptionalArgument GraphCool.Scalar.DateTime, startsAt_gt : OptionalArgument GraphCool.Scalar.DateTime, startsAt_gte : OptionalArgument GraphCool.Scalar.DateTime, createdBy : OptionalArgument UserFilter, hosts_every : OptionalArgument HostFilter, hosts_some : OptionalArgument HostFilter, hosts_none : OptionalArgument HostFilter, pool : OptionalArgument PoolFilter, venues_every : OptionalArgument VenueFilter, venues_some : OptionalArgument VenueFilter, venues_none : OptionalArgument VenueFilter }


{-| Type for the EventSubscriptionFilterNode input object.
-}
type EventSubscriptionFilterNode
    = EventSubscriptionFilterNode EventSubscriptionFilterNodeRaw


{-| Encode a EventSubscriptionFilterNode into a value that can be used as an argument.
-}
encodeEventSubscriptionFilterNode : EventSubscriptionFilterNode -> Value
encodeEventSubscriptionFilterNode (EventSubscriptionFilterNode input) =
    Encode.maybeObject
        [ ( "createdAt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "endsAt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.endsAt ), ( "endsAt_not", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.endsAt_not ), ( "endsAt_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.endsAt_in ), ( "endsAt_not_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.endsAt_not_in ), ( "endsAt_lt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.endsAt_lt ), ( "endsAt_lte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.endsAt_lte ), ( "endsAt_gt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.endsAt_gt ), ( "endsAt_gte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.endsAt_gte ), ( "id", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "name", Encode.string |> Encode.optional input.name ), ( "name_not", Encode.string |> Encode.optional input.name_not ), ( "name_in", (Encode.string |> Encode.list) |> Encode.optional input.name_in ), ( "name_not_in", (Encode.string |> Encode.list) |> Encode.optional input.name_not_in ), ( "name_lt", Encode.string |> Encode.optional input.name_lt ), ( "name_lte", Encode.string |> Encode.optional input.name_lte ), ( "name_gt", Encode.string |> Encode.optional input.name_gt ), ( "name_gte", Encode.string |> Encode.optional input.name_gte ), ( "name_contains", Encode.string |> Encode.optional input.name_contains ), ( "name_not_contains", Encode.string |> Encode.optional input.name_not_contains ), ( "name_starts_with", Encode.string |> Encode.optional input.name_starts_with ), ( "name_not_starts_with", Encode.string |> Encode.optional input.name_not_starts_with ), ( "name_ends_with", Encode.string |> Encode.optional input.name_ends_with ), ( "name_not_ends_with", Encode.string |> Encode.optional input.name_not_ends_with ), ( "nameFull", Encode.string |> Encode.optional input.nameFull ), ( "nameFull_not", Encode.string |> Encode.optional input.nameFull_not ), ( "nameFull_in", (Encode.string |> Encode.list) |> Encode.optional input.nameFull_in ), ( "nameFull_not_in", (Encode.string |> Encode.list) |> Encode.optional input.nameFull_not_in ), ( "nameFull_lt", Encode.string |> Encode.optional input.nameFull_lt ), ( "nameFull_lte", Encode.string |> Encode.optional input.nameFull_lte ), ( "nameFull_gt", Encode.string |> Encode.optional input.nameFull_gt ), ( "nameFull_gte", Encode.string |> Encode.optional input.nameFull_gte ), ( "nameFull_contains", Encode.string |> Encode.optional input.nameFull_contains ), ( "nameFull_not_contains", Encode.string |> Encode.optional input.nameFull_not_contains ), ( "nameFull_starts_with", Encode.string |> Encode.optional input.nameFull_starts_with ), ( "nameFull_not_starts_with", Encode.string |> Encode.optional input.nameFull_not_starts_with ), ( "nameFull_ends_with", Encode.string |> Encode.optional input.nameFull_ends_with ), ( "nameFull_not_ends_with", Encode.string |> Encode.optional input.nameFull_not_ends_with ), ( "private", Encode.bool |> Encode.optional input.private ), ( "private_not", Encode.bool |> Encode.optional input.private_not ), ( "startsAt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.startsAt ), ( "startsAt_not", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.startsAt_not ), ( "startsAt_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.startsAt_in ), ( "startsAt_not_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.startsAt_not_in ), ( "startsAt_lt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.startsAt_lt ), ( "startsAt_lte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.startsAt_lte ), ( "startsAt_gt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.startsAt_gt ), ( "startsAt_gte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.startsAt_gte ), ( "createdBy", encodeUserFilter |> Encode.optional input.createdBy ), ( "hosts_every", encodeHostFilter |> Encode.optional input.hosts_every ), ( "hosts_some", encodeHostFilter |> Encode.optional input.hosts_some ), ( "hosts_none", encodeHostFilter |> Encode.optional input.hosts_none ), ( "pool", encodePoolFilter |> Encode.optional input.pool ), ( "venues_every", encodeVenueFilter |> Encode.optional input.venues_every ), ( "venues_some", encodeVenueFilter |> Encode.optional input.venues_some ), ( "venues_none", encodeVenueFilter |> Encode.optional input.venues_none ) ]


{-| Type alias for the `EventhostsHost` attributes. Note that this type
needs to use the `EventhostsHost` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias EventhostsHostRaw =
    { description : OptionalArgument String, name : String, nameFull : OptionalArgument String, eventsIds : OptionalArgument (List GraphCool.Scalar.Id), events : OptionalArgument (List HosteventsEvent), usersIds : OptionalArgument (List GraphCool.Scalar.Id), venuesIds : OptionalArgument (List GraphCool.Scalar.Id), venues : OptionalArgument (List HostvenuesVenue) }


{-| Type for the EventhostsHost input object.
-}
type EventhostsHost
    = EventhostsHost EventhostsHostRaw


{-| Encode a EventhostsHost into a value that can be used as an argument.
-}
encodeEventhostsHost : EventhostsHost -> Value
encodeEventhostsHost (EventhostsHost input) =
    Encode.maybeObject
        [ ( "description", Encode.string |> Encode.optional input.description ), ( "name", Encode.string input.name |> Just ), ( "nameFull", Encode.string |> Encode.optional input.nameFull ), ( "eventsIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.eventsIds ), ( "events", (encodeHosteventsEvent |> Encode.list) |> Encode.optional input.events ), ( "usersIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.usersIds ), ( "venuesIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.venuesIds ), ( "venues", (encodeHostvenuesVenue |> Encode.list) |> Encode.optional input.venues ) ]


{-| Type alias for the `EventpoolPool` attributes. Note that this type
needs to use the `EventpoolPool` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias EventpoolPoolRaw =
    { seatGeekId : OptionalArgument String, attendingIds : OptionalArgument (List GraphCool.Scalar.Id), chatsIds : OptionalArgument (List GraphCool.Scalar.Id), chats : OptionalArgument (List PoolchatsChat), likedIds : OptionalArgument (List GraphCool.Scalar.Id), viewedIds : OptionalArgument (List GraphCool.Scalar.Id) }


{-| Type for the EventpoolPool input object.
-}
type EventpoolPool
    = EventpoolPool EventpoolPoolRaw


{-| Encode a EventpoolPool into a value that can be used as an argument.
-}
encodeEventpoolPool : EventpoolPool -> Value
encodeEventpoolPool (EventpoolPool input) =
    Encode.maybeObject
        [ ( "seatGeekId", Encode.string |> Encode.optional input.seatGeekId ), ( "attendingIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.attendingIds ), ( "chatsIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.chatsIds ), ( "chats", (encodePoolchatsChat |> Encode.list) |> Encode.optional input.chats ), ( "likedIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.likedIds ), ( "viewedIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.viewedIds ) ]


{-| Type alias for the `EventvenuesVenue` attributes. Note that this type
needs to use the `EventvenuesVenue` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias EventvenuesVenueRaw =
    { description : OptionalArgument String, name : String, nameFull : String, locationId : OptionalArgument GraphCool.Scalar.Id, location : OptionalArgument VenuelocationLocation, eventsIds : OptionalArgument (List GraphCool.Scalar.Id), events : OptionalArgument (List VenueeventsEvent), hostsIds : OptionalArgument (List GraphCool.Scalar.Id), hosts : OptionalArgument (List VenuehostsHost) }


{-| Type for the EventvenuesVenue input object.
-}
type EventvenuesVenue
    = EventvenuesVenue EventvenuesVenueRaw


{-| Encode a EventvenuesVenue into a value that can be used as an argument.
-}
encodeEventvenuesVenue : EventvenuesVenue -> Value
encodeEventvenuesVenue (EventvenuesVenue input) =
    Encode.maybeObject
        [ ( "description", Encode.string |> Encode.optional input.description ), ( "name", Encode.string input.name |> Just ), ( "nameFull", Encode.string input.nameFull |> Just ), ( "locationId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.locationId ), ( "location", encodeVenuelocationLocation |> Encode.optional input.location ), ( "eventsIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.eventsIds ), ( "events", (encodeVenueeventsEvent |> Encode.list) |> Encode.optional input.events ), ( "hostsIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.hostsIds ), ( "hosts", (encodeVenuehostsHost |> Encode.list) |> Encode.optional input.hosts ) ]


{-| Type alias for the `FileFilter` attributes. Note that this type
needs to use the `FileFilter` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias FileFilterRaw =
    { and : OptionalArgument (List FileFilter), or : OptionalArgument (List FileFilter), contentType : OptionalArgument String, contentType_not : OptionalArgument String, contentType_in : OptionalArgument (List String), contentType_not_in : OptionalArgument (List String), contentType_lt : OptionalArgument String, contentType_lte : OptionalArgument String, contentType_gt : OptionalArgument String, contentType_gte : OptionalArgument String, contentType_contains : OptionalArgument String, contentType_not_contains : OptionalArgument String, contentType_starts_with : OptionalArgument String, contentType_not_starts_with : OptionalArgument String, contentType_ends_with : OptionalArgument String, contentType_not_ends_with : OptionalArgument String, createdAt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_not : OptionalArgument GraphCool.Scalar.DateTime, createdAt_in : OptionalArgument (List GraphCool.Scalar.DateTime), createdAt_not_in : OptionalArgument (List GraphCool.Scalar.DateTime), createdAt_lt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_lte : OptionalArgument GraphCool.Scalar.DateTime, createdAt_gt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_gte : OptionalArgument GraphCool.Scalar.DateTime, id : OptionalArgument GraphCool.Scalar.Id, id_not : OptionalArgument GraphCool.Scalar.Id, id_in : OptionalArgument (List GraphCool.Scalar.Id), id_not_in : OptionalArgument (List GraphCool.Scalar.Id), id_lt : OptionalArgument GraphCool.Scalar.Id, id_lte : OptionalArgument GraphCool.Scalar.Id, id_gt : OptionalArgument GraphCool.Scalar.Id, id_gte : OptionalArgument GraphCool.Scalar.Id, id_contains : OptionalArgument GraphCool.Scalar.Id, id_not_contains : OptionalArgument GraphCool.Scalar.Id, id_starts_with : OptionalArgument GraphCool.Scalar.Id, id_not_starts_with : OptionalArgument GraphCool.Scalar.Id, id_ends_with : OptionalArgument GraphCool.Scalar.Id, id_not_ends_with : OptionalArgument GraphCool.Scalar.Id, name : OptionalArgument String, name_not : OptionalArgument String, name_in : OptionalArgument (List String), name_not_in : OptionalArgument (List String), name_lt : OptionalArgument String, name_lte : OptionalArgument String, name_gt : OptionalArgument String, name_gte : OptionalArgument String, name_contains : OptionalArgument String, name_not_contains : OptionalArgument String, name_starts_with : OptionalArgument String, name_not_starts_with : OptionalArgument String, name_ends_with : OptionalArgument String, name_not_ends_with : OptionalArgument String, secret : OptionalArgument String, secret_not : OptionalArgument String, secret_in : OptionalArgument (List String), secret_not_in : OptionalArgument (List String), secret_lt : OptionalArgument String, secret_lte : OptionalArgument String, secret_gt : OptionalArgument String, secret_gte : OptionalArgument String, secret_contains : OptionalArgument String, secret_not_contains : OptionalArgument String, secret_starts_with : OptionalArgument String, secret_not_starts_with : OptionalArgument String, secret_ends_with : OptionalArgument String, secret_not_ends_with : OptionalArgument String, size : OptionalArgument Int, size_not : OptionalArgument Int, size_in : OptionalArgument (List Int), size_not_in : OptionalArgument (List Int), size_lt : OptionalArgument Int, size_lte : OptionalArgument Int, size_gt : OptionalArgument Int, size_gte : OptionalArgument Int, updatedAt : OptionalArgument GraphCool.Scalar.DateTime, updatedAt_not : OptionalArgument GraphCool.Scalar.DateTime, updatedAt_in : OptionalArgument (List GraphCool.Scalar.DateTime), updatedAt_not_in : OptionalArgument (List GraphCool.Scalar.DateTime), updatedAt_lt : OptionalArgument GraphCool.Scalar.DateTime, updatedAt_lte : OptionalArgument GraphCool.Scalar.DateTime, updatedAt_gt : OptionalArgument GraphCool.Scalar.DateTime, updatedAt_gte : OptionalArgument GraphCool.Scalar.DateTime, url : OptionalArgument String, url_not : OptionalArgument String, url_in : OptionalArgument (List String), url_not_in : OptionalArgument (List String), url_lt : OptionalArgument String, url_lte : OptionalArgument String, url_gt : OptionalArgument String, url_gte : OptionalArgument String, url_contains : OptionalArgument String, url_not_contains : OptionalArgument String, url_starts_with : OptionalArgument String, url_not_starts_with : OptionalArgument String, url_ends_with : OptionalArgument String, url_not_ends_with : OptionalArgument String }


{-| Type for the FileFilter input object.
-}
type FileFilter
    = FileFilter FileFilterRaw


{-| Encode a FileFilter into a value that can be used as an argument.
-}
encodeFileFilter : FileFilter -> Value
encodeFileFilter (FileFilter input) =
    Encode.maybeObject
        [ ( "and", (encodeFileFilter |> Encode.list) |> Encode.optional input.and ), ( "or", (encodeFileFilter |> Encode.list) |> Encode.optional input.or ), ( "contentType", Encode.string |> Encode.optional input.contentType ), ( "contentType_not", Encode.string |> Encode.optional input.contentType_not ), ( "contentType_in", (Encode.string |> Encode.list) |> Encode.optional input.contentType_in ), ( "contentType_not_in", (Encode.string |> Encode.list) |> Encode.optional input.contentType_not_in ), ( "contentType_lt", Encode.string |> Encode.optional input.contentType_lt ), ( "contentType_lte", Encode.string |> Encode.optional input.contentType_lte ), ( "contentType_gt", Encode.string |> Encode.optional input.contentType_gt ), ( "contentType_gte", Encode.string |> Encode.optional input.contentType_gte ), ( "contentType_contains", Encode.string |> Encode.optional input.contentType_contains ), ( "contentType_not_contains", Encode.string |> Encode.optional input.contentType_not_contains ), ( "contentType_starts_with", Encode.string |> Encode.optional input.contentType_starts_with ), ( "contentType_not_starts_with", Encode.string |> Encode.optional input.contentType_not_starts_with ), ( "contentType_ends_with", Encode.string |> Encode.optional input.contentType_ends_with ), ( "contentType_not_ends_with", Encode.string |> Encode.optional input.contentType_not_ends_with ), ( "createdAt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "id", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "name", Encode.string |> Encode.optional input.name ), ( "name_not", Encode.string |> Encode.optional input.name_not ), ( "name_in", (Encode.string |> Encode.list) |> Encode.optional input.name_in ), ( "name_not_in", (Encode.string |> Encode.list) |> Encode.optional input.name_not_in ), ( "name_lt", Encode.string |> Encode.optional input.name_lt ), ( "name_lte", Encode.string |> Encode.optional input.name_lte ), ( "name_gt", Encode.string |> Encode.optional input.name_gt ), ( "name_gte", Encode.string |> Encode.optional input.name_gte ), ( "name_contains", Encode.string |> Encode.optional input.name_contains ), ( "name_not_contains", Encode.string |> Encode.optional input.name_not_contains ), ( "name_starts_with", Encode.string |> Encode.optional input.name_starts_with ), ( "name_not_starts_with", Encode.string |> Encode.optional input.name_not_starts_with ), ( "name_ends_with", Encode.string |> Encode.optional input.name_ends_with ), ( "name_not_ends_with", Encode.string |> Encode.optional input.name_not_ends_with ), ( "secret", Encode.string |> Encode.optional input.secret ), ( "secret_not", Encode.string |> Encode.optional input.secret_not ), ( "secret_in", (Encode.string |> Encode.list) |> Encode.optional input.secret_in ), ( "secret_not_in", (Encode.string |> Encode.list) |> Encode.optional input.secret_not_in ), ( "secret_lt", Encode.string |> Encode.optional input.secret_lt ), ( "secret_lte", Encode.string |> Encode.optional input.secret_lte ), ( "secret_gt", Encode.string |> Encode.optional input.secret_gt ), ( "secret_gte", Encode.string |> Encode.optional input.secret_gte ), ( "secret_contains", Encode.string |> Encode.optional input.secret_contains ), ( "secret_not_contains", Encode.string |> Encode.optional input.secret_not_contains ), ( "secret_starts_with", Encode.string |> Encode.optional input.secret_starts_with ), ( "secret_not_starts_with", Encode.string |> Encode.optional input.secret_not_starts_with ), ( "secret_ends_with", Encode.string |> Encode.optional input.secret_ends_with ), ( "secret_not_ends_with", Encode.string |> Encode.optional input.secret_not_ends_with ), ( "size", Encode.int |> Encode.optional input.size ), ( "size_not", Encode.int |> Encode.optional input.size_not ), ( "size_in", (Encode.int |> Encode.list) |> Encode.optional input.size_in ), ( "size_not_in", (Encode.int |> Encode.list) |> Encode.optional input.size_not_in ), ( "size_lt", Encode.int |> Encode.optional input.size_lt ), ( "size_lte", Encode.int |> Encode.optional input.size_lte ), ( "size_gt", Encode.int |> Encode.optional input.size_gt ), ( "size_gte", Encode.int |> Encode.optional input.size_gte ), ( "updatedAt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt ), ( "updatedAt_not", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_not ), ( "updatedAt_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_in ), ( "updatedAt_not_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_not_in ), ( "updatedAt_lt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lt ), ( "updatedAt_lte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lte ), ( "updatedAt_gt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gt ), ( "updatedAt_gte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gte ), ( "url", Encode.string |> Encode.optional input.url ), ( "url_not", Encode.string |> Encode.optional input.url_not ), ( "url_in", (Encode.string |> Encode.list) |> Encode.optional input.url_in ), ( "url_not_in", (Encode.string |> Encode.list) |> Encode.optional input.url_not_in ), ( "url_lt", Encode.string |> Encode.optional input.url_lt ), ( "url_lte", Encode.string |> Encode.optional input.url_lte ), ( "url_gt", Encode.string |> Encode.optional input.url_gt ), ( "url_gte", Encode.string |> Encode.optional input.url_gte ), ( "url_contains", Encode.string |> Encode.optional input.url_contains ), ( "url_not_contains", Encode.string |> Encode.optional input.url_not_contains ), ( "url_starts_with", Encode.string |> Encode.optional input.url_starts_with ), ( "url_not_starts_with", Encode.string |> Encode.optional input.url_not_starts_with ), ( "url_ends_with", Encode.string |> Encode.optional input.url_ends_with ), ( "url_not_ends_with", Encode.string |> Encode.optional input.url_not_ends_with ) ]


{-| Type alias for the `FileSubscriptionFilter` attributes. Note that this type
needs to use the `FileSubscriptionFilter` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias FileSubscriptionFilterRaw =
    { and : OptionalArgument (List FileSubscriptionFilter), or : OptionalArgument (List FileSubscriptionFilter), mutation_in : OptionalArgument (List GraphCool.Enum.ModelMutationType_.ModelMutationType_), updatedFields_contains : OptionalArgument String, updatedFields_contains_every : OptionalArgument (List String), updatedFields_contains_some : OptionalArgument (List String), node : OptionalArgument FileSubscriptionFilterNode }


{-| Type for the FileSubscriptionFilter input object.
-}
type FileSubscriptionFilter
    = FileSubscriptionFilter FileSubscriptionFilterRaw


{-| Encode a FileSubscriptionFilter into a value that can be used as an argument.
-}
encodeFileSubscriptionFilter : FileSubscriptionFilter -> Value
encodeFileSubscriptionFilter (FileSubscriptionFilter input) =
    Encode.maybeObject
        [ ( "and", (encodeFileSubscriptionFilter |> Encode.list) |> Encode.optional input.and ), ( "or", (encodeFileSubscriptionFilter |> Encode.list) |> Encode.optional input.or ), ( "mutation_in", (Encode.enum GraphCool.Enum.ModelMutationType_.toString |> Encode.list) |> Encode.optional input.mutation_in ), ( "updatedFields_contains", Encode.string |> Encode.optional input.updatedFields_contains ), ( "updatedFields_contains_every", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_every ), ( "updatedFields_contains_some", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_some ), ( "node", encodeFileSubscriptionFilterNode |> Encode.optional input.node ) ]


{-| Type for the FileSubscriptionFilterNode input object.
-}
type alias FileSubscriptionFilterNode =
    { contentType : OptionalArgument String, contentType_not : OptionalArgument String, contentType_in : OptionalArgument (List String), contentType_not_in : OptionalArgument (List String), contentType_lt : OptionalArgument String, contentType_lte : OptionalArgument String, contentType_gt : OptionalArgument String, contentType_gte : OptionalArgument String, contentType_contains : OptionalArgument String, contentType_not_contains : OptionalArgument String, contentType_starts_with : OptionalArgument String, contentType_not_starts_with : OptionalArgument String, contentType_ends_with : OptionalArgument String, contentType_not_ends_with : OptionalArgument String, createdAt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_not : OptionalArgument GraphCool.Scalar.DateTime, createdAt_in : OptionalArgument (List GraphCool.Scalar.DateTime), createdAt_not_in : OptionalArgument (List GraphCool.Scalar.DateTime), createdAt_lt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_lte : OptionalArgument GraphCool.Scalar.DateTime, createdAt_gt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_gte : OptionalArgument GraphCool.Scalar.DateTime, id : OptionalArgument GraphCool.Scalar.Id, id_not : OptionalArgument GraphCool.Scalar.Id, id_in : OptionalArgument (List GraphCool.Scalar.Id), id_not_in : OptionalArgument (List GraphCool.Scalar.Id), id_lt : OptionalArgument GraphCool.Scalar.Id, id_lte : OptionalArgument GraphCool.Scalar.Id, id_gt : OptionalArgument GraphCool.Scalar.Id, id_gte : OptionalArgument GraphCool.Scalar.Id, id_contains : OptionalArgument GraphCool.Scalar.Id, id_not_contains : OptionalArgument GraphCool.Scalar.Id, id_starts_with : OptionalArgument GraphCool.Scalar.Id, id_not_starts_with : OptionalArgument GraphCool.Scalar.Id, id_ends_with : OptionalArgument GraphCool.Scalar.Id, id_not_ends_with : OptionalArgument GraphCool.Scalar.Id, name : OptionalArgument String, name_not : OptionalArgument String, name_in : OptionalArgument (List String), name_not_in : OptionalArgument (List String), name_lt : OptionalArgument String, name_lte : OptionalArgument String, name_gt : OptionalArgument String, name_gte : OptionalArgument String, name_contains : OptionalArgument String, name_not_contains : OptionalArgument String, name_starts_with : OptionalArgument String, name_not_starts_with : OptionalArgument String, name_ends_with : OptionalArgument String, name_not_ends_with : OptionalArgument String, secret : OptionalArgument String, secret_not : OptionalArgument String, secret_in : OptionalArgument (List String), secret_not_in : OptionalArgument (List String), secret_lt : OptionalArgument String, secret_lte : OptionalArgument String, secret_gt : OptionalArgument String, secret_gte : OptionalArgument String, secret_contains : OptionalArgument String, secret_not_contains : OptionalArgument String, secret_starts_with : OptionalArgument String, secret_not_starts_with : OptionalArgument String, secret_ends_with : OptionalArgument String, secret_not_ends_with : OptionalArgument String, size : OptionalArgument Int, size_not : OptionalArgument Int, size_in : OptionalArgument (List Int), size_not_in : OptionalArgument (List Int), size_lt : OptionalArgument Int, size_lte : OptionalArgument Int, size_gt : OptionalArgument Int, size_gte : OptionalArgument Int, updatedAt : OptionalArgument GraphCool.Scalar.DateTime, updatedAt_not : OptionalArgument GraphCool.Scalar.DateTime, updatedAt_in : OptionalArgument (List GraphCool.Scalar.DateTime), updatedAt_not_in : OptionalArgument (List GraphCool.Scalar.DateTime), updatedAt_lt : OptionalArgument GraphCool.Scalar.DateTime, updatedAt_lte : OptionalArgument GraphCool.Scalar.DateTime, updatedAt_gt : OptionalArgument GraphCool.Scalar.DateTime, updatedAt_gte : OptionalArgument GraphCool.Scalar.DateTime, url : OptionalArgument String, url_not : OptionalArgument String, url_in : OptionalArgument (List String), url_not_in : OptionalArgument (List String), url_lt : OptionalArgument String, url_lte : OptionalArgument String, url_gt : OptionalArgument String, url_gte : OptionalArgument String, url_contains : OptionalArgument String, url_not_contains : OptionalArgument String, url_starts_with : OptionalArgument String, url_not_starts_with : OptionalArgument String, url_ends_with : OptionalArgument String, url_not_ends_with : OptionalArgument String }


{-| Encode a FileSubscriptionFilterNode into a value that can be used as an argument.
-}
encodeFileSubscriptionFilterNode : FileSubscriptionFilterNode -> Value
encodeFileSubscriptionFilterNode input =
    Encode.maybeObject
        [ ( "contentType", Encode.string |> Encode.optional input.contentType ), ( "contentType_not", Encode.string |> Encode.optional input.contentType_not ), ( "contentType_in", (Encode.string |> Encode.list) |> Encode.optional input.contentType_in ), ( "contentType_not_in", (Encode.string |> Encode.list) |> Encode.optional input.contentType_not_in ), ( "contentType_lt", Encode.string |> Encode.optional input.contentType_lt ), ( "contentType_lte", Encode.string |> Encode.optional input.contentType_lte ), ( "contentType_gt", Encode.string |> Encode.optional input.contentType_gt ), ( "contentType_gte", Encode.string |> Encode.optional input.contentType_gte ), ( "contentType_contains", Encode.string |> Encode.optional input.contentType_contains ), ( "contentType_not_contains", Encode.string |> Encode.optional input.contentType_not_contains ), ( "contentType_starts_with", Encode.string |> Encode.optional input.contentType_starts_with ), ( "contentType_not_starts_with", Encode.string |> Encode.optional input.contentType_not_starts_with ), ( "contentType_ends_with", Encode.string |> Encode.optional input.contentType_ends_with ), ( "contentType_not_ends_with", Encode.string |> Encode.optional input.contentType_not_ends_with ), ( "createdAt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "id", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "name", Encode.string |> Encode.optional input.name ), ( "name_not", Encode.string |> Encode.optional input.name_not ), ( "name_in", (Encode.string |> Encode.list) |> Encode.optional input.name_in ), ( "name_not_in", (Encode.string |> Encode.list) |> Encode.optional input.name_not_in ), ( "name_lt", Encode.string |> Encode.optional input.name_lt ), ( "name_lte", Encode.string |> Encode.optional input.name_lte ), ( "name_gt", Encode.string |> Encode.optional input.name_gt ), ( "name_gte", Encode.string |> Encode.optional input.name_gte ), ( "name_contains", Encode.string |> Encode.optional input.name_contains ), ( "name_not_contains", Encode.string |> Encode.optional input.name_not_contains ), ( "name_starts_with", Encode.string |> Encode.optional input.name_starts_with ), ( "name_not_starts_with", Encode.string |> Encode.optional input.name_not_starts_with ), ( "name_ends_with", Encode.string |> Encode.optional input.name_ends_with ), ( "name_not_ends_with", Encode.string |> Encode.optional input.name_not_ends_with ), ( "secret", Encode.string |> Encode.optional input.secret ), ( "secret_not", Encode.string |> Encode.optional input.secret_not ), ( "secret_in", (Encode.string |> Encode.list) |> Encode.optional input.secret_in ), ( "secret_not_in", (Encode.string |> Encode.list) |> Encode.optional input.secret_not_in ), ( "secret_lt", Encode.string |> Encode.optional input.secret_lt ), ( "secret_lte", Encode.string |> Encode.optional input.secret_lte ), ( "secret_gt", Encode.string |> Encode.optional input.secret_gt ), ( "secret_gte", Encode.string |> Encode.optional input.secret_gte ), ( "secret_contains", Encode.string |> Encode.optional input.secret_contains ), ( "secret_not_contains", Encode.string |> Encode.optional input.secret_not_contains ), ( "secret_starts_with", Encode.string |> Encode.optional input.secret_starts_with ), ( "secret_not_starts_with", Encode.string |> Encode.optional input.secret_not_starts_with ), ( "secret_ends_with", Encode.string |> Encode.optional input.secret_ends_with ), ( "secret_not_ends_with", Encode.string |> Encode.optional input.secret_not_ends_with ), ( "size", Encode.int |> Encode.optional input.size ), ( "size_not", Encode.int |> Encode.optional input.size_not ), ( "size_in", (Encode.int |> Encode.list) |> Encode.optional input.size_in ), ( "size_not_in", (Encode.int |> Encode.list) |> Encode.optional input.size_not_in ), ( "size_lt", Encode.int |> Encode.optional input.size_lt ), ( "size_lte", Encode.int |> Encode.optional input.size_lte ), ( "size_gt", Encode.int |> Encode.optional input.size_gt ), ( "size_gte", Encode.int |> Encode.optional input.size_gte ), ( "updatedAt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt ), ( "updatedAt_not", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_not ), ( "updatedAt_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_in ), ( "updatedAt_not_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_not_in ), ( "updatedAt_lt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lt ), ( "updatedAt_lte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lte ), ( "updatedAt_gt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gt ), ( "updatedAt_gte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gte ), ( "url", Encode.string |> Encode.optional input.url ), ( "url_not", Encode.string |> Encode.optional input.url_not ), ( "url_in", (Encode.string |> Encode.list) |> Encode.optional input.url_in ), ( "url_not_in", (Encode.string |> Encode.list) |> Encode.optional input.url_not_in ), ( "url_lt", Encode.string |> Encode.optional input.url_lt ), ( "url_lte", Encode.string |> Encode.optional input.url_lte ), ( "url_gt", Encode.string |> Encode.optional input.url_gt ), ( "url_gte", Encode.string |> Encode.optional input.url_gte ), ( "url_contains", Encode.string |> Encode.optional input.url_contains ), ( "url_not_contains", Encode.string |> Encode.optional input.url_not_contains ), ( "url_starts_with", Encode.string |> Encode.optional input.url_starts_with ), ( "url_not_starts_with", Encode.string |> Encode.optional input.url_not_starts_with ), ( "url_ends_with", Encode.string |> Encode.optional input.url_ends_with ), ( "url_not_ends_with", Encode.string |> Encode.optional input.url_not_ends_with ) ]


{-| Type alias for the `HostFilter` attributes. Note that this type
needs to use the `HostFilter` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias HostFilterRaw =
    { and : OptionalArgument (List HostFilter), or : OptionalArgument (List HostFilter), createdAt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_not : OptionalArgument GraphCool.Scalar.DateTime, createdAt_in : OptionalArgument (List GraphCool.Scalar.DateTime), createdAt_not_in : OptionalArgument (List GraphCool.Scalar.DateTime), createdAt_lt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_lte : OptionalArgument GraphCool.Scalar.DateTime, createdAt_gt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_gte : OptionalArgument GraphCool.Scalar.DateTime, description : OptionalArgument String, description_not : OptionalArgument String, description_in : OptionalArgument (List String), description_not_in : OptionalArgument (List String), description_lt : OptionalArgument String, description_lte : OptionalArgument String, description_gt : OptionalArgument String, description_gte : OptionalArgument String, description_contains : OptionalArgument String, description_not_contains : OptionalArgument String, description_starts_with : OptionalArgument String, description_not_starts_with : OptionalArgument String, description_ends_with : OptionalArgument String, description_not_ends_with : OptionalArgument String, id : OptionalArgument GraphCool.Scalar.Id, id_not : OptionalArgument GraphCool.Scalar.Id, id_in : OptionalArgument (List GraphCool.Scalar.Id), id_not_in : OptionalArgument (List GraphCool.Scalar.Id), id_lt : OptionalArgument GraphCool.Scalar.Id, id_lte : OptionalArgument GraphCool.Scalar.Id, id_gt : OptionalArgument GraphCool.Scalar.Id, id_gte : OptionalArgument GraphCool.Scalar.Id, id_contains : OptionalArgument GraphCool.Scalar.Id, id_not_contains : OptionalArgument GraphCool.Scalar.Id, id_starts_with : OptionalArgument GraphCool.Scalar.Id, id_not_starts_with : OptionalArgument GraphCool.Scalar.Id, id_ends_with : OptionalArgument GraphCool.Scalar.Id, id_not_ends_with : OptionalArgument GraphCool.Scalar.Id, name : OptionalArgument String, name_not : OptionalArgument String, name_in : OptionalArgument (List String), name_not_in : OptionalArgument (List String), name_lt : OptionalArgument String, name_lte : OptionalArgument String, name_gt : OptionalArgument String, name_gte : OptionalArgument String, name_contains : OptionalArgument String, name_not_contains : OptionalArgument String, name_starts_with : OptionalArgument String, name_not_starts_with : OptionalArgument String, name_ends_with : OptionalArgument String, name_not_ends_with : OptionalArgument String, nameFull : OptionalArgument String, nameFull_not : OptionalArgument String, nameFull_in : OptionalArgument (List String), nameFull_not_in : OptionalArgument (List String), nameFull_lt : OptionalArgument String, nameFull_lte : OptionalArgument String, nameFull_gt : OptionalArgument String, nameFull_gte : OptionalArgument String, nameFull_contains : OptionalArgument String, nameFull_not_contains : OptionalArgument String, nameFull_starts_with : OptionalArgument String, nameFull_not_starts_with : OptionalArgument String, nameFull_ends_with : OptionalArgument String, nameFull_not_ends_with : OptionalArgument String, events_every : OptionalArgument EventFilter, events_some : OptionalArgument EventFilter, events_none : OptionalArgument EventFilter, users_every : OptionalArgument UserFilter, users_some : OptionalArgument UserFilter, users_none : OptionalArgument UserFilter, venues_every : OptionalArgument VenueFilter, venues_some : OptionalArgument VenueFilter, venues_none : OptionalArgument VenueFilter }


{-| Type for the HostFilter input object.
-}
type HostFilter
    = HostFilter HostFilterRaw


{-| Encode a HostFilter into a value that can be used as an argument.
-}
encodeHostFilter : HostFilter -> Value
encodeHostFilter (HostFilter input) =
    Encode.maybeObject
        [ ( "and", (encodeHostFilter |> Encode.list) |> Encode.optional input.and ), ( "or", (encodeHostFilter |> Encode.list) |> Encode.optional input.or ), ( "createdAt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "description", Encode.string |> Encode.optional input.description ), ( "description_not", Encode.string |> Encode.optional input.description_not ), ( "description_in", (Encode.string |> Encode.list) |> Encode.optional input.description_in ), ( "description_not_in", (Encode.string |> Encode.list) |> Encode.optional input.description_not_in ), ( "description_lt", Encode.string |> Encode.optional input.description_lt ), ( "description_lte", Encode.string |> Encode.optional input.description_lte ), ( "description_gt", Encode.string |> Encode.optional input.description_gt ), ( "description_gte", Encode.string |> Encode.optional input.description_gte ), ( "description_contains", Encode.string |> Encode.optional input.description_contains ), ( "description_not_contains", Encode.string |> Encode.optional input.description_not_contains ), ( "description_starts_with", Encode.string |> Encode.optional input.description_starts_with ), ( "description_not_starts_with", Encode.string |> Encode.optional input.description_not_starts_with ), ( "description_ends_with", Encode.string |> Encode.optional input.description_ends_with ), ( "description_not_ends_with", Encode.string |> Encode.optional input.description_not_ends_with ), ( "id", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "name", Encode.string |> Encode.optional input.name ), ( "name_not", Encode.string |> Encode.optional input.name_not ), ( "name_in", (Encode.string |> Encode.list) |> Encode.optional input.name_in ), ( "name_not_in", (Encode.string |> Encode.list) |> Encode.optional input.name_not_in ), ( "name_lt", Encode.string |> Encode.optional input.name_lt ), ( "name_lte", Encode.string |> Encode.optional input.name_lte ), ( "name_gt", Encode.string |> Encode.optional input.name_gt ), ( "name_gte", Encode.string |> Encode.optional input.name_gte ), ( "name_contains", Encode.string |> Encode.optional input.name_contains ), ( "name_not_contains", Encode.string |> Encode.optional input.name_not_contains ), ( "name_starts_with", Encode.string |> Encode.optional input.name_starts_with ), ( "name_not_starts_with", Encode.string |> Encode.optional input.name_not_starts_with ), ( "name_ends_with", Encode.string |> Encode.optional input.name_ends_with ), ( "name_not_ends_with", Encode.string |> Encode.optional input.name_not_ends_with ), ( "nameFull", Encode.string |> Encode.optional input.nameFull ), ( "nameFull_not", Encode.string |> Encode.optional input.nameFull_not ), ( "nameFull_in", (Encode.string |> Encode.list) |> Encode.optional input.nameFull_in ), ( "nameFull_not_in", (Encode.string |> Encode.list) |> Encode.optional input.nameFull_not_in ), ( "nameFull_lt", Encode.string |> Encode.optional input.nameFull_lt ), ( "nameFull_lte", Encode.string |> Encode.optional input.nameFull_lte ), ( "nameFull_gt", Encode.string |> Encode.optional input.nameFull_gt ), ( "nameFull_gte", Encode.string |> Encode.optional input.nameFull_gte ), ( "nameFull_contains", Encode.string |> Encode.optional input.nameFull_contains ), ( "nameFull_not_contains", Encode.string |> Encode.optional input.nameFull_not_contains ), ( "nameFull_starts_with", Encode.string |> Encode.optional input.nameFull_starts_with ), ( "nameFull_not_starts_with", Encode.string |> Encode.optional input.nameFull_not_starts_with ), ( "nameFull_ends_with", Encode.string |> Encode.optional input.nameFull_ends_with ), ( "nameFull_not_ends_with", Encode.string |> Encode.optional input.nameFull_not_ends_with ), ( "events_every", encodeEventFilter |> Encode.optional input.events_every ), ( "events_some", encodeEventFilter |> Encode.optional input.events_some ), ( "events_none", encodeEventFilter |> Encode.optional input.events_none ), ( "users_every", encodeUserFilter |> Encode.optional input.users_every ), ( "users_some", encodeUserFilter |> Encode.optional input.users_some ), ( "users_none", encodeUserFilter |> Encode.optional input.users_none ), ( "venues_every", encodeVenueFilter |> Encode.optional input.venues_every ), ( "venues_some", encodeVenueFilter |> Encode.optional input.venues_some ), ( "venues_none", encodeVenueFilter |> Encode.optional input.venues_none ) ]


{-| Type alias for the `HostSubscriptionFilter` attributes. Note that this type
needs to use the `HostSubscriptionFilter` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias HostSubscriptionFilterRaw =
    { and : OptionalArgument (List HostSubscriptionFilter), or : OptionalArgument (List HostSubscriptionFilter), mutation_in : OptionalArgument (List GraphCool.Enum.ModelMutationType_.ModelMutationType_), updatedFields_contains : OptionalArgument String, updatedFields_contains_every : OptionalArgument (List String), updatedFields_contains_some : OptionalArgument (List String), node : OptionalArgument HostSubscriptionFilterNode }


{-| Type for the HostSubscriptionFilter input object.
-}
type HostSubscriptionFilter
    = HostSubscriptionFilter HostSubscriptionFilterRaw


{-| Encode a HostSubscriptionFilter into a value that can be used as an argument.
-}
encodeHostSubscriptionFilter : HostSubscriptionFilter -> Value
encodeHostSubscriptionFilter (HostSubscriptionFilter input) =
    Encode.maybeObject
        [ ( "and", (encodeHostSubscriptionFilter |> Encode.list) |> Encode.optional input.and ), ( "or", (encodeHostSubscriptionFilter |> Encode.list) |> Encode.optional input.or ), ( "mutation_in", (Encode.enum GraphCool.Enum.ModelMutationType_.toString |> Encode.list) |> Encode.optional input.mutation_in ), ( "updatedFields_contains", Encode.string |> Encode.optional input.updatedFields_contains ), ( "updatedFields_contains_every", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_every ), ( "updatedFields_contains_some", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_some ), ( "node", encodeHostSubscriptionFilterNode |> Encode.optional input.node ) ]


{-| Type alias for the `HostSubscriptionFilterNode` attributes. Note that this type
needs to use the `HostSubscriptionFilterNode` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias HostSubscriptionFilterNodeRaw =
    { createdAt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_not : OptionalArgument GraphCool.Scalar.DateTime, createdAt_in : OptionalArgument (List GraphCool.Scalar.DateTime), createdAt_not_in : OptionalArgument (List GraphCool.Scalar.DateTime), createdAt_lt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_lte : OptionalArgument GraphCool.Scalar.DateTime, createdAt_gt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_gte : OptionalArgument GraphCool.Scalar.DateTime, description : OptionalArgument String, description_not : OptionalArgument String, description_in : OptionalArgument (List String), description_not_in : OptionalArgument (List String), description_lt : OptionalArgument String, description_lte : OptionalArgument String, description_gt : OptionalArgument String, description_gte : OptionalArgument String, description_contains : OptionalArgument String, description_not_contains : OptionalArgument String, description_starts_with : OptionalArgument String, description_not_starts_with : OptionalArgument String, description_ends_with : OptionalArgument String, description_not_ends_with : OptionalArgument String, id : OptionalArgument GraphCool.Scalar.Id, id_not : OptionalArgument GraphCool.Scalar.Id, id_in : OptionalArgument (List GraphCool.Scalar.Id), id_not_in : OptionalArgument (List GraphCool.Scalar.Id), id_lt : OptionalArgument GraphCool.Scalar.Id, id_lte : OptionalArgument GraphCool.Scalar.Id, id_gt : OptionalArgument GraphCool.Scalar.Id, id_gte : OptionalArgument GraphCool.Scalar.Id, id_contains : OptionalArgument GraphCool.Scalar.Id, id_not_contains : OptionalArgument GraphCool.Scalar.Id, id_starts_with : OptionalArgument GraphCool.Scalar.Id, id_not_starts_with : OptionalArgument GraphCool.Scalar.Id, id_ends_with : OptionalArgument GraphCool.Scalar.Id, id_not_ends_with : OptionalArgument GraphCool.Scalar.Id, name : OptionalArgument String, name_not : OptionalArgument String, name_in : OptionalArgument (List String), name_not_in : OptionalArgument (List String), name_lt : OptionalArgument String, name_lte : OptionalArgument String, name_gt : OptionalArgument String, name_gte : OptionalArgument String, name_contains : OptionalArgument String, name_not_contains : OptionalArgument String, name_starts_with : OptionalArgument String, name_not_starts_with : OptionalArgument String, name_ends_with : OptionalArgument String, name_not_ends_with : OptionalArgument String, nameFull : OptionalArgument String, nameFull_not : OptionalArgument String, nameFull_in : OptionalArgument (List String), nameFull_not_in : OptionalArgument (List String), nameFull_lt : OptionalArgument String, nameFull_lte : OptionalArgument String, nameFull_gt : OptionalArgument String, nameFull_gte : OptionalArgument String, nameFull_contains : OptionalArgument String, nameFull_not_contains : OptionalArgument String, nameFull_starts_with : OptionalArgument String, nameFull_not_starts_with : OptionalArgument String, nameFull_ends_with : OptionalArgument String, nameFull_not_ends_with : OptionalArgument String, events_every : OptionalArgument EventFilter, events_some : OptionalArgument EventFilter, events_none : OptionalArgument EventFilter, users_every : OptionalArgument UserFilter, users_some : OptionalArgument UserFilter, users_none : OptionalArgument UserFilter, venues_every : OptionalArgument VenueFilter, venues_some : OptionalArgument VenueFilter, venues_none : OptionalArgument VenueFilter }


{-| Type for the HostSubscriptionFilterNode input object.
-}
type HostSubscriptionFilterNode
    = HostSubscriptionFilterNode HostSubscriptionFilterNodeRaw


{-| Encode a HostSubscriptionFilterNode into a value that can be used as an argument.
-}
encodeHostSubscriptionFilterNode : HostSubscriptionFilterNode -> Value
encodeHostSubscriptionFilterNode (HostSubscriptionFilterNode input) =
    Encode.maybeObject
        [ ( "createdAt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "description", Encode.string |> Encode.optional input.description ), ( "description_not", Encode.string |> Encode.optional input.description_not ), ( "description_in", (Encode.string |> Encode.list) |> Encode.optional input.description_in ), ( "description_not_in", (Encode.string |> Encode.list) |> Encode.optional input.description_not_in ), ( "description_lt", Encode.string |> Encode.optional input.description_lt ), ( "description_lte", Encode.string |> Encode.optional input.description_lte ), ( "description_gt", Encode.string |> Encode.optional input.description_gt ), ( "description_gte", Encode.string |> Encode.optional input.description_gte ), ( "description_contains", Encode.string |> Encode.optional input.description_contains ), ( "description_not_contains", Encode.string |> Encode.optional input.description_not_contains ), ( "description_starts_with", Encode.string |> Encode.optional input.description_starts_with ), ( "description_not_starts_with", Encode.string |> Encode.optional input.description_not_starts_with ), ( "description_ends_with", Encode.string |> Encode.optional input.description_ends_with ), ( "description_not_ends_with", Encode.string |> Encode.optional input.description_not_ends_with ), ( "id", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "name", Encode.string |> Encode.optional input.name ), ( "name_not", Encode.string |> Encode.optional input.name_not ), ( "name_in", (Encode.string |> Encode.list) |> Encode.optional input.name_in ), ( "name_not_in", (Encode.string |> Encode.list) |> Encode.optional input.name_not_in ), ( "name_lt", Encode.string |> Encode.optional input.name_lt ), ( "name_lte", Encode.string |> Encode.optional input.name_lte ), ( "name_gt", Encode.string |> Encode.optional input.name_gt ), ( "name_gte", Encode.string |> Encode.optional input.name_gte ), ( "name_contains", Encode.string |> Encode.optional input.name_contains ), ( "name_not_contains", Encode.string |> Encode.optional input.name_not_contains ), ( "name_starts_with", Encode.string |> Encode.optional input.name_starts_with ), ( "name_not_starts_with", Encode.string |> Encode.optional input.name_not_starts_with ), ( "name_ends_with", Encode.string |> Encode.optional input.name_ends_with ), ( "name_not_ends_with", Encode.string |> Encode.optional input.name_not_ends_with ), ( "nameFull", Encode.string |> Encode.optional input.nameFull ), ( "nameFull_not", Encode.string |> Encode.optional input.nameFull_not ), ( "nameFull_in", (Encode.string |> Encode.list) |> Encode.optional input.nameFull_in ), ( "nameFull_not_in", (Encode.string |> Encode.list) |> Encode.optional input.nameFull_not_in ), ( "nameFull_lt", Encode.string |> Encode.optional input.nameFull_lt ), ( "nameFull_lte", Encode.string |> Encode.optional input.nameFull_lte ), ( "nameFull_gt", Encode.string |> Encode.optional input.nameFull_gt ), ( "nameFull_gte", Encode.string |> Encode.optional input.nameFull_gte ), ( "nameFull_contains", Encode.string |> Encode.optional input.nameFull_contains ), ( "nameFull_not_contains", Encode.string |> Encode.optional input.nameFull_not_contains ), ( "nameFull_starts_with", Encode.string |> Encode.optional input.nameFull_starts_with ), ( "nameFull_not_starts_with", Encode.string |> Encode.optional input.nameFull_not_starts_with ), ( "nameFull_ends_with", Encode.string |> Encode.optional input.nameFull_ends_with ), ( "nameFull_not_ends_with", Encode.string |> Encode.optional input.nameFull_not_ends_with ), ( "events_every", encodeEventFilter |> Encode.optional input.events_every ), ( "events_some", encodeEventFilter |> Encode.optional input.events_some ), ( "events_none", encodeEventFilter |> Encode.optional input.events_none ), ( "users_every", encodeUserFilter |> Encode.optional input.users_every ), ( "users_some", encodeUserFilter |> Encode.optional input.users_some ), ( "users_none", encodeUserFilter |> Encode.optional input.users_none ), ( "venues_every", encodeVenueFilter |> Encode.optional input.venues_every ), ( "venues_some", encodeVenueFilter |> Encode.optional input.venues_some ), ( "venues_none", encodeVenueFilter |> Encode.optional input.venues_none ) ]


{-| Type alias for the `HosteventsEvent` attributes. Note that this type
needs to use the `HosteventsEvent` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias HosteventsEventRaw =
    { endsAt : OptionalArgument GraphCool.Scalar.DateTime, name : String, nameFull : OptionalArgument String, private : OptionalArgument Bool, startsAt : GraphCool.Scalar.DateTime, createdById : OptionalArgument GraphCool.Scalar.Id, poolId : OptionalArgument GraphCool.Scalar.Id, pool : OptionalArgument EventpoolPool, hostsIds : OptionalArgument (List GraphCool.Scalar.Id), hosts : OptionalArgument (List EventhostsHost), venuesIds : OptionalArgument (List GraphCool.Scalar.Id), venues : OptionalArgument (List EventvenuesVenue) }


{-| Type for the HosteventsEvent input object.
-}
type HosteventsEvent
    = HosteventsEvent HosteventsEventRaw


{-| Encode a HosteventsEvent into a value that can be used as an argument.
-}
encodeHosteventsEvent : HosteventsEvent -> Value
encodeHosteventsEvent (HosteventsEvent input) =
    Encode.maybeObject
        [ ( "endsAt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.endsAt ), ( "name", Encode.string input.name |> Just ), ( "nameFull", Encode.string |> Encode.optional input.nameFull ), ( "private", Encode.bool |> Encode.optional input.private ), ( "startsAt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) input.startsAt |> Just ), ( "createdById", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.createdById ), ( "poolId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.poolId ), ( "pool", encodeEventpoolPool |> Encode.optional input.pool ), ( "hostsIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.hostsIds ), ( "hosts", (encodeEventhostsHost |> Encode.list) |> Encode.optional input.hosts ), ( "venuesIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.venuesIds ), ( "venues", (encodeEventvenuesVenue |> Encode.list) |> Encode.optional input.venues ) ]


{-| Type alias for the `HostvenuesVenue` attributes. Note that this type
needs to use the `HostvenuesVenue` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias HostvenuesVenueRaw =
    { description : OptionalArgument String, name : String, nameFull : String, locationId : OptionalArgument GraphCool.Scalar.Id, location : OptionalArgument VenuelocationLocation, eventsIds : OptionalArgument (List GraphCool.Scalar.Id), events : OptionalArgument (List VenueeventsEvent), hostsIds : OptionalArgument (List GraphCool.Scalar.Id), hosts : OptionalArgument (List VenuehostsHost) }


{-| Type for the HostvenuesVenue input object.
-}
type HostvenuesVenue
    = HostvenuesVenue HostvenuesVenueRaw


{-| Encode a HostvenuesVenue into a value that can be used as an argument.
-}
encodeHostvenuesVenue : HostvenuesVenue -> Value
encodeHostvenuesVenue (HostvenuesVenue input) =
    Encode.maybeObject
        [ ( "description", Encode.string |> Encode.optional input.description ), ( "name", Encode.string input.name |> Just ), ( "nameFull", Encode.string input.nameFull |> Just ), ( "locationId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.locationId ), ( "location", encodeVenuelocationLocation |> Encode.optional input.location ), ( "eventsIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.eventsIds ), ( "events", (encodeVenueeventsEvent |> Encode.list) |> Encode.optional input.events ), ( "hostsIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.hostsIds ), ( "hosts", (encodeVenuehostsHost |> Encode.list) |> Encode.optional input.hosts ) ]


{-| Type alias for the `LocationFilter` attributes. Note that this type
needs to use the `LocationFilter` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias LocationFilterRaw =
    { and : OptionalArgument (List LocationFilter), or : OptionalArgument (List LocationFilter), address : OptionalArgument String, address_not : OptionalArgument String, address_in : OptionalArgument (List String), address_not_in : OptionalArgument (List String), address_lt : OptionalArgument String, address_lte : OptionalArgument String, address_gt : OptionalArgument String, address_gte : OptionalArgument String, address_contains : OptionalArgument String, address_not_contains : OptionalArgument String, address_starts_with : OptionalArgument String, address_not_starts_with : OptionalArgument String, address_ends_with : OptionalArgument String, address_not_ends_with : OptionalArgument String, addressFull : OptionalArgument String, addressFull_not : OptionalArgument String, addressFull_in : OptionalArgument (List String), addressFull_not_in : OptionalArgument (List String), addressFull_lt : OptionalArgument String, addressFull_lte : OptionalArgument String, addressFull_gt : OptionalArgument String, addressFull_gte : OptionalArgument String, addressFull_contains : OptionalArgument String, addressFull_not_contains : OptionalArgument String, addressFull_starts_with : OptionalArgument String, addressFull_not_starts_with : OptionalArgument String, addressFull_ends_with : OptionalArgument String, addressFull_not_ends_with : OptionalArgument String, city : OptionalArgument String, city_not : OptionalArgument String, city_in : OptionalArgument (List String), city_not_in : OptionalArgument (List String), city_lt : OptionalArgument String, city_lte : OptionalArgument String, city_gt : OptionalArgument String, city_gte : OptionalArgument String, city_contains : OptionalArgument String, city_not_contains : OptionalArgument String, city_starts_with : OptionalArgument String, city_not_starts_with : OptionalArgument String, city_ends_with : OptionalArgument String, city_not_ends_with : OptionalArgument String, country : OptionalArgument String, country_not : OptionalArgument String, country_in : OptionalArgument (List String), country_not_in : OptionalArgument (List String), country_lt : OptionalArgument String, country_lte : OptionalArgument String, country_gt : OptionalArgument String, country_gte : OptionalArgument String, country_contains : OptionalArgument String, country_not_contains : OptionalArgument String, country_starts_with : OptionalArgument String, country_not_starts_with : OptionalArgument String, country_ends_with : OptionalArgument String, country_not_ends_with : OptionalArgument String, createdAt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_not : OptionalArgument GraphCool.Scalar.DateTime, createdAt_in : OptionalArgument (List GraphCool.Scalar.DateTime), createdAt_not_in : OptionalArgument (List GraphCool.Scalar.DateTime), createdAt_lt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_lte : OptionalArgument GraphCool.Scalar.DateTime, createdAt_gt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_gte : OptionalArgument GraphCool.Scalar.DateTime, id : OptionalArgument GraphCool.Scalar.Id, id_not : OptionalArgument GraphCool.Scalar.Id, id_in : OptionalArgument (List GraphCool.Scalar.Id), id_not_in : OptionalArgument (List GraphCool.Scalar.Id), id_lt : OptionalArgument GraphCool.Scalar.Id, id_lte : OptionalArgument GraphCool.Scalar.Id, id_gt : OptionalArgument GraphCool.Scalar.Id, id_gte : OptionalArgument GraphCool.Scalar.Id, id_contains : OptionalArgument GraphCool.Scalar.Id, id_not_contains : OptionalArgument GraphCool.Scalar.Id, id_starts_with : OptionalArgument GraphCool.Scalar.Id, id_not_starts_with : OptionalArgument GraphCool.Scalar.Id, id_ends_with : OptionalArgument GraphCool.Scalar.Id, id_not_ends_with : OptionalArgument GraphCool.Scalar.Id, lat : OptionalArgument Float, lat_not : OptionalArgument Float, lat_in : OptionalArgument (List Float), lat_not_in : OptionalArgument (List Float), lat_lt : OptionalArgument Float, lat_lte : OptionalArgument Float, lat_gt : OptionalArgument Float, lat_gte : OptionalArgument Float, lon : OptionalArgument Float, lon_not : OptionalArgument Float, lon_in : OptionalArgument (List Float), lon_not_in : OptionalArgument (List Float), lon_lt : OptionalArgument Float, lon_lte : OptionalArgument Float, lon_gt : OptionalArgument Float, lon_gte : OptionalArgument Float, state : OptionalArgument String, state_not : OptionalArgument String, state_in : OptionalArgument (List String), state_not_in : OptionalArgument (List String), state_lt : OptionalArgument String, state_lte : OptionalArgument String, state_gt : OptionalArgument String, state_gte : OptionalArgument String, state_contains : OptionalArgument String, state_not_contains : OptionalArgument String, state_starts_with : OptionalArgument String, state_not_starts_with : OptionalArgument String, state_ends_with : OptionalArgument String, state_not_ends_with : OptionalArgument String, zip : OptionalArgument String, zip_not : OptionalArgument String, zip_in : OptionalArgument (List String), zip_not_in : OptionalArgument (List String), zip_lt : OptionalArgument String, zip_lte : OptionalArgument String, zip_gt : OptionalArgument String, zip_gte : OptionalArgument String, zip_contains : OptionalArgument String, zip_not_contains : OptionalArgument String, zip_starts_with : OptionalArgument String, zip_not_starts_with : OptionalArgument String, zip_ends_with : OptionalArgument String, zip_not_ends_with : OptionalArgument String, venue : OptionalArgument VenueFilter }


{-| Type for the LocationFilter input object.
-}
type LocationFilter
    = LocationFilter LocationFilterRaw


{-| Encode a LocationFilter into a value that can be used as an argument.
-}
encodeLocationFilter : LocationFilter -> Value
encodeLocationFilter (LocationFilter input) =
    Encode.maybeObject
        [ ( "and", (encodeLocationFilter |> Encode.list) |> Encode.optional input.and ), ( "or", (encodeLocationFilter |> Encode.list) |> Encode.optional input.or ), ( "address", Encode.string |> Encode.optional input.address ), ( "address_not", Encode.string |> Encode.optional input.address_not ), ( "address_in", (Encode.string |> Encode.list) |> Encode.optional input.address_in ), ( "address_not_in", (Encode.string |> Encode.list) |> Encode.optional input.address_not_in ), ( "address_lt", Encode.string |> Encode.optional input.address_lt ), ( "address_lte", Encode.string |> Encode.optional input.address_lte ), ( "address_gt", Encode.string |> Encode.optional input.address_gt ), ( "address_gte", Encode.string |> Encode.optional input.address_gte ), ( "address_contains", Encode.string |> Encode.optional input.address_contains ), ( "address_not_contains", Encode.string |> Encode.optional input.address_not_contains ), ( "address_starts_with", Encode.string |> Encode.optional input.address_starts_with ), ( "address_not_starts_with", Encode.string |> Encode.optional input.address_not_starts_with ), ( "address_ends_with", Encode.string |> Encode.optional input.address_ends_with ), ( "address_not_ends_with", Encode.string |> Encode.optional input.address_not_ends_with ), ( "addressFull", Encode.string |> Encode.optional input.addressFull ), ( "addressFull_not", Encode.string |> Encode.optional input.addressFull_not ), ( "addressFull_in", (Encode.string |> Encode.list) |> Encode.optional input.addressFull_in ), ( "addressFull_not_in", (Encode.string |> Encode.list) |> Encode.optional input.addressFull_not_in ), ( "addressFull_lt", Encode.string |> Encode.optional input.addressFull_lt ), ( "addressFull_lte", Encode.string |> Encode.optional input.addressFull_lte ), ( "addressFull_gt", Encode.string |> Encode.optional input.addressFull_gt ), ( "addressFull_gte", Encode.string |> Encode.optional input.addressFull_gte ), ( "addressFull_contains", Encode.string |> Encode.optional input.addressFull_contains ), ( "addressFull_not_contains", Encode.string |> Encode.optional input.addressFull_not_contains ), ( "addressFull_starts_with", Encode.string |> Encode.optional input.addressFull_starts_with ), ( "addressFull_not_starts_with", Encode.string |> Encode.optional input.addressFull_not_starts_with ), ( "addressFull_ends_with", Encode.string |> Encode.optional input.addressFull_ends_with ), ( "addressFull_not_ends_with", Encode.string |> Encode.optional input.addressFull_not_ends_with ), ( "city", Encode.string |> Encode.optional input.city ), ( "city_not", Encode.string |> Encode.optional input.city_not ), ( "city_in", (Encode.string |> Encode.list) |> Encode.optional input.city_in ), ( "city_not_in", (Encode.string |> Encode.list) |> Encode.optional input.city_not_in ), ( "city_lt", Encode.string |> Encode.optional input.city_lt ), ( "city_lte", Encode.string |> Encode.optional input.city_lte ), ( "city_gt", Encode.string |> Encode.optional input.city_gt ), ( "city_gte", Encode.string |> Encode.optional input.city_gte ), ( "city_contains", Encode.string |> Encode.optional input.city_contains ), ( "city_not_contains", Encode.string |> Encode.optional input.city_not_contains ), ( "city_starts_with", Encode.string |> Encode.optional input.city_starts_with ), ( "city_not_starts_with", Encode.string |> Encode.optional input.city_not_starts_with ), ( "city_ends_with", Encode.string |> Encode.optional input.city_ends_with ), ( "city_not_ends_with", Encode.string |> Encode.optional input.city_not_ends_with ), ( "country", Encode.string |> Encode.optional input.country ), ( "country_not", Encode.string |> Encode.optional input.country_not ), ( "country_in", (Encode.string |> Encode.list) |> Encode.optional input.country_in ), ( "country_not_in", (Encode.string |> Encode.list) |> Encode.optional input.country_not_in ), ( "country_lt", Encode.string |> Encode.optional input.country_lt ), ( "country_lte", Encode.string |> Encode.optional input.country_lte ), ( "country_gt", Encode.string |> Encode.optional input.country_gt ), ( "country_gte", Encode.string |> Encode.optional input.country_gte ), ( "country_contains", Encode.string |> Encode.optional input.country_contains ), ( "country_not_contains", Encode.string |> Encode.optional input.country_not_contains ), ( "country_starts_with", Encode.string |> Encode.optional input.country_starts_with ), ( "country_not_starts_with", Encode.string |> Encode.optional input.country_not_starts_with ), ( "country_ends_with", Encode.string |> Encode.optional input.country_ends_with ), ( "country_not_ends_with", Encode.string |> Encode.optional input.country_not_ends_with ), ( "createdAt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "id", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "lat", Encode.float |> Encode.optional input.lat ), ( "lat_not", Encode.float |> Encode.optional input.lat_not ), ( "lat_in", (Encode.float |> Encode.list) |> Encode.optional input.lat_in ), ( "lat_not_in", (Encode.float |> Encode.list) |> Encode.optional input.lat_not_in ), ( "lat_lt", Encode.float |> Encode.optional input.lat_lt ), ( "lat_lte", Encode.float |> Encode.optional input.lat_lte ), ( "lat_gt", Encode.float |> Encode.optional input.lat_gt ), ( "lat_gte", Encode.float |> Encode.optional input.lat_gte ), ( "lon", Encode.float |> Encode.optional input.lon ), ( "lon_not", Encode.float |> Encode.optional input.lon_not ), ( "lon_in", (Encode.float |> Encode.list) |> Encode.optional input.lon_in ), ( "lon_not_in", (Encode.float |> Encode.list) |> Encode.optional input.lon_not_in ), ( "lon_lt", Encode.float |> Encode.optional input.lon_lt ), ( "lon_lte", Encode.float |> Encode.optional input.lon_lte ), ( "lon_gt", Encode.float |> Encode.optional input.lon_gt ), ( "lon_gte", Encode.float |> Encode.optional input.lon_gte ), ( "state", Encode.string |> Encode.optional input.state ), ( "state_not", Encode.string |> Encode.optional input.state_not ), ( "state_in", (Encode.string |> Encode.list) |> Encode.optional input.state_in ), ( "state_not_in", (Encode.string |> Encode.list) |> Encode.optional input.state_not_in ), ( "state_lt", Encode.string |> Encode.optional input.state_lt ), ( "state_lte", Encode.string |> Encode.optional input.state_lte ), ( "state_gt", Encode.string |> Encode.optional input.state_gt ), ( "state_gte", Encode.string |> Encode.optional input.state_gte ), ( "state_contains", Encode.string |> Encode.optional input.state_contains ), ( "state_not_contains", Encode.string |> Encode.optional input.state_not_contains ), ( "state_starts_with", Encode.string |> Encode.optional input.state_starts_with ), ( "state_not_starts_with", Encode.string |> Encode.optional input.state_not_starts_with ), ( "state_ends_with", Encode.string |> Encode.optional input.state_ends_with ), ( "state_not_ends_with", Encode.string |> Encode.optional input.state_not_ends_with ), ( "zip", Encode.string |> Encode.optional input.zip ), ( "zip_not", Encode.string |> Encode.optional input.zip_not ), ( "zip_in", (Encode.string |> Encode.list) |> Encode.optional input.zip_in ), ( "zip_not_in", (Encode.string |> Encode.list) |> Encode.optional input.zip_not_in ), ( "zip_lt", Encode.string |> Encode.optional input.zip_lt ), ( "zip_lte", Encode.string |> Encode.optional input.zip_lte ), ( "zip_gt", Encode.string |> Encode.optional input.zip_gt ), ( "zip_gte", Encode.string |> Encode.optional input.zip_gte ), ( "zip_contains", Encode.string |> Encode.optional input.zip_contains ), ( "zip_not_contains", Encode.string |> Encode.optional input.zip_not_contains ), ( "zip_starts_with", Encode.string |> Encode.optional input.zip_starts_with ), ( "zip_not_starts_with", Encode.string |> Encode.optional input.zip_not_starts_with ), ( "zip_ends_with", Encode.string |> Encode.optional input.zip_ends_with ), ( "zip_not_ends_with", Encode.string |> Encode.optional input.zip_not_ends_with ), ( "venue", encodeVenueFilter |> Encode.optional input.venue ) ]


{-| Type alias for the `LocationSubscriptionFilter` attributes. Note that this type
needs to use the `LocationSubscriptionFilter` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias LocationSubscriptionFilterRaw =
    { and : OptionalArgument (List LocationSubscriptionFilter), or : OptionalArgument (List LocationSubscriptionFilter), mutation_in : OptionalArgument (List GraphCool.Enum.ModelMutationType_.ModelMutationType_), updatedFields_contains : OptionalArgument String, updatedFields_contains_every : OptionalArgument (List String), updatedFields_contains_some : OptionalArgument (List String), node : OptionalArgument LocationSubscriptionFilterNode }


{-| Type for the LocationSubscriptionFilter input object.
-}
type LocationSubscriptionFilter
    = LocationSubscriptionFilter LocationSubscriptionFilterRaw


{-| Encode a LocationSubscriptionFilter into a value that can be used as an argument.
-}
encodeLocationSubscriptionFilter : LocationSubscriptionFilter -> Value
encodeLocationSubscriptionFilter (LocationSubscriptionFilter input) =
    Encode.maybeObject
        [ ( "and", (encodeLocationSubscriptionFilter |> Encode.list) |> Encode.optional input.and ), ( "or", (encodeLocationSubscriptionFilter |> Encode.list) |> Encode.optional input.or ), ( "mutation_in", (Encode.enum GraphCool.Enum.ModelMutationType_.toString |> Encode.list) |> Encode.optional input.mutation_in ), ( "updatedFields_contains", Encode.string |> Encode.optional input.updatedFields_contains ), ( "updatedFields_contains_every", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_every ), ( "updatedFields_contains_some", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_some ), ( "node", encodeLocationSubscriptionFilterNode |> Encode.optional input.node ) ]


{-| Type alias for the `LocationSubscriptionFilterNode` attributes. Note that this type
needs to use the `LocationSubscriptionFilterNode` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias LocationSubscriptionFilterNodeRaw =
    { address : OptionalArgument String, address_not : OptionalArgument String, address_in : OptionalArgument (List String), address_not_in : OptionalArgument (List String), address_lt : OptionalArgument String, address_lte : OptionalArgument String, address_gt : OptionalArgument String, address_gte : OptionalArgument String, address_contains : OptionalArgument String, address_not_contains : OptionalArgument String, address_starts_with : OptionalArgument String, address_not_starts_with : OptionalArgument String, address_ends_with : OptionalArgument String, address_not_ends_with : OptionalArgument String, addressFull : OptionalArgument String, addressFull_not : OptionalArgument String, addressFull_in : OptionalArgument (List String), addressFull_not_in : OptionalArgument (List String), addressFull_lt : OptionalArgument String, addressFull_lte : OptionalArgument String, addressFull_gt : OptionalArgument String, addressFull_gte : OptionalArgument String, addressFull_contains : OptionalArgument String, addressFull_not_contains : OptionalArgument String, addressFull_starts_with : OptionalArgument String, addressFull_not_starts_with : OptionalArgument String, addressFull_ends_with : OptionalArgument String, addressFull_not_ends_with : OptionalArgument String, city : OptionalArgument String, city_not : OptionalArgument String, city_in : OptionalArgument (List String), city_not_in : OptionalArgument (List String), city_lt : OptionalArgument String, city_lte : OptionalArgument String, city_gt : OptionalArgument String, city_gte : OptionalArgument String, city_contains : OptionalArgument String, city_not_contains : OptionalArgument String, city_starts_with : OptionalArgument String, city_not_starts_with : OptionalArgument String, city_ends_with : OptionalArgument String, city_not_ends_with : OptionalArgument String, country : OptionalArgument String, country_not : OptionalArgument String, country_in : OptionalArgument (List String), country_not_in : OptionalArgument (List String), country_lt : OptionalArgument String, country_lte : OptionalArgument String, country_gt : OptionalArgument String, country_gte : OptionalArgument String, country_contains : OptionalArgument String, country_not_contains : OptionalArgument String, country_starts_with : OptionalArgument String, country_not_starts_with : OptionalArgument String, country_ends_with : OptionalArgument String, country_not_ends_with : OptionalArgument String, createdAt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_not : OptionalArgument GraphCool.Scalar.DateTime, createdAt_in : OptionalArgument (List GraphCool.Scalar.DateTime), createdAt_not_in : OptionalArgument (List GraphCool.Scalar.DateTime), createdAt_lt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_lte : OptionalArgument GraphCool.Scalar.DateTime, createdAt_gt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_gte : OptionalArgument GraphCool.Scalar.DateTime, id : OptionalArgument GraphCool.Scalar.Id, id_not : OptionalArgument GraphCool.Scalar.Id, id_in : OptionalArgument (List GraphCool.Scalar.Id), id_not_in : OptionalArgument (List GraphCool.Scalar.Id), id_lt : OptionalArgument GraphCool.Scalar.Id, id_lte : OptionalArgument GraphCool.Scalar.Id, id_gt : OptionalArgument GraphCool.Scalar.Id, id_gte : OptionalArgument GraphCool.Scalar.Id, id_contains : OptionalArgument GraphCool.Scalar.Id, id_not_contains : OptionalArgument GraphCool.Scalar.Id, id_starts_with : OptionalArgument GraphCool.Scalar.Id, id_not_starts_with : OptionalArgument GraphCool.Scalar.Id, id_ends_with : OptionalArgument GraphCool.Scalar.Id, id_not_ends_with : OptionalArgument GraphCool.Scalar.Id, lat : OptionalArgument Float, lat_not : OptionalArgument Float, lat_in : OptionalArgument (List Float), lat_not_in : OptionalArgument (List Float), lat_lt : OptionalArgument Float, lat_lte : OptionalArgument Float, lat_gt : OptionalArgument Float, lat_gte : OptionalArgument Float, lon : OptionalArgument Float, lon_not : OptionalArgument Float, lon_in : OptionalArgument (List Float), lon_not_in : OptionalArgument (List Float), lon_lt : OptionalArgument Float, lon_lte : OptionalArgument Float, lon_gt : OptionalArgument Float, lon_gte : OptionalArgument Float, state : OptionalArgument String, state_not : OptionalArgument String, state_in : OptionalArgument (List String), state_not_in : OptionalArgument (List String), state_lt : OptionalArgument String, state_lte : OptionalArgument String, state_gt : OptionalArgument String, state_gte : OptionalArgument String, state_contains : OptionalArgument String, state_not_contains : OptionalArgument String, state_starts_with : OptionalArgument String, state_not_starts_with : OptionalArgument String, state_ends_with : OptionalArgument String, state_not_ends_with : OptionalArgument String, zip : OptionalArgument String, zip_not : OptionalArgument String, zip_in : OptionalArgument (List String), zip_not_in : OptionalArgument (List String), zip_lt : OptionalArgument String, zip_lte : OptionalArgument String, zip_gt : OptionalArgument String, zip_gte : OptionalArgument String, zip_contains : OptionalArgument String, zip_not_contains : OptionalArgument String, zip_starts_with : OptionalArgument String, zip_not_starts_with : OptionalArgument String, zip_ends_with : OptionalArgument String, zip_not_ends_with : OptionalArgument String, venue : OptionalArgument VenueFilter }


{-| Type for the LocationSubscriptionFilterNode input object.
-}
type LocationSubscriptionFilterNode
    = LocationSubscriptionFilterNode LocationSubscriptionFilterNodeRaw


{-| Encode a LocationSubscriptionFilterNode into a value that can be used as an argument.
-}
encodeLocationSubscriptionFilterNode : LocationSubscriptionFilterNode -> Value
encodeLocationSubscriptionFilterNode (LocationSubscriptionFilterNode input) =
    Encode.maybeObject
        [ ( "address", Encode.string |> Encode.optional input.address ), ( "address_not", Encode.string |> Encode.optional input.address_not ), ( "address_in", (Encode.string |> Encode.list) |> Encode.optional input.address_in ), ( "address_not_in", (Encode.string |> Encode.list) |> Encode.optional input.address_not_in ), ( "address_lt", Encode.string |> Encode.optional input.address_lt ), ( "address_lte", Encode.string |> Encode.optional input.address_lte ), ( "address_gt", Encode.string |> Encode.optional input.address_gt ), ( "address_gte", Encode.string |> Encode.optional input.address_gte ), ( "address_contains", Encode.string |> Encode.optional input.address_contains ), ( "address_not_contains", Encode.string |> Encode.optional input.address_not_contains ), ( "address_starts_with", Encode.string |> Encode.optional input.address_starts_with ), ( "address_not_starts_with", Encode.string |> Encode.optional input.address_not_starts_with ), ( "address_ends_with", Encode.string |> Encode.optional input.address_ends_with ), ( "address_not_ends_with", Encode.string |> Encode.optional input.address_not_ends_with ), ( "addressFull", Encode.string |> Encode.optional input.addressFull ), ( "addressFull_not", Encode.string |> Encode.optional input.addressFull_not ), ( "addressFull_in", (Encode.string |> Encode.list) |> Encode.optional input.addressFull_in ), ( "addressFull_not_in", (Encode.string |> Encode.list) |> Encode.optional input.addressFull_not_in ), ( "addressFull_lt", Encode.string |> Encode.optional input.addressFull_lt ), ( "addressFull_lte", Encode.string |> Encode.optional input.addressFull_lte ), ( "addressFull_gt", Encode.string |> Encode.optional input.addressFull_gt ), ( "addressFull_gte", Encode.string |> Encode.optional input.addressFull_gte ), ( "addressFull_contains", Encode.string |> Encode.optional input.addressFull_contains ), ( "addressFull_not_contains", Encode.string |> Encode.optional input.addressFull_not_contains ), ( "addressFull_starts_with", Encode.string |> Encode.optional input.addressFull_starts_with ), ( "addressFull_not_starts_with", Encode.string |> Encode.optional input.addressFull_not_starts_with ), ( "addressFull_ends_with", Encode.string |> Encode.optional input.addressFull_ends_with ), ( "addressFull_not_ends_with", Encode.string |> Encode.optional input.addressFull_not_ends_with ), ( "city", Encode.string |> Encode.optional input.city ), ( "city_not", Encode.string |> Encode.optional input.city_not ), ( "city_in", (Encode.string |> Encode.list) |> Encode.optional input.city_in ), ( "city_not_in", (Encode.string |> Encode.list) |> Encode.optional input.city_not_in ), ( "city_lt", Encode.string |> Encode.optional input.city_lt ), ( "city_lte", Encode.string |> Encode.optional input.city_lte ), ( "city_gt", Encode.string |> Encode.optional input.city_gt ), ( "city_gte", Encode.string |> Encode.optional input.city_gte ), ( "city_contains", Encode.string |> Encode.optional input.city_contains ), ( "city_not_contains", Encode.string |> Encode.optional input.city_not_contains ), ( "city_starts_with", Encode.string |> Encode.optional input.city_starts_with ), ( "city_not_starts_with", Encode.string |> Encode.optional input.city_not_starts_with ), ( "city_ends_with", Encode.string |> Encode.optional input.city_ends_with ), ( "city_not_ends_with", Encode.string |> Encode.optional input.city_not_ends_with ), ( "country", Encode.string |> Encode.optional input.country ), ( "country_not", Encode.string |> Encode.optional input.country_not ), ( "country_in", (Encode.string |> Encode.list) |> Encode.optional input.country_in ), ( "country_not_in", (Encode.string |> Encode.list) |> Encode.optional input.country_not_in ), ( "country_lt", Encode.string |> Encode.optional input.country_lt ), ( "country_lte", Encode.string |> Encode.optional input.country_lte ), ( "country_gt", Encode.string |> Encode.optional input.country_gt ), ( "country_gte", Encode.string |> Encode.optional input.country_gte ), ( "country_contains", Encode.string |> Encode.optional input.country_contains ), ( "country_not_contains", Encode.string |> Encode.optional input.country_not_contains ), ( "country_starts_with", Encode.string |> Encode.optional input.country_starts_with ), ( "country_not_starts_with", Encode.string |> Encode.optional input.country_not_starts_with ), ( "country_ends_with", Encode.string |> Encode.optional input.country_ends_with ), ( "country_not_ends_with", Encode.string |> Encode.optional input.country_not_ends_with ), ( "createdAt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "id", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "lat", Encode.float |> Encode.optional input.lat ), ( "lat_not", Encode.float |> Encode.optional input.lat_not ), ( "lat_in", (Encode.float |> Encode.list) |> Encode.optional input.lat_in ), ( "lat_not_in", (Encode.float |> Encode.list) |> Encode.optional input.lat_not_in ), ( "lat_lt", Encode.float |> Encode.optional input.lat_lt ), ( "lat_lte", Encode.float |> Encode.optional input.lat_lte ), ( "lat_gt", Encode.float |> Encode.optional input.lat_gt ), ( "lat_gte", Encode.float |> Encode.optional input.lat_gte ), ( "lon", Encode.float |> Encode.optional input.lon ), ( "lon_not", Encode.float |> Encode.optional input.lon_not ), ( "lon_in", (Encode.float |> Encode.list) |> Encode.optional input.lon_in ), ( "lon_not_in", (Encode.float |> Encode.list) |> Encode.optional input.lon_not_in ), ( "lon_lt", Encode.float |> Encode.optional input.lon_lt ), ( "lon_lte", Encode.float |> Encode.optional input.lon_lte ), ( "lon_gt", Encode.float |> Encode.optional input.lon_gt ), ( "lon_gte", Encode.float |> Encode.optional input.lon_gte ), ( "state", Encode.string |> Encode.optional input.state ), ( "state_not", Encode.string |> Encode.optional input.state_not ), ( "state_in", (Encode.string |> Encode.list) |> Encode.optional input.state_in ), ( "state_not_in", (Encode.string |> Encode.list) |> Encode.optional input.state_not_in ), ( "state_lt", Encode.string |> Encode.optional input.state_lt ), ( "state_lte", Encode.string |> Encode.optional input.state_lte ), ( "state_gt", Encode.string |> Encode.optional input.state_gt ), ( "state_gte", Encode.string |> Encode.optional input.state_gte ), ( "state_contains", Encode.string |> Encode.optional input.state_contains ), ( "state_not_contains", Encode.string |> Encode.optional input.state_not_contains ), ( "state_starts_with", Encode.string |> Encode.optional input.state_starts_with ), ( "state_not_starts_with", Encode.string |> Encode.optional input.state_not_starts_with ), ( "state_ends_with", Encode.string |> Encode.optional input.state_ends_with ), ( "state_not_ends_with", Encode.string |> Encode.optional input.state_not_ends_with ), ( "zip", Encode.string |> Encode.optional input.zip ), ( "zip_not", Encode.string |> Encode.optional input.zip_not ), ( "zip_in", (Encode.string |> Encode.list) |> Encode.optional input.zip_in ), ( "zip_not_in", (Encode.string |> Encode.list) |> Encode.optional input.zip_not_in ), ( "zip_lt", Encode.string |> Encode.optional input.zip_lt ), ( "zip_lte", Encode.string |> Encode.optional input.zip_lte ), ( "zip_gt", Encode.string |> Encode.optional input.zip_gt ), ( "zip_gte", Encode.string |> Encode.optional input.zip_gte ), ( "zip_contains", Encode.string |> Encode.optional input.zip_contains ), ( "zip_not_contains", Encode.string |> Encode.optional input.zip_not_contains ), ( "zip_starts_with", Encode.string |> Encode.optional input.zip_starts_with ), ( "zip_not_starts_with", Encode.string |> Encode.optional input.zip_not_starts_with ), ( "zip_ends_with", Encode.string |> Encode.optional input.zip_ends_with ), ( "zip_not_ends_with", Encode.string |> Encode.optional input.zip_not_ends_with ), ( "venue", encodeVenueFilter |> Encode.optional input.venue ) ]


{-| Type alias for the `LocationvenueVenue` attributes. Note that this type
needs to use the `LocationvenueVenue` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias LocationvenueVenueRaw =
    { description : OptionalArgument String, name : String, nameFull : String, eventsIds : OptionalArgument (List GraphCool.Scalar.Id), events : OptionalArgument (List VenueeventsEvent), hostsIds : OptionalArgument (List GraphCool.Scalar.Id), hosts : OptionalArgument (List VenuehostsHost) }


{-| Type for the LocationvenueVenue input object.
-}
type LocationvenueVenue
    = LocationvenueVenue LocationvenueVenueRaw


{-| Encode a LocationvenueVenue into a value that can be used as an argument.
-}
encodeLocationvenueVenue : LocationvenueVenue -> Value
encodeLocationvenueVenue (LocationvenueVenue input) =
    Encode.maybeObject
        [ ( "description", Encode.string |> Encode.optional input.description ), ( "name", Encode.string input.name |> Just ), ( "nameFull", Encode.string input.nameFull |> Just ), ( "eventsIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.eventsIds ), ( "events", (encodeVenueeventsEvent |> Encode.list) |> Encode.optional input.events ), ( "hostsIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.hostsIds ), ( "hosts", (encodeVenuehostsHost |> Encode.list) |> Encode.optional input.hosts ) ]


{-| Type alias for the `MessageFilter` attributes. Note that this type
needs to use the `MessageFilter` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias MessageFilterRaw =
    { and : OptionalArgument (List MessageFilter), or : OptionalArgument (List MessageFilter), createdAt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_not : OptionalArgument GraphCool.Scalar.DateTime, createdAt_in : OptionalArgument (List GraphCool.Scalar.DateTime), createdAt_not_in : OptionalArgument (List GraphCool.Scalar.DateTime), createdAt_lt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_lte : OptionalArgument GraphCool.Scalar.DateTime, createdAt_gt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_gte : OptionalArgument GraphCool.Scalar.DateTime, id : OptionalArgument GraphCool.Scalar.Id, id_not : OptionalArgument GraphCool.Scalar.Id, id_in : OptionalArgument (List GraphCool.Scalar.Id), id_not_in : OptionalArgument (List GraphCool.Scalar.Id), id_lt : OptionalArgument GraphCool.Scalar.Id, id_lte : OptionalArgument GraphCool.Scalar.Id, id_gt : OptionalArgument GraphCool.Scalar.Id, id_gte : OptionalArgument GraphCool.Scalar.Id, id_contains : OptionalArgument GraphCool.Scalar.Id, id_not_contains : OptionalArgument GraphCool.Scalar.Id, id_starts_with : OptionalArgument GraphCool.Scalar.Id, id_not_starts_with : OptionalArgument GraphCool.Scalar.Id, id_ends_with : OptionalArgument GraphCool.Scalar.Id, id_not_ends_with : OptionalArgument GraphCool.Scalar.Id, text : OptionalArgument String, text_not : OptionalArgument String, text_in : OptionalArgument (List String), text_not_in : OptionalArgument (List String), text_lt : OptionalArgument String, text_lte : OptionalArgument String, text_gt : OptionalArgument String, text_gte : OptionalArgument String, text_contains : OptionalArgument String, text_not_contains : OptionalArgument String, text_starts_with : OptionalArgument String, text_not_starts_with : OptionalArgument String, text_ends_with : OptionalArgument String, text_not_ends_with : OptionalArgument String, chat : OptionalArgument ChatFilter, from : OptionalArgument UserFilter }


{-| Type for the MessageFilter input object.
-}
type MessageFilter
    = MessageFilter MessageFilterRaw


{-| Encode a MessageFilter into a value that can be used as an argument.
-}
encodeMessageFilter : MessageFilter -> Value
encodeMessageFilter (MessageFilter input) =
    Encode.maybeObject
        [ ( "and", (encodeMessageFilter |> Encode.list) |> Encode.optional input.and ), ( "or", (encodeMessageFilter |> Encode.list) |> Encode.optional input.or ), ( "createdAt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "id", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "text", Encode.string |> Encode.optional input.text ), ( "text_not", Encode.string |> Encode.optional input.text_not ), ( "text_in", (Encode.string |> Encode.list) |> Encode.optional input.text_in ), ( "text_not_in", (Encode.string |> Encode.list) |> Encode.optional input.text_not_in ), ( "text_lt", Encode.string |> Encode.optional input.text_lt ), ( "text_lte", Encode.string |> Encode.optional input.text_lte ), ( "text_gt", Encode.string |> Encode.optional input.text_gt ), ( "text_gte", Encode.string |> Encode.optional input.text_gte ), ( "text_contains", Encode.string |> Encode.optional input.text_contains ), ( "text_not_contains", Encode.string |> Encode.optional input.text_not_contains ), ( "text_starts_with", Encode.string |> Encode.optional input.text_starts_with ), ( "text_not_starts_with", Encode.string |> Encode.optional input.text_not_starts_with ), ( "text_ends_with", Encode.string |> Encode.optional input.text_ends_with ), ( "text_not_ends_with", Encode.string |> Encode.optional input.text_not_ends_with ), ( "chat", encodeChatFilter |> Encode.optional input.chat ), ( "from", encodeUserFilter |> Encode.optional input.from ) ]


{-| Type alias for the `MessageSubscriptionFilter` attributes. Note that this type
needs to use the `MessageSubscriptionFilter` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias MessageSubscriptionFilterRaw =
    { and : OptionalArgument (List MessageSubscriptionFilter), or : OptionalArgument (List MessageSubscriptionFilter), mutation_in : OptionalArgument (List GraphCool.Enum.ModelMutationType_.ModelMutationType_), updatedFields_contains : OptionalArgument String, updatedFields_contains_every : OptionalArgument (List String), updatedFields_contains_some : OptionalArgument (List String), node : OptionalArgument MessageSubscriptionFilterNode }


{-| Type for the MessageSubscriptionFilter input object.
-}
type MessageSubscriptionFilter
    = MessageSubscriptionFilter MessageSubscriptionFilterRaw


{-| Encode a MessageSubscriptionFilter into a value that can be used as an argument.
-}
encodeMessageSubscriptionFilter : MessageSubscriptionFilter -> Value
encodeMessageSubscriptionFilter (MessageSubscriptionFilter input) =
    Encode.maybeObject
        [ ( "and", (encodeMessageSubscriptionFilter |> Encode.list) |> Encode.optional input.and ), ( "or", (encodeMessageSubscriptionFilter |> Encode.list) |> Encode.optional input.or ), ( "mutation_in", (Encode.enum GraphCool.Enum.ModelMutationType_.toString |> Encode.list) |> Encode.optional input.mutation_in ), ( "updatedFields_contains", Encode.string |> Encode.optional input.updatedFields_contains ), ( "updatedFields_contains_every", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_every ), ( "updatedFields_contains_some", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_some ), ( "node", encodeMessageSubscriptionFilterNode |> Encode.optional input.node ) ]


{-| Type alias for the `MessageSubscriptionFilterNode` attributes. Note that this type
needs to use the `MessageSubscriptionFilterNode` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias MessageSubscriptionFilterNodeRaw =
    { createdAt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_not : OptionalArgument GraphCool.Scalar.DateTime, createdAt_in : OptionalArgument (List GraphCool.Scalar.DateTime), createdAt_not_in : OptionalArgument (List GraphCool.Scalar.DateTime), createdAt_lt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_lte : OptionalArgument GraphCool.Scalar.DateTime, createdAt_gt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_gte : OptionalArgument GraphCool.Scalar.DateTime, id : OptionalArgument GraphCool.Scalar.Id, id_not : OptionalArgument GraphCool.Scalar.Id, id_in : OptionalArgument (List GraphCool.Scalar.Id), id_not_in : OptionalArgument (List GraphCool.Scalar.Id), id_lt : OptionalArgument GraphCool.Scalar.Id, id_lte : OptionalArgument GraphCool.Scalar.Id, id_gt : OptionalArgument GraphCool.Scalar.Id, id_gte : OptionalArgument GraphCool.Scalar.Id, id_contains : OptionalArgument GraphCool.Scalar.Id, id_not_contains : OptionalArgument GraphCool.Scalar.Id, id_starts_with : OptionalArgument GraphCool.Scalar.Id, id_not_starts_with : OptionalArgument GraphCool.Scalar.Id, id_ends_with : OptionalArgument GraphCool.Scalar.Id, id_not_ends_with : OptionalArgument GraphCool.Scalar.Id, text : OptionalArgument String, text_not : OptionalArgument String, text_in : OptionalArgument (List String), text_not_in : OptionalArgument (List String), text_lt : OptionalArgument String, text_lte : OptionalArgument String, text_gt : OptionalArgument String, text_gte : OptionalArgument String, text_contains : OptionalArgument String, text_not_contains : OptionalArgument String, text_starts_with : OptionalArgument String, text_not_starts_with : OptionalArgument String, text_ends_with : OptionalArgument String, text_not_ends_with : OptionalArgument String, chat : OptionalArgument ChatFilter, from : OptionalArgument UserFilter }


{-| Type for the MessageSubscriptionFilterNode input object.
-}
type MessageSubscriptionFilterNode
    = MessageSubscriptionFilterNode MessageSubscriptionFilterNodeRaw


{-| Encode a MessageSubscriptionFilterNode into a value that can be used as an argument.
-}
encodeMessageSubscriptionFilterNode : MessageSubscriptionFilterNode -> Value
encodeMessageSubscriptionFilterNode (MessageSubscriptionFilterNode input) =
    Encode.maybeObject
        [ ( "createdAt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "id", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "text", Encode.string |> Encode.optional input.text ), ( "text_not", Encode.string |> Encode.optional input.text_not ), ( "text_in", (Encode.string |> Encode.list) |> Encode.optional input.text_in ), ( "text_not_in", (Encode.string |> Encode.list) |> Encode.optional input.text_not_in ), ( "text_lt", Encode.string |> Encode.optional input.text_lt ), ( "text_lte", Encode.string |> Encode.optional input.text_lte ), ( "text_gt", Encode.string |> Encode.optional input.text_gt ), ( "text_gte", Encode.string |> Encode.optional input.text_gte ), ( "text_contains", Encode.string |> Encode.optional input.text_contains ), ( "text_not_contains", Encode.string |> Encode.optional input.text_not_contains ), ( "text_starts_with", Encode.string |> Encode.optional input.text_starts_with ), ( "text_not_starts_with", Encode.string |> Encode.optional input.text_not_starts_with ), ( "text_ends_with", Encode.string |> Encode.optional input.text_ends_with ), ( "text_not_ends_with", Encode.string |> Encode.optional input.text_not_ends_with ), ( "chat", encodeChatFilter |> Encode.optional input.chat ), ( "from", encodeUserFilter |> Encode.optional input.from ) ]


{-| Type alias for the `MessagechatChat` attributes. Note that this type
needs to use the `MessagechatChat` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias MessagechatChatRaw =
    { dateState : OptionalArgument GraphCool.Enum.DateState.DateState, canceledId : OptionalArgument GraphCool.Scalar.Id, initiatedId : OptionalArgument GraphCool.Scalar.Id, passedId : OptionalArgument GraphCool.Scalar.Id, poolId : OptionalArgument GraphCool.Scalar.Id, pool : OptionalArgument ChatpoolPool, proposedId : OptionalArgument GraphCool.Scalar.Id, recipientId : OptionalArgument GraphCool.Scalar.Id, messagesIds : OptionalArgument (List GraphCool.Scalar.Id), messages : OptionalArgument (List ChatmessagesMessage) }


{-| Type for the MessagechatChat input object.
-}
type MessagechatChat
    = MessagechatChat MessagechatChatRaw


{-| Encode a MessagechatChat into a value that can be used as an argument.
-}
encodeMessagechatChat : MessagechatChat -> Value
encodeMessagechatChat (MessagechatChat input) =
    Encode.maybeObject
        [ ( "dateState", Encode.enum GraphCool.Enum.DateState.toString |> Encode.optional input.dateState ), ( "canceledId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.canceledId ), ( "initiatedId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.initiatedId ), ( "passedId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.passedId ), ( "poolId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.poolId ), ( "pool", encodeChatpoolPool |> Encode.optional input.pool ), ( "proposedId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.proposedId ), ( "recipientId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.recipientId ), ( "messagesIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.messagesIds ), ( "messages", (encodeChatmessagesMessage |> Encode.list) |> Encode.optional input.messages ) ]


{-| Type alias for the `PoolFilter` attributes. Note that this type
needs to use the `PoolFilter` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias PoolFilterRaw =
    { and : OptionalArgument (List PoolFilter), or : OptionalArgument (List PoolFilter), id : OptionalArgument GraphCool.Scalar.Id, id_not : OptionalArgument GraphCool.Scalar.Id, id_in : OptionalArgument (List GraphCool.Scalar.Id), id_not_in : OptionalArgument (List GraphCool.Scalar.Id), id_lt : OptionalArgument GraphCool.Scalar.Id, id_lte : OptionalArgument GraphCool.Scalar.Id, id_gt : OptionalArgument GraphCool.Scalar.Id, id_gte : OptionalArgument GraphCool.Scalar.Id, id_contains : OptionalArgument GraphCool.Scalar.Id, id_not_contains : OptionalArgument GraphCool.Scalar.Id, id_starts_with : OptionalArgument GraphCool.Scalar.Id, id_not_starts_with : OptionalArgument GraphCool.Scalar.Id, id_ends_with : OptionalArgument GraphCool.Scalar.Id, id_not_ends_with : OptionalArgument GraphCool.Scalar.Id, seatGeekId : OptionalArgument String, seatGeekId_not : OptionalArgument String, seatGeekId_in : OptionalArgument (List String), seatGeekId_not_in : OptionalArgument (List String), seatGeekId_lt : OptionalArgument String, seatGeekId_lte : OptionalArgument String, seatGeekId_gt : OptionalArgument String, seatGeekId_gte : OptionalArgument String, seatGeekId_contains : OptionalArgument String, seatGeekId_not_contains : OptionalArgument String, seatGeekId_starts_with : OptionalArgument String, seatGeekId_not_starts_with : OptionalArgument String, seatGeekId_ends_with : OptionalArgument String, seatGeekId_not_ends_with : OptionalArgument String, attending_every : OptionalArgument UserFilter, attending_some : OptionalArgument UserFilter, attending_none : OptionalArgument UserFilter, chats_every : OptionalArgument ChatFilter, chats_some : OptionalArgument ChatFilter, chats_none : OptionalArgument ChatFilter, event : OptionalArgument EventFilter, liked_every : OptionalArgument UserFilter, liked_some : OptionalArgument UserFilter, liked_none : OptionalArgument UserFilter, viewed_every : OptionalArgument UserFilter, viewed_some : OptionalArgument UserFilter, viewed_none : OptionalArgument UserFilter }


{-| Type for the PoolFilter input object.
-}
type PoolFilter
    = PoolFilter PoolFilterRaw


{-| Encode a PoolFilter into a value that can be used as an argument.
-}
encodePoolFilter : PoolFilter -> Value
encodePoolFilter (PoolFilter input) =
    Encode.maybeObject
        [ ( "and", (encodePoolFilter |> Encode.list) |> Encode.optional input.and ), ( "or", (encodePoolFilter |> Encode.list) |> Encode.optional input.or ), ( "id", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "seatGeekId", Encode.string |> Encode.optional input.seatGeekId ), ( "seatGeekId_not", Encode.string |> Encode.optional input.seatGeekId_not ), ( "seatGeekId_in", (Encode.string |> Encode.list) |> Encode.optional input.seatGeekId_in ), ( "seatGeekId_not_in", (Encode.string |> Encode.list) |> Encode.optional input.seatGeekId_not_in ), ( "seatGeekId_lt", Encode.string |> Encode.optional input.seatGeekId_lt ), ( "seatGeekId_lte", Encode.string |> Encode.optional input.seatGeekId_lte ), ( "seatGeekId_gt", Encode.string |> Encode.optional input.seatGeekId_gt ), ( "seatGeekId_gte", Encode.string |> Encode.optional input.seatGeekId_gte ), ( "seatGeekId_contains", Encode.string |> Encode.optional input.seatGeekId_contains ), ( "seatGeekId_not_contains", Encode.string |> Encode.optional input.seatGeekId_not_contains ), ( "seatGeekId_starts_with", Encode.string |> Encode.optional input.seatGeekId_starts_with ), ( "seatGeekId_not_starts_with", Encode.string |> Encode.optional input.seatGeekId_not_starts_with ), ( "seatGeekId_ends_with", Encode.string |> Encode.optional input.seatGeekId_ends_with ), ( "seatGeekId_not_ends_with", Encode.string |> Encode.optional input.seatGeekId_not_ends_with ), ( "attending_every", encodeUserFilter |> Encode.optional input.attending_every ), ( "attending_some", encodeUserFilter |> Encode.optional input.attending_some ), ( "attending_none", encodeUserFilter |> Encode.optional input.attending_none ), ( "chats_every", encodeChatFilter |> Encode.optional input.chats_every ), ( "chats_some", encodeChatFilter |> Encode.optional input.chats_some ), ( "chats_none", encodeChatFilter |> Encode.optional input.chats_none ), ( "event", encodeEventFilter |> Encode.optional input.event ), ( "liked_every", encodeUserFilter |> Encode.optional input.liked_every ), ( "liked_some", encodeUserFilter |> Encode.optional input.liked_some ), ( "liked_none", encodeUserFilter |> Encode.optional input.liked_none ), ( "viewed_every", encodeUserFilter |> Encode.optional input.viewed_every ), ( "viewed_some", encodeUserFilter |> Encode.optional input.viewed_some ), ( "viewed_none", encodeUserFilter |> Encode.optional input.viewed_none ) ]


{-| Type alias for the `PoolSubscriptionFilter` attributes. Note that this type
needs to use the `PoolSubscriptionFilter` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias PoolSubscriptionFilterRaw =
    { and : OptionalArgument (List PoolSubscriptionFilter), or : OptionalArgument (List PoolSubscriptionFilter), mutation_in : OptionalArgument (List GraphCool.Enum.ModelMutationType_.ModelMutationType_), updatedFields_contains : OptionalArgument String, updatedFields_contains_every : OptionalArgument (List String), updatedFields_contains_some : OptionalArgument (List String), node : OptionalArgument PoolSubscriptionFilterNode }


{-| Type for the PoolSubscriptionFilter input object.
-}
type PoolSubscriptionFilter
    = PoolSubscriptionFilter PoolSubscriptionFilterRaw


{-| Encode a PoolSubscriptionFilter into a value that can be used as an argument.
-}
encodePoolSubscriptionFilter : PoolSubscriptionFilter -> Value
encodePoolSubscriptionFilter (PoolSubscriptionFilter input) =
    Encode.maybeObject
        [ ( "and", (encodePoolSubscriptionFilter |> Encode.list) |> Encode.optional input.and ), ( "or", (encodePoolSubscriptionFilter |> Encode.list) |> Encode.optional input.or ), ( "mutation_in", (Encode.enum GraphCool.Enum.ModelMutationType_.toString |> Encode.list) |> Encode.optional input.mutation_in ), ( "updatedFields_contains", Encode.string |> Encode.optional input.updatedFields_contains ), ( "updatedFields_contains_every", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_every ), ( "updatedFields_contains_some", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_some ), ( "node", encodePoolSubscriptionFilterNode |> Encode.optional input.node ) ]


{-| Type alias for the `PoolSubscriptionFilterNode` attributes. Note that this type
needs to use the `PoolSubscriptionFilterNode` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias PoolSubscriptionFilterNodeRaw =
    { id : OptionalArgument GraphCool.Scalar.Id, id_not : OptionalArgument GraphCool.Scalar.Id, id_in : OptionalArgument (List GraphCool.Scalar.Id), id_not_in : OptionalArgument (List GraphCool.Scalar.Id), id_lt : OptionalArgument GraphCool.Scalar.Id, id_lte : OptionalArgument GraphCool.Scalar.Id, id_gt : OptionalArgument GraphCool.Scalar.Id, id_gte : OptionalArgument GraphCool.Scalar.Id, id_contains : OptionalArgument GraphCool.Scalar.Id, id_not_contains : OptionalArgument GraphCool.Scalar.Id, id_starts_with : OptionalArgument GraphCool.Scalar.Id, id_not_starts_with : OptionalArgument GraphCool.Scalar.Id, id_ends_with : OptionalArgument GraphCool.Scalar.Id, id_not_ends_with : OptionalArgument GraphCool.Scalar.Id, seatGeekId : OptionalArgument String, seatGeekId_not : OptionalArgument String, seatGeekId_in : OptionalArgument (List String), seatGeekId_not_in : OptionalArgument (List String), seatGeekId_lt : OptionalArgument String, seatGeekId_lte : OptionalArgument String, seatGeekId_gt : OptionalArgument String, seatGeekId_gte : OptionalArgument String, seatGeekId_contains : OptionalArgument String, seatGeekId_not_contains : OptionalArgument String, seatGeekId_starts_with : OptionalArgument String, seatGeekId_not_starts_with : OptionalArgument String, seatGeekId_ends_with : OptionalArgument String, seatGeekId_not_ends_with : OptionalArgument String, attending_every : OptionalArgument UserFilter, attending_some : OptionalArgument UserFilter, attending_none : OptionalArgument UserFilter, chats_every : OptionalArgument ChatFilter, chats_some : OptionalArgument ChatFilter, chats_none : OptionalArgument ChatFilter, event : OptionalArgument EventFilter, liked_every : OptionalArgument UserFilter, liked_some : OptionalArgument UserFilter, liked_none : OptionalArgument UserFilter, viewed_every : OptionalArgument UserFilter, viewed_some : OptionalArgument UserFilter, viewed_none : OptionalArgument UserFilter }


{-| Type for the PoolSubscriptionFilterNode input object.
-}
type PoolSubscriptionFilterNode
    = PoolSubscriptionFilterNode PoolSubscriptionFilterNodeRaw


{-| Encode a PoolSubscriptionFilterNode into a value that can be used as an argument.
-}
encodePoolSubscriptionFilterNode : PoolSubscriptionFilterNode -> Value
encodePoolSubscriptionFilterNode (PoolSubscriptionFilterNode input) =
    Encode.maybeObject
        [ ( "id", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "seatGeekId", Encode.string |> Encode.optional input.seatGeekId ), ( "seatGeekId_not", Encode.string |> Encode.optional input.seatGeekId_not ), ( "seatGeekId_in", (Encode.string |> Encode.list) |> Encode.optional input.seatGeekId_in ), ( "seatGeekId_not_in", (Encode.string |> Encode.list) |> Encode.optional input.seatGeekId_not_in ), ( "seatGeekId_lt", Encode.string |> Encode.optional input.seatGeekId_lt ), ( "seatGeekId_lte", Encode.string |> Encode.optional input.seatGeekId_lte ), ( "seatGeekId_gt", Encode.string |> Encode.optional input.seatGeekId_gt ), ( "seatGeekId_gte", Encode.string |> Encode.optional input.seatGeekId_gte ), ( "seatGeekId_contains", Encode.string |> Encode.optional input.seatGeekId_contains ), ( "seatGeekId_not_contains", Encode.string |> Encode.optional input.seatGeekId_not_contains ), ( "seatGeekId_starts_with", Encode.string |> Encode.optional input.seatGeekId_starts_with ), ( "seatGeekId_not_starts_with", Encode.string |> Encode.optional input.seatGeekId_not_starts_with ), ( "seatGeekId_ends_with", Encode.string |> Encode.optional input.seatGeekId_ends_with ), ( "seatGeekId_not_ends_with", Encode.string |> Encode.optional input.seatGeekId_not_ends_with ), ( "attending_every", encodeUserFilter |> Encode.optional input.attending_every ), ( "attending_some", encodeUserFilter |> Encode.optional input.attending_some ), ( "attending_none", encodeUserFilter |> Encode.optional input.attending_none ), ( "chats_every", encodeChatFilter |> Encode.optional input.chats_every ), ( "chats_some", encodeChatFilter |> Encode.optional input.chats_some ), ( "chats_none", encodeChatFilter |> Encode.optional input.chats_none ), ( "event", encodeEventFilter |> Encode.optional input.event ), ( "liked_every", encodeUserFilter |> Encode.optional input.liked_every ), ( "liked_some", encodeUserFilter |> Encode.optional input.liked_some ), ( "liked_none", encodeUserFilter |> Encode.optional input.liked_none ), ( "viewed_every", encodeUserFilter |> Encode.optional input.viewed_every ), ( "viewed_some", encodeUserFilter |> Encode.optional input.viewed_some ), ( "viewed_none", encodeUserFilter |> Encode.optional input.viewed_none ) ]


{-| Type for the PoolchatsChat input object.
-}
type alias PoolchatsChat =
    { dateState : OptionalArgument GraphCool.Enum.DateState.DateState, canceledId : OptionalArgument GraphCool.Scalar.Id, initiatedId : OptionalArgument GraphCool.Scalar.Id, passedId : OptionalArgument GraphCool.Scalar.Id, proposedId : OptionalArgument GraphCool.Scalar.Id, recipientId : OptionalArgument GraphCool.Scalar.Id, messagesIds : OptionalArgument (List GraphCool.Scalar.Id), messages : OptionalArgument (List ChatmessagesMessage) }


{-| Encode a PoolchatsChat into a value that can be used as an argument.
-}
encodePoolchatsChat : PoolchatsChat -> Value
encodePoolchatsChat input =
    Encode.maybeObject
        [ ( "dateState", Encode.enum GraphCool.Enum.DateState.toString |> Encode.optional input.dateState ), ( "canceledId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.canceledId ), ( "initiatedId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.initiatedId ), ( "passedId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.passedId ), ( "proposedId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.proposedId ), ( "recipientId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.recipientId ), ( "messagesIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.messagesIds ), ( "messages", (encodeChatmessagesMessage |> Encode.list) |> Encode.optional input.messages ) ]


{-| Type alias for the `PooleventEvent` attributes. Note that this type
needs to use the `PooleventEvent` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias PooleventEventRaw =
    { endsAt : OptionalArgument GraphCool.Scalar.DateTime, name : String, nameFull : OptionalArgument String, private : OptionalArgument Bool, startsAt : GraphCool.Scalar.DateTime, createdById : OptionalArgument GraphCool.Scalar.Id, hostsIds : OptionalArgument (List GraphCool.Scalar.Id), hosts : OptionalArgument (List EventhostsHost), venuesIds : OptionalArgument (List GraphCool.Scalar.Id), venues : OptionalArgument (List EventvenuesVenue) }


{-| Type for the PooleventEvent input object.
-}
type PooleventEvent
    = PooleventEvent PooleventEventRaw


{-| Encode a PooleventEvent into a value that can be used as an argument.
-}
encodePooleventEvent : PooleventEvent -> Value
encodePooleventEvent (PooleventEvent input) =
    Encode.maybeObject
        [ ( "endsAt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.endsAt ), ( "name", Encode.string input.name |> Just ), ( "nameFull", Encode.string |> Encode.optional input.nameFull ), ( "private", Encode.bool |> Encode.optional input.private ), ( "startsAt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) input.startsAt |> Just ), ( "createdById", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.createdById ), ( "hostsIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.hostsIds ), ( "hosts", (encodeEventhostsHost |> Encode.list) |> Encode.optional input.hosts ), ( "venuesIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.venuesIds ), ( "venues", (encodeEventvenuesVenue |> Encode.list) |> Encode.optional input.venues ) ]


{-| Type alias for the `UpdateChat` attributes. Note that this type
needs to use the `UpdateChat` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias UpdateChatRaw =
    { dateState : OptionalArgument GraphCool.Enum.DateState.DateState, id : GraphCool.Scalar.Id, canceledId : OptionalArgument GraphCool.Scalar.Id, initiatedId : OptionalArgument GraphCool.Scalar.Id, passedId : OptionalArgument GraphCool.Scalar.Id, poolId : OptionalArgument GraphCool.Scalar.Id, pool : OptionalArgument ChatpoolPool, proposedId : OptionalArgument GraphCool.Scalar.Id, recipientId : OptionalArgument GraphCool.Scalar.Id, messagesIds : OptionalArgument (List GraphCool.Scalar.Id), messages : OptionalArgument (List ChatmessagesMessage) }


{-| Type for the UpdateChat input object.
-}
type UpdateChat
    = UpdateChat UpdateChatRaw


{-| Encode a UpdateChat into a value that can be used as an argument.
-}
encodeUpdateChat : UpdateChat -> Value
encodeUpdateChat (UpdateChat input) =
    Encode.maybeObject
        [ ( "dateState", Encode.enum GraphCool.Enum.DateState.toString |> Encode.optional input.dateState ), ( "id", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) input.id |> Just ), ( "canceledId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.canceledId ), ( "initiatedId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.initiatedId ), ( "passedId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.passedId ), ( "poolId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.poolId ), ( "pool", encodeChatpoolPool |> Encode.optional input.pool ), ( "proposedId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.proposedId ), ( "recipientId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.recipientId ), ( "messagesIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.messagesIds ), ( "messages", (encodeChatmessagesMessage |> Encode.list) |> Encode.optional input.messages ) ]


{-| Type alias for the `UpdateEvent` attributes. Note that this type
needs to use the `UpdateEvent` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias UpdateEventRaw =
    { endsAt : OptionalArgument GraphCool.Scalar.DateTime, id : GraphCool.Scalar.Id, name : OptionalArgument String, nameFull : OptionalArgument String, private : OptionalArgument Bool, startsAt : OptionalArgument GraphCool.Scalar.DateTime, createdById : OptionalArgument GraphCool.Scalar.Id, poolId : OptionalArgument GraphCool.Scalar.Id, pool : OptionalArgument EventpoolPool, hostsIds : OptionalArgument (List GraphCool.Scalar.Id), hosts : OptionalArgument (List EventhostsHost), venuesIds : OptionalArgument (List GraphCool.Scalar.Id), venues : OptionalArgument (List EventvenuesVenue) }


{-| Type for the UpdateEvent input object.
-}
type UpdateEvent
    = UpdateEvent UpdateEventRaw


{-| Encode a UpdateEvent into a value that can be used as an argument.
-}
encodeUpdateEvent : UpdateEvent -> Value
encodeUpdateEvent (UpdateEvent input) =
    Encode.maybeObject
        [ ( "endsAt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.endsAt ), ( "id", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) input.id |> Just ), ( "name", Encode.string |> Encode.optional input.name ), ( "nameFull", Encode.string |> Encode.optional input.nameFull ), ( "private", Encode.bool |> Encode.optional input.private ), ( "startsAt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.startsAt ), ( "createdById", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.createdById ), ( "poolId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.poolId ), ( "pool", encodeEventpoolPool |> Encode.optional input.pool ), ( "hostsIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.hostsIds ), ( "hosts", (encodeEventhostsHost |> Encode.list) |> Encode.optional input.hosts ), ( "venuesIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.venuesIds ), ( "venues", (encodeEventvenuesVenue |> Encode.list) |> Encode.optional input.venues ) ]


{-| Type for the UpdateFile input object.
-}
type alias UpdateFile =
    { id : GraphCool.Scalar.Id, name : OptionalArgument String }


{-| Encode a UpdateFile into a value that can be used as an argument.
-}
encodeUpdateFile : UpdateFile -> Value
encodeUpdateFile input =
    Encode.maybeObject
        [ ( "id", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) input.id |> Just ), ( "name", Encode.string |> Encode.optional input.name ) ]


{-| Type alias for the `UpdateHost` attributes. Note that this type
needs to use the `UpdateHost` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias UpdateHostRaw =
    { description : OptionalArgument String, id : GraphCool.Scalar.Id, name : OptionalArgument String, nameFull : OptionalArgument String, eventsIds : OptionalArgument (List GraphCool.Scalar.Id), events : OptionalArgument (List HosteventsEvent), usersIds : OptionalArgument (List GraphCool.Scalar.Id), venuesIds : OptionalArgument (List GraphCool.Scalar.Id), venues : OptionalArgument (List HostvenuesVenue) }


{-| Type for the UpdateHost input object.
-}
type UpdateHost
    = UpdateHost UpdateHostRaw


{-| Encode a UpdateHost into a value that can be used as an argument.
-}
encodeUpdateHost : UpdateHost -> Value
encodeUpdateHost (UpdateHost input) =
    Encode.maybeObject
        [ ( "description", Encode.string |> Encode.optional input.description ), ( "id", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) input.id |> Just ), ( "name", Encode.string |> Encode.optional input.name ), ( "nameFull", Encode.string |> Encode.optional input.nameFull ), ( "eventsIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.eventsIds ), ( "events", (encodeHosteventsEvent |> Encode.list) |> Encode.optional input.events ), ( "usersIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.usersIds ), ( "venuesIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.venuesIds ), ( "venues", (encodeHostvenuesVenue |> Encode.list) |> Encode.optional input.venues ) ]


{-| Type alias for the `UpdateLocation` attributes. Note that this type
needs to use the `UpdateLocation` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias UpdateLocationRaw =
    { address : OptionalArgument String, addressFull : OptionalArgument String, city : OptionalArgument String, country : OptionalArgument String, id : GraphCool.Scalar.Id, lat : OptionalArgument Float, lon : OptionalArgument Float, state : OptionalArgument String, zip : OptionalArgument String, venueId : OptionalArgument GraphCool.Scalar.Id, venue : OptionalArgument LocationvenueVenue }


{-| Type for the UpdateLocation input object.
-}
type UpdateLocation
    = UpdateLocation UpdateLocationRaw


{-| Encode a UpdateLocation into a value that can be used as an argument.
-}
encodeUpdateLocation : UpdateLocation -> Value
encodeUpdateLocation (UpdateLocation input) =
    Encode.maybeObject
        [ ( "address", Encode.string |> Encode.optional input.address ), ( "addressFull", Encode.string |> Encode.optional input.addressFull ), ( "city", Encode.string |> Encode.optional input.city ), ( "country", Encode.string |> Encode.optional input.country ), ( "id", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) input.id |> Just ), ( "lat", Encode.float |> Encode.optional input.lat ), ( "lon", Encode.float |> Encode.optional input.lon ), ( "state", Encode.string |> Encode.optional input.state ), ( "zip", Encode.string |> Encode.optional input.zip ), ( "venueId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.venueId ), ( "venue", encodeLocationvenueVenue |> Encode.optional input.venue ) ]


{-| Type alias for the `UpdateMessage` attributes. Note that this type
needs to use the `UpdateMessage` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias UpdateMessageRaw =
    { id : GraphCool.Scalar.Id, text : OptionalArgument String, chatId : OptionalArgument GraphCool.Scalar.Id, chat : OptionalArgument MessagechatChat, fromId : OptionalArgument GraphCool.Scalar.Id }


{-| Type for the UpdateMessage input object.
-}
type UpdateMessage
    = UpdateMessage UpdateMessageRaw


{-| Encode a UpdateMessage into a value that can be used as an argument.
-}
encodeUpdateMessage : UpdateMessage -> Value
encodeUpdateMessage (UpdateMessage input) =
    Encode.maybeObject
        [ ( "id", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) input.id |> Just ), ( "text", Encode.string |> Encode.optional input.text ), ( "chatId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.chatId ), ( "chat", encodeMessagechatChat |> Encode.optional input.chat ), ( "fromId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.fromId ) ]


{-| Type alias for the `UpdatePool` attributes. Note that this type
needs to use the `UpdatePool` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias UpdatePoolRaw =
    { id : GraphCool.Scalar.Id, seatGeekId : OptionalArgument String, eventId : OptionalArgument GraphCool.Scalar.Id, event : OptionalArgument PooleventEvent, attendingIds : OptionalArgument (List GraphCool.Scalar.Id), chatsIds : OptionalArgument (List GraphCool.Scalar.Id), chats : OptionalArgument (List PoolchatsChat), likedIds : OptionalArgument (List GraphCool.Scalar.Id), viewedIds : OptionalArgument (List GraphCool.Scalar.Id) }


{-| Type for the UpdatePool input object.
-}
type UpdatePool
    = UpdatePool UpdatePoolRaw


{-| Encode a UpdatePool into a value that can be used as an argument.
-}
encodeUpdatePool : UpdatePool -> Value
encodeUpdatePool (UpdatePool input) =
    Encode.maybeObject
        [ ( "id", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) input.id |> Just ), ( "seatGeekId", Encode.string |> Encode.optional input.seatGeekId ), ( "eventId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.eventId ), ( "event", encodePooleventEvent |> Encode.optional input.event ), ( "attendingIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.attendingIds ), ( "chatsIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.chatsIds ), ( "chats", (encodePoolchatsChat |> Encode.list) |> Encode.optional input.chats ), ( "likedIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.likedIds ), ( "viewedIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.viewedIds ) ]


{-| Type alias for the `UpdateUser` attributes. Note that this type
needs to use the `UpdateUser` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias UpdateUserRaw =
    { bio : OptionalArgument String, birthday : OptionalArgument GraphCool.Scalar.DateTime, id : GraphCool.Scalar.Id, name : OptionalArgument String, nameFull : OptionalArgument String, attendingEventIds : OptionalArgument (List GraphCool.Scalar.Id), attendingEvent : OptionalArgument (List UserattendingEventPool), createdEventsIds : OptionalArgument (List GraphCool.Scalar.Id), createdEvents : OptionalArgument (List UsercreatedEventsEvent), datesCanceledIds : OptionalArgument (List GraphCool.Scalar.Id), datesCanceled : OptionalArgument (List UserdatesCanceledChat), hostsIds : OptionalArgument (List GraphCool.Scalar.Id), hosts : OptionalArgument (List UserhostsHost), initiatedIds : OptionalArgument (List GraphCool.Scalar.Id), initiated : OptionalArgument (List UserinitiatedChat), likedEventIds : OptionalArgument (List GraphCool.Scalar.Id), likedEvent : OptionalArgument (List UserlikedEventPool), passedIds : OptionalArgument (List GraphCool.Scalar.Id), passed : OptionalArgument (List UserpassedChat), proposedIds : OptionalArgument (List GraphCool.Scalar.Id), proposed : OptionalArgument (List UserproposedChat), recipientIds : OptionalArgument (List GraphCool.Scalar.Id), recipient : OptionalArgument (List UserrecipientChat), sentIds : OptionalArgument (List GraphCool.Scalar.Id), sent : OptionalArgument (List UsersentMessage), viewedEventIds : OptionalArgument (List GraphCool.Scalar.Id), viewedEvent : OptionalArgument (List UserviewedEventPool) }


{-| Type for the UpdateUser input object.
-}
type UpdateUser
    = UpdateUser UpdateUserRaw


{-| Encode a UpdateUser into a value that can be used as an argument.
-}
encodeUpdateUser : UpdateUser -> Value
encodeUpdateUser (UpdateUser input) =
    Encode.maybeObject
        [ ( "bio", Encode.string |> Encode.optional input.bio ), ( "birthday", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.birthday ), ( "id", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) input.id |> Just ), ( "name", Encode.string |> Encode.optional input.name ), ( "nameFull", Encode.string |> Encode.optional input.nameFull ), ( "attendingEventIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.attendingEventIds ), ( "attendingEvent", (encodeUserattendingEventPool |> Encode.list) |> Encode.optional input.attendingEvent ), ( "createdEventsIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdEventsIds ), ( "createdEvents", (encodeUsercreatedEventsEvent |> Encode.list) |> Encode.optional input.createdEvents ), ( "datesCanceledIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.datesCanceledIds ), ( "datesCanceled", (encodeUserdatesCanceledChat |> Encode.list) |> Encode.optional input.datesCanceled ), ( "hostsIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.hostsIds ), ( "hosts", (encodeUserhostsHost |> Encode.list) |> Encode.optional input.hosts ), ( "initiatedIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.initiatedIds ), ( "initiated", (encodeUserinitiatedChat |> Encode.list) |> Encode.optional input.initiated ), ( "likedEventIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.likedEventIds ), ( "likedEvent", (encodeUserlikedEventPool |> Encode.list) |> Encode.optional input.likedEvent ), ( "passedIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.passedIds ), ( "passed", (encodeUserpassedChat |> Encode.list) |> Encode.optional input.passed ), ( "proposedIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.proposedIds ), ( "proposed", (encodeUserproposedChat |> Encode.list) |> Encode.optional input.proposed ), ( "recipientIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.recipientIds ), ( "recipient", (encodeUserrecipientChat |> Encode.list) |> Encode.optional input.recipient ), ( "sentIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.sentIds ), ( "sent", (encodeUsersentMessage |> Encode.list) |> Encode.optional input.sent ), ( "viewedEventIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.viewedEventIds ), ( "viewedEvent", (encodeUserviewedEventPool |> Encode.list) |> Encode.optional input.viewedEvent ) ]


{-| Type alias for the `UpdateVenue` attributes. Note that this type
needs to use the `UpdateVenue` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias UpdateVenueRaw =
    { description : OptionalArgument String, id : GraphCool.Scalar.Id, name : OptionalArgument String, nameFull : OptionalArgument String, locationId : OptionalArgument GraphCool.Scalar.Id, location : OptionalArgument VenuelocationLocation, eventsIds : OptionalArgument (List GraphCool.Scalar.Id), events : OptionalArgument (List VenueeventsEvent), hostsIds : OptionalArgument (List GraphCool.Scalar.Id), hosts : OptionalArgument (List VenuehostsHost) }


{-| Type for the UpdateVenue input object.
-}
type UpdateVenue
    = UpdateVenue UpdateVenueRaw


{-| Encode a UpdateVenue into a value that can be used as an argument.
-}
encodeUpdateVenue : UpdateVenue -> Value
encodeUpdateVenue (UpdateVenue input) =
    Encode.maybeObject
        [ ( "description", Encode.string |> Encode.optional input.description ), ( "id", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) input.id |> Just ), ( "name", Encode.string |> Encode.optional input.name ), ( "nameFull", Encode.string |> Encode.optional input.nameFull ), ( "locationId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.locationId ), ( "location", encodeVenuelocationLocation |> Encode.optional input.location ), ( "eventsIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.eventsIds ), ( "events", (encodeVenueeventsEvent |> Encode.list) |> Encode.optional input.events ), ( "hostsIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.hostsIds ), ( "hosts", (encodeVenuehostsHost |> Encode.list) |> Encode.optional input.hosts ) ]


{-| Type alias for the `UserFilter` attributes. Note that this type
needs to use the `UserFilter` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias UserFilterRaw =
    { and : OptionalArgument (List UserFilter), or : OptionalArgument (List UserFilter), auth0UserId : OptionalArgument String, auth0UserId_not : OptionalArgument String, auth0UserId_in : OptionalArgument (List String), auth0UserId_not_in : OptionalArgument (List String), auth0UserId_lt : OptionalArgument String, auth0UserId_lte : OptionalArgument String, auth0UserId_gt : OptionalArgument String, auth0UserId_gte : OptionalArgument String, auth0UserId_contains : OptionalArgument String, auth0UserId_not_contains : OptionalArgument String, auth0UserId_starts_with : OptionalArgument String, auth0UserId_not_starts_with : OptionalArgument String, auth0UserId_ends_with : OptionalArgument String, auth0UserId_not_ends_with : OptionalArgument String, bio : OptionalArgument String, bio_not : OptionalArgument String, bio_in : OptionalArgument (List String), bio_not_in : OptionalArgument (List String), bio_lt : OptionalArgument String, bio_lte : OptionalArgument String, bio_gt : OptionalArgument String, bio_gte : OptionalArgument String, bio_contains : OptionalArgument String, bio_not_contains : OptionalArgument String, bio_starts_with : OptionalArgument String, bio_not_starts_with : OptionalArgument String, bio_ends_with : OptionalArgument String, bio_not_ends_with : OptionalArgument String, birthday : OptionalArgument GraphCool.Scalar.DateTime, birthday_not : OptionalArgument GraphCool.Scalar.DateTime, birthday_in : OptionalArgument (List GraphCool.Scalar.DateTime), birthday_not_in : OptionalArgument (List GraphCool.Scalar.DateTime), birthday_lt : OptionalArgument GraphCool.Scalar.DateTime, birthday_lte : OptionalArgument GraphCool.Scalar.DateTime, birthday_gt : OptionalArgument GraphCool.Scalar.DateTime, birthday_gte : OptionalArgument GraphCool.Scalar.DateTime, createdAt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_not : OptionalArgument GraphCool.Scalar.DateTime, createdAt_in : OptionalArgument (List GraphCool.Scalar.DateTime), createdAt_not_in : OptionalArgument (List GraphCool.Scalar.DateTime), createdAt_lt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_lte : OptionalArgument GraphCool.Scalar.DateTime, createdAt_gt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_gte : OptionalArgument GraphCool.Scalar.DateTime, email : OptionalArgument String, email_not : OptionalArgument String, email_in : OptionalArgument (List String), email_not_in : OptionalArgument (List String), email_lt : OptionalArgument String, email_lte : OptionalArgument String, email_gt : OptionalArgument String, email_gte : OptionalArgument String, email_contains : OptionalArgument String, email_not_contains : OptionalArgument String, email_starts_with : OptionalArgument String, email_not_starts_with : OptionalArgument String, email_ends_with : OptionalArgument String, email_not_ends_with : OptionalArgument String, id : OptionalArgument GraphCool.Scalar.Id, id_not : OptionalArgument GraphCool.Scalar.Id, id_in : OptionalArgument (List GraphCool.Scalar.Id), id_not_in : OptionalArgument (List GraphCool.Scalar.Id), id_lt : OptionalArgument GraphCool.Scalar.Id, id_lte : OptionalArgument GraphCool.Scalar.Id, id_gt : OptionalArgument GraphCool.Scalar.Id, id_gte : OptionalArgument GraphCool.Scalar.Id, id_contains : OptionalArgument GraphCool.Scalar.Id, id_not_contains : OptionalArgument GraphCool.Scalar.Id, id_starts_with : OptionalArgument GraphCool.Scalar.Id, id_not_starts_with : OptionalArgument GraphCool.Scalar.Id, id_ends_with : OptionalArgument GraphCool.Scalar.Id, id_not_ends_with : OptionalArgument GraphCool.Scalar.Id, name : OptionalArgument String, name_not : OptionalArgument String, name_in : OptionalArgument (List String), name_not_in : OptionalArgument (List String), name_lt : OptionalArgument String, name_lte : OptionalArgument String, name_gt : OptionalArgument String, name_gte : OptionalArgument String, name_contains : OptionalArgument String, name_not_contains : OptionalArgument String, name_starts_with : OptionalArgument String, name_not_starts_with : OptionalArgument String, name_ends_with : OptionalArgument String, name_not_ends_with : OptionalArgument String, nameFull : OptionalArgument String, nameFull_not : OptionalArgument String, nameFull_in : OptionalArgument (List String), nameFull_not_in : OptionalArgument (List String), nameFull_lt : OptionalArgument String, nameFull_lte : OptionalArgument String, nameFull_gt : OptionalArgument String, nameFull_gte : OptionalArgument String, nameFull_contains : OptionalArgument String, nameFull_not_contains : OptionalArgument String, nameFull_starts_with : OptionalArgument String, nameFull_not_starts_with : OptionalArgument String, nameFull_ends_with : OptionalArgument String, nameFull_not_ends_with : OptionalArgument String, password : OptionalArgument String, password_not : OptionalArgument String, password_in : OptionalArgument (List String), password_not_in : OptionalArgument (List String), password_lt : OptionalArgument String, password_lte : OptionalArgument String, password_gt : OptionalArgument String, password_gte : OptionalArgument String, password_contains : OptionalArgument String, password_not_contains : OptionalArgument String, password_starts_with : OptionalArgument String, password_not_starts_with : OptionalArgument String, password_ends_with : OptionalArgument String, password_not_ends_with : OptionalArgument String, updatedAt : OptionalArgument GraphCool.Scalar.DateTime, updatedAt_not : OptionalArgument GraphCool.Scalar.DateTime, updatedAt_in : OptionalArgument (List GraphCool.Scalar.DateTime), updatedAt_not_in : OptionalArgument (List GraphCool.Scalar.DateTime), updatedAt_lt : OptionalArgument GraphCool.Scalar.DateTime, updatedAt_lte : OptionalArgument GraphCool.Scalar.DateTime, updatedAt_gt : OptionalArgument GraphCool.Scalar.DateTime, updatedAt_gte : OptionalArgument GraphCool.Scalar.DateTime, attendingEvent_every : OptionalArgument PoolFilter, attendingEvent_some : OptionalArgument PoolFilter, attendingEvent_none : OptionalArgument PoolFilter, createdEvents_every : OptionalArgument EventFilter, createdEvents_some : OptionalArgument EventFilter, createdEvents_none : OptionalArgument EventFilter, datesCanceled_every : OptionalArgument ChatFilter, datesCanceled_some : OptionalArgument ChatFilter, datesCanceled_none : OptionalArgument ChatFilter, hosts_every : OptionalArgument HostFilter, hosts_some : OptionalArgument HostFilter, hosts_none : OptionalArgument HostFilter, initiated_every : OptionalArgument ChatFilter, initiated_some : OptionalArgument ChatFilter, initiated_none : OptionalArgument ChatFilter, likedEvent_every : OptionalArgument PoolFilter, likedEvent_some : OptionalArgument PoolFilter, likedEvent_none : OptionalArgument PoolFilter, passed_every : OptionalArgument ChatFilter, passed_some : OptionalArgument ChatFilter, passed_none : OptionalArgument ChatFilter, proposed_every : OptionalArgument ChatFilter, proposed_some : OptionalArgument ChatFilter, proposed_none : OptionalArgument ChatFilter, recipient_every : OptionalArgument ChatFilter, recipient_some : OptionalArgument ChatFilter, recipient_none : OptionalArgument ChatFilter, sent_every : OptionalArgument MessageFilter, sent_some : OptionalArgument MessageFilter, sent_none : OptionalArgument MessageFilter, viewedEvent_every : OptionalArgument PoolFilter, viewedEvent_some : OptionalArgument PoolFilter, viewedEvent_none : OptionalArgument PoolFilter }


{-| Type for the UserFilter input object.
-}
type UserFilter
    = UserFilter UserFilterRaw


{-| Encode a UserFilter into a value that can be used as an argument.
-}
encodeUserFilter : UserFilter -> Value
encodeUserFilter (UserFilter input) =
    Encode.maybeObject
        [ ( "and", (encodeUserFilter |> Encode.list) |> Encode.optional input.and ), ( "or", (encodeUserFilter |> Encode.list) |> Encode.optional input.or ), ( "auth0UserId", Encode.string |> Encode.optional input.auth0UserId ), ( "auth0UserId_not", Encode.string |> Encode.optional input.auth0UserId_not ), ( "auth0UserId_in", (Encode.string |> Encode.list) |> Encode.optional input.auth0UserId_in ), ( "auth0UserId_not_in", (Encode.string |> Encode.list) |> Encode.optional input.auth0UserId_not_in ), ( "auth0UserId_lt", Encode.string |> Encode.optional input.auth0UserId_lt ), ( "auth0UserId_lte", Encode.string |> Encode.optional input.auth0UserId_lte ), ( "auth0UserId_gt", Encode.string |> Encode.optional input.auth0UserId_gt ), ( "auth0UserId_gte", Encode.string |> Encode.optional input.auth0UserId_gte ), ( "auth0UserId_contains", Encode.string |> Encode.optional input.auth0UserId_contains ), ( "auth0UserId_not_contains", Encode.string |> Encode.optional input.auth0UserId_not_contains ), ( "auth0UserId_starts_with", Encode.string |> Encode.optional input.auth0UserId_starts_with ), ( "auth0UserId_not_starts_with", Encode.string |> Encode.optional input.auth0UserId_not_starts_with ), ( "auth0UserId_ends_with", Encode.string |> Encode.optional input.auth0UserId_ends_with ), ( "auth0UserId_not_ends_with", Encode.string |> Encode.optional input.auth0UserId_not_ends_with ), ( "bio", Encode.string |> Encode.optional input.bio ), ( "bio_not", Encode.string |> Encode.optional input.bio_not ), ( "bio_in", (Encode.string |> Encode.list) |> Encode.optional input.bio_in ), ( "bio_not_in", (Encode.string |> Encode.list) |> Encode.optional input.bio_not_in ), ( "bio_lt", Encode.string |> Encode.optional input.bio_lt ), ( "bio_lte", Encode.string |> Encode.optional input.bio_lte ), ( "bio_gt", Encode.string |> Encode.optional input.bio_gt ), ( "bio_gte", Encode.string |> Encode.optional input.bio_gte ), ( "bio_contains", Encode.string |> Encode.optional input.bio_contains ), ( "bio_not_contains", Encode.string |> Encode.optional input.bio_not_contains ), ( "bio_starts_with", Encode.string |> Encode.optional input.bio_starts_with ), ( "bio_not_starts_with", Encode.string |> Encode.optional input.bio_not_starts_with ), ( "bio_ends_with", Encode.string |> Encode.optional input.bio_ends_with ), ( "bio_not_ends_with", Encode.string |> Encode.optional input.bio_not_ends_with ), ( "birthday", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.birthday ), ( "birthday_not", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.birthday_not ), ( "birthday_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.birthday_in ), ( "birthday_not_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.birthday_not_in ), ( "birthday_lt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.birthday_lt ), ( "birthday_lte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.birthday_lte ), ( "birthday_gt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.birthday_gt ), ( "birthday_gte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.birthday_gte ), ( "createdAt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "email", Encode.string |> Encode.optional input.email ), ( "email_not", Encode.string |> Encode.optional input.email_not ), ( "email_in", (Encode.string |> Encode.list) |> Encode.optional input.email_in ), ( "email_not_in", (Encode.string |> Encode.list) |> Encode.optional input.email_not_in ), ( "email_lt", Encode.string |> Encode.optional input.email_lt ), ( "email_lte", Encode.string |> Encode.optional input.email_lte ), ( "email_gt", Encode.string |> Encode.optional input.email_gt ), ( "email_gte", Encode.string |> Encode.optional input.email_gte ), ( "email_contains", Encode.string |> Encode.optional input.email_contains ), ( "email_not_contains", Encode.string |> Encode.optional input.email_not_contains ), ( "email_starts_with", Encode.string |> Encode.optional input.email_starts_with ), ( "email_not_starts_with", Encode.string |> Encode.optional input.email_not_starts_with ), ( "email_ends_with", Encode.string |> Encode.optional input.email_ends_with ), ( "email_not_ends_with", Encode.string |> Encode.optional input.email_not_ends_with ), ( "id", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "name", Encode.string |> Encode.optional input.name ), ( "name_not", Encode.string |> Encode.optional input.name_not ), ( "name_in", (Encode.string |> Encode.list) |> Encode.optional input.name_in ), ( "name_not_in", (Encode.string |> Encode.list) |> Encode.optional input.name_not_in ), ( "name_lt", Encode.string |> Encode.optional input.name_lt ), ( "name_lte", Encode.string |> Encode.optional input.name_lte ), ( "name_gt", Encode.string |> Encode.optional input.name_gt ), ( "name_gte", Encode.string |> Encode.optional input.name_gte ), ( "name_contains", Encode.string |> Encode.optional input.name_contains ), ( "name_not_contains", Encode.string |> Encode.optional input.name_not_contains ), ( "name_starts_with", Encode.string |> Encode.optional input.name_starts_with ), ( "name_not_starts_with", Encode.string |> Encode.optional input.name_not_starts_with ), ( "name_ends_with", Encode.string |> Encode.optional input.name_ends_with ), ( "name_not_ends_with", Encode.string |> Encode.optional input.name_not_ends_with ), ( "nameFull", Encode.string |> Encode.optional input.nameFull ), ( "nameFull_not", Encode.string |> Encode.optional input.nameFull_not ), ( "nameFull_in", (Encode.string |> Encode.list) |> Encode.optional input.nameFull_in ), ( "nameFull_not_in", (Encode.string |> Encode.list) |> Encode.optional input.nameFull_not_in ), ( "nameFull_lt", Encode.string |> Encode.optional input.nameFull_lt ), ( "nameFull_lte", Encode.string |> Encode.optional input.nameFull_lte ), ( "nameFull_gt", Encode.string |> Encode.optional input.nameFull_gt ), ( "nameFull_gte", Encode.string |> Encode.optional input.nameFull_gte ), ( "nameFull_contains", Encode.string |> Encode.optional input.nameFull_contains ), ( "nameFull_not_contains", Encode.string |> Encode.optional input.nameFull_not_contains ), ( "nameFull_starts_with", Encode.string |> Encode.optional input.nameFull_starts_with ), ( "nameFull_not_starts_with", Encode.string |> Encode.optional input.nameFull_not_starts_with ), ( "nameFull_ends_with", Encode.string |> Encode.optional input.nameFull_ends_with ), ( "nameFull_not_ends_with", Encode.string |> Encode.optional input.nameFull_not_ends_with ), ( "password", Encode.string |> Encode.optional input.password ), ( "password_not", Encode.string |> Encode.optional input.password_not ), ( "password_in", (Encode.string |> Encode.list) |> Encode.optional input.password_in ), ( "password_not_in", (Encode.string |> Encode.list) |> Encode.optional input.password_not_in ), ( "password_lt", Encode.string |> Encode.optional input.password_lt ), ( "password_lte", Encode.string |> Encode.optional input.password_lte ), ( "password_gt", Encode.string |> Encode.optional input.password_gt ), ( "password_gte", Encode.string |> Encode.optional input.password_gte ), ( "password_contains", Encode.string |> Encode.optional input.password_contains ), ( "password_not_contains", Encode.string |> Encode.optional input.password_not_contains ), ( "password_starts_with", Encode.string |> Encode.optional input.password_starts_with ), ( "password_not_starts_with", Encode.string |> Encode.optional input.password_not_starts_with ), ( "password_ends_with", Encode.string |> Encode.optional input.password_ends_with ), ( "password_not_ends_with", Encode.string |> Encode.optional input.password_not_ends_with ), ( "updatedAt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt ), ( "updatedAt_not", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_not ), ( "updatedAt_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_in ), ( "updatedAt_not_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_not_in ), ( "updatedAt_lt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lt ), ( "updatedAt_lte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lte ), ( "updatedAt_gt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gt ), ( "updatedAt_gte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gte ), ( "attendingEvent_every", encodePoolFilter |> Encode.optional input.attendingEvent_every ), ( "attendingEvent_some", encodePoolFilter |> Encode.optional input.attendingEvent_some ), ( "attendingEvent_none", encodePoolFilter |> Encode.optional input.attendingEvent_none ), ( "createdEvents_every", encodeEventFilter |> Encode.optional input.createdEvents_every ), ( "createdEvents_some", encodeEventFilter |> Encode.optional input.createdEvents_some ), ( "createdEvents_none", encodeEventFilter |> Encode.optional input.createdEvents_none ), ( "datesCanceled_every", encodeChatFilter |> Encode.optional input.datesCanceled_every ), ( "datesCanceled_some", encodeChatFilter |> Encode.optional input.datesCanceled_some ), ( "datesCanceled_none", encodeChatFilter |> Encode.optional input.datesCanceled_none ), ( "hosts_every", encodeHostFilter |> Encode.optional input.hosts_every ), ( "hosts_some", encodeHostFilter |> Encode.optional input.hosts_some ), ( "hosts_none", encodeHostFilter |> Encode.optional input.hosts_none ), ( "initiated_every", encodeChatFilter |> Encode.optional input.initiated_every ), ( "initiated_some", encodeChatFilter |> Encode.optional input.initiated_some ), ( "initiated_none", encodeChatFilter |> Encode.optional input.initiated_none ), ( "likedEvent_every", encodePoolFilter |> Encode.optional input.likedEvent_every ), ( "likedEvent_some", encodePoolFilter |> Encode.optional input.likedEvent_some ), ( "likedEvent_none", encodePoolFilter |> Encode.optional input.likedEvent_none ), ( "passed_every", encodeChatFilter |> Encode.optional input.passed_every ), ( "passed_some", encodeChatFilter |> Encode.optional input.passed_some ), ( "passed_none", encodeChatFilter |> Encode.optional input.passed_none ), ( "proposed_every", encodeChatFilter |> Encode.optional input.proposed_every ), ( "proposed_some", encodeChatFilter |> Encode.optional input.proposed_some ), ( "proposed_none", encodeChatFilter |> Encode.optional input.proposed_none ), ( "recipient_every", encodeChatFilter |> Encode.optional input.recipient_every ), ( "recipient_some", encodeChatFilter |> Encode.optional input.recipient_some ), ( "recipient_none", encodeChatFilter |> Encode.optional input.recipient_none ), ( "sent_every", encodeMessageFilter |> Encode.optional input.sent_every ), ( "sent_some", encodeMessageFilter |> Encode.optional input.sent_some ), ( "sent_none", encodeMessageFilter |> Encode.optional input.sent_none ), ( "viewedEvent_every", encodePoolFilter |> Encode.optional input.viewedEvent_every ), ( "viewedEvent_some", encodePoolFilter |> Encode.optional input.viewedEvent_some ), ( "viewedEvent_none", encodePoolFilter |> Encode.optional input.viewedEvent_none ) ]


{-| Type alias for the `UserSubscriptionFilter` attributes. Note that this type
needs to use the `UserSubscriptionFilter` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias UserSubscriptionFilterRaw =
    { and : OptionalArgument (List UserSubscriptionFilter), or : OptionalArgument (List UserSubscriptionFilter), mutation_in : OptionalArgument (List GraphCool.Enum.ModelMutationType_.ModelMutationType_), updatedFields_contains : OptionalArgument String, updatedFields_contains_every : OptionalArgument (List String), updatedFields_contains_some : OptionalArgument (List String), node : OptionalArgument UserSubscriptionFilterNode }


{-| Type for the UserSubscriptionFilter input object.
-}
type UserSubscriptionFilter
    = UserSubscriptionFilter UserSubscriptionFilterRaw


{-| Encode a UserSubscriptionFilter into a value that can be used as an argument.
-}
encodeUserSubscriptionFilter : UserSubscriptionFilter -> Value
encodeUserSubscriptionFilter (UserSubscriptionFilter input) =
    Encode.maybeObject
        [ ( "and", (encodeUserSubscriptionFilter |> Encode.list) |> Encode.optional input.and ), ( "or", (encodeUserSubscriptionFilter |> Encode.list) |> Encode.optional input.or ), ( "mutation_in", (Encode.enum GraphCool.Enum.ModelMutationType_.toString |> Encode.list) |> Encode.optional input.mutation_in ), ( "updatedFields_contains", Encode.string |> Encode.optional input.updatedFields_contains ), ( "updatedFields_contains_every", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_every ), ( "updatedFields_contains_some", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_some ), ( "node", encodeUserSubscriptionFilterNode |> Encode.optional input.node ) ]


{-| Type alias for the `UserSubscriptionFilterNode` attributes. Note that this type
needs to use the `UserSubscriptionFilterNode` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias UserSubscriptionFilterNodeRaw =
    { auth0UserId : OptionalArgument String, auth0UserId_not : OptionalArgument String, auth0UserId_in : OptionalArgument (List String), auth0UserId_not_in : OptionalArgument (List String), auth0UserId_lt : OptionalArgument String, auth0UserId_lte : OptionalArgument String, auth0UserId_gt : OptionalArgument String, auth0UserId_gte : OptionalArgument String, auth0UserId_contains : OptionalArgument String, auth0UserId_not_contains : OptionalArgument String, auth0UserId_starts_with : OptionalArgument String, auth0UserId_not_starts_with : OptionalArgument String, auth0UserId_ends_with : OptionalArgument String, auth0UserId_not_ends_with : OptionalArgument String, bio : OptionalArgument String, bio_not : OptionalArgument String, bio_in : OptionalArgument (List String), bio_not_in : OptionalArgument (List String), bio_lt : OptionalArgument String, bio_lte : OptionalArgument String, bio_gt : OptionalArgument String, bio_gte : OptionalArgument String, bio_contains : OptionalArgument String, bio_not_contains : OptionalArgument String, bio_starts_with : OptionalArgument String, bio_not_starts_with : OptionalArgument String, bio_ends_with : OptionalArgument String, bio_not_ends_with : OptionalArgument String, birthday : OptionalArgument GraphCool.Scalar.DateTime, birthday_not : OptionalArgument GraphCool.Scalar.DateTime, birthday_in : OptionalArgument (List GraphCool.Scalar.DateTime), birthday_not_in : OptionalArgument (List GraphCool.Scalar.DateTime), birthday_lt : OptionalArgument GraphCool.Scalar.DateTime, birthday_lte : OptionalArgument GraphCool.Scalar.DateTime, birthday_gt : OptionalArgument GraphCool.Scalar.DateTime, birthday_gte : OptionalArgument GraphCool.Scalar.DateTime, createdAt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_not : OptionalArgument GraphCool.Scalar.DateTime, createdAt_in : OptionalArgument (List GraphCool.Scalar.DateTime), createdAt_not_in : OptionalArgument (List GraphCool.Scalar.DateTime), createdAt_lt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_lte : OptionalArgument GraphCool.Scalar.DateTime, createdAt_gt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_gte : OptionalArgument GraphCool.Scalar.DateTime, email : OptionalArgument String, email_not : OptionalArgument String, email_in : OptionalArgument (List String), email_not_in : OptionalArgument (List String), email_lt : OptionalArgument String, email_lte : OptionalArgument String, email_gt : OptionalArgument String, email_gte : OptionalArgument String, email_contains : OptionalArgument String, email_not_contains : OptionalArgument String, email_starts_with : OptionalArgument String, email_not_starts_with : OptionalArgument String, email_ends_with : OptionalArgument String, email_not_ends_with : OptionalArgument String, id : OptionalArgument GraphCool.Scalar.Id, id_not : OptionalArgument GraphCool.Scalar.Id, id_in : OptionalArgument (List GraphCool.Scalar.Id), id_not_in : OptionalArgument (List GraphCool.Scalar.Id), id_lt : OptionalArgument GraphCool.Scalar.Id, id_lte : OptionalArgument GraphCool.Scalar.Id, id_gt : OptionalArgument GraphCool.Scalar.Id, id_gte : OptionalArgument GraphCool.Scalar.Id, id_contains : OptionalArgument GraphCool.Scalar.Id, id_not_contains : OptionalArgument GraphCool.Scalar.Id, id_starts_with : OptionalArgument GraphCool.Scalar.Id, id_not_starts_with : OptionalArgument GraphCool.Scalar.Id, id_ends_with : OptionalArgument GraphCool.Scalar.Id, id_not_ends_with : OptionalArgument GraphCool.Scalar.Id, name : OptionalArgument String, name_not : OptionalArgument String, name_in : OptionalArgument (List String), name_not_in : OptionalArgument (List String), name_lt : OptionalArgument String, name_lte : OptionalArgument String, name_gt : OptionalArgument String, name_gte : OptionalArgument String, name_contains : OptionalArgument String, name_not_contains : OptionalArgument String, name_starts_with : OptionalArgument String, name_not_starts_with : OptionalArgument String, name_ends_with : OptionalArgument String, name_not_ends_with : OptionalArgument String, nameFull : OptionalArgument String, nameFull_not : OptionalArgument String, nameFull_in : OptionalArgument (List String), nameFull_not_in : OptionalArgument (List String), nameFull_lt : OptionalArgument String, nameFull_lte : OptionalArgument String, nameFull_gt : OptionalArgument String, nameFull_gte : OptionalArgument String, nameFull_contains : OptionalArgument String, nameFull_not_contains : OptionalArgument String, nameFull_starts_with : OptionalArgument String, nameFull_not_starts_with : OptionalArgument String, nameFull_ends_with : OptionalArgument String, nameFull_not_ends_with : OptionalArgument String, password : OptionalArgument String, password_not : OptionalArgument String, password_in : OptionalArgument (List String), password_not_in : OptionalArgument (List String), password_lt : OptionalArgument String, password_lte : OptionalArgument String, password_gt : OptionalArgument String, password_gte : OptionalArgument String, password_contains : OptionalArgument String, password_not_contains : OptionalArgument String, password_starts_with : OptionalArgument String, password_not_starts_with : OptionalArgument String, password_ends_with : OptionalArgument String, password_not_ends_with : OptionalArgument String, updatedAt : OptionalArgument GraphCool.Scalar.DateTime, updatedAt_not : OptionalArgument GraphCool.Scalar.DateTime, updatedAt_in : OptionalArgument (List GraphCool.Scalar.DateTime), updatedAt_not_in : OptionalArgument (List GraphCool.Scalar.DateTime), updatedAt_lt : OptionalArgument GraphCool.Scalar.DateTime, updatedAt_lte : OptionalArgument GraphCool.Scalar.DateTime, updatedAt_gt : OptionalArgument GraphCool.Scalar.DateTime, updatedAt_gte : OptionalArgument GraphCool.Scalar.DateTime, attendingEvent_every : OptionalArgument PoolFilter, attendingEvent_some : OptionalArgument PoolFilter, attendingEvent_none : OptionalArgument PoolFilter, createdEvents_every : OptionalArgument EventFilter, createdEvents_some : OptionalArgument EventFilter, createdEvents_none : OptionalArgument EventFilter, datesCanceled_every : OptionalArgument ChatFilter, datesCanceled_some : OptionalArgument ChatFilter, datesCanceled_none : OptionalArgument ChatFilter, hosts_every : OptionalArgument HostFilter, hosts_some : OptionalArgument HostFilter, hosts_none : OptionalArgument HostFilter, initiated_every : OptionalArgument ChatFilter, initiated_some : OptionalArgument ChatFilter, initiated_none : OptionalArgument ChatFilter, likedEvent_every : OptionalArgument PoolFilter, likedEvent_some : OptionalArgument PoolFilter, likedEvent_none : OptionalArgument PoolFilter, passed_every : OptionalArgument ChatFilter, passed_some : OptionalArgument ChatFilter, passed_none : OptionalArgument ChatFilter, proposed_every : OptionalArgument ChatFilter, proposed_some : OptionalArgument ChatFilter, proposed_none : OptionalArgument ChatFilter, recipient_every : OptionalArgument ChatFilter, recipient_some : OptionalArgument ChatFilter, recipient_none : OptionalArgument ChatFilter, sent_every : OptionalArgument MessageFilter, sent_some : OptionalArgument MessageFilter, sent_none : OptionalArgument MessageFilter, viewedEvent_every : OptionalArgument PoolFilter, viewedEvent_some : OptionalArgument PoolFilter, viewedEvent_none : OptionalArgument PoolFilter }


{-| Type for the UserSubscriptionFilterNode input object.
-}
type UserSubscriptionFilterNode
    = UserSubscriptionFilterNode UserSubscriptionFilterNodeRaw


{-| Encode a UserSubscriptionFilterNode into a value that can be used as an argument.
-}
encodeUserSubscriptionFilterNode : UserSubscriptionFilterNode -> Value
encodeUserSubscriptionFilterNode (UserSubscriptionFilterNode input) =
    Encode.maybeObject
        [ ( "auth0UserId", Encode.string |> Encode.optional input.auth0UserId ), ( "auth0UserId_not", Encode.string |> Encode.optional input.auth0UserId_not ), ( "auth0UserId_in", (Encode.string |> Encode.list) |> Encode.optional input.auth0UserId_in ), ( "auth0UserId_not_in", (Encode.string |> Encode.list) |> Encode.optional input.auth0UserId_not_in ), ( "auth0UserId_lt", Encode.string |> Encode.optional input.auth0UserId_lt ), ( "auth0UserId_lte", Encode.string |> Encode.optional input.auth0UserId_lte ), ( "auth0UserId_gt", Encode.string |> Encode.optional input.auth0UserId_gt ), ( "auth0UserId_gte", Encode.string |> Encode.optional input.auth0UserId_gte ), ( "auth0UserId_contains", Encode.string |> Encode.optional input.auth0UserId_contains ), ( "auth0UserId_not_contains", Encode.string |> Encode.optional input.auth0UserId_not_contains ), ( "auth0UserId_starts_with", Encode.string |> Encode.optional input.auth0UserId_starts_with ), ( "auth0UserId_not_starts_with", Encode.string |> Encode.optional input.auth0UserId_not_starts_with ), ( "auth0UserId_ends_with", Encode.string |> Encode.optional input.auth0UserId_ends_with ), ( "auth0UserId_not_ends_with", Encode.string |> Encode.optional input.auth0UserId_not_ends_with ), ( "bio", Encode.string |> Encode.optional input.bio ), ( "bio_not", Encode.string |> Encode.optional input.bio_not ), ( "bio_in", (Encode.string |> Encode.list) |> Encode.optional input.bio_in ), ( "bio_not_in", (Encode.string |> Encode.list) |> Encode.optional input.bio_not_in ), ( "bio_lt", Encode.string |> Encode.optional input.bio_lt ), ( "bio_lte", Encode.string |> Encode.optional input.bio_lte ), ( "bio_gt", Encode.string |> Encode.optional input.bio_gt ), ( "bio_gte", Encode.string |> Encode.optional input.bio_gte ), ( "bio_contains", Encode.string |> Encode.optional input.bio_contains ), ( "bio_not_contains", Encode.string |> Encode.optional input.bio_not_contains ), ( "bio_starts_with", Encode.string |> Encode.optional input.bio_starts_with ), ( "bio_not_starts_with", Encode.string |> Encode.optional input.bio_not_starts_with ), ( "bio_ends_with", Encode.string |> Encode.optional input.bio_ends_with ), ( "bio_not_ends_with", Encode.string |> Encode.optional input.bio_not_ends_with ), ( "birthday", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.birthday ), ( "birthday_not", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.birthday_not ), ( "birthday_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.birthday_in ), ( "birthday_not_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.birthday_not_in ), ( "birthday_lt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.birthday_lt ), ( "birthday_lte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.birthday_lte ), ( "birthday_gt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.birthday_gt ), ( "birthday_gte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.birthday_gte ), ( "createdAt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "email", Encode.string |> Encode.optional input.email ), ( "email_not", Encode.string |> Encode.optional input.email_not ), ( "email_in", (Encode.string |> Encode.list) |> Encode.optional input.email_in ), ( "email_not_in", (Encode.string |> Encode.list) |> Encode.optional input.email_not_in ), ( "email_lt", Encode.string |> Encode.optional input.email_lt ), ( "email_lte", Encode.string |> Encode.optional input.email_lte ), ( "email_gt", Encode.string |> Encode.optional input.email_gt ), ( "email_gte", Encode.string |> Encode.optional input.email_gte ), ( "email_contains", Encode.string |> Encode.optional input.email_contains ), ( "email_not_contains", Encode.string |> Encode.optional input.email_not_contains ), ( "email_starts_with", Encode.string |> Encode.optional input.email_starts_with ), ( "email_not_starts_with", Encode.string |> Encode.optional input.email_not_starts_with ), ( "email_ends_with", Encode.string |> Encode.optional input.email_ends_with ), ( "email_not_ends_with", Encode.string |> Encode.optional input.email_not_ends_with ), ( "id", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "name", Encode.string |> Encode.optional input.name ), ( "name_not", Encode.string |> Encode.optional input.name_not ), ( "name_in", (Encode.string |> Encode.list) |> Encode.optional input.name_in ), ( "name_not_in", (Encode.string |> Encode.list) |> Encode.optional input.name_not_in ), ( "name_lt", Encode.string |> Encode.optional input.name_lt ), ( "name_lte", Encode.string |> Encode.optional input.name_lte ), ( "name_gt", Encode.string |> Encode.optional input.name_gt ), ( "name_gte", Encode.string |> Encode.optional input.name_gte ), ( "name_contains", Encode.string |> Encode.optional input.name_contains ), ( "name_not_contains", Encode.string |> Encode.optional input.name_not_contains ), ( "name_starts_with", Encode.string |> Encode.optional input.name_starts_with ), ( "name_not_starts_with", Encode.string |> Encode.optional input.name_not_starts_with ), ( "name_ends_with", Encode.string |> Encode.optional input.name_ends_with ), ( "name_not_ends_with", Encode.string |> Encode.optional input.name_not_ends_with ), ( "nameFull", Encode.string |> Encode.optional input.nameFull ), ( "nameFull_not", Encode.string |> Encode.optional input.nameFull_not ), ( "nameFull_in", (Encode.string |> Encode.list) |> Encode.optional input.nameFull_in ), ( "nameFull_not_in", (Encode.string |> Encode.list) |> Encode.optional input.nameFull_not_in ), ( "nameFull_lt", Encode.string |> Encode.optional input.nameFull_lt ), ( "nameFull_lte", Encode.string |> Encode.optional input.nameFull_lte ), ( "nameFull_gt", Encode.string |> Encode.optional input.nameFull_gt ), ( "nameFull_gte", Encode.string |> Encode.optional input.nameFull_gte ), ( "nameFull_contains", Encode.string |> Encode.optional input.nameFull_contains ), ( "nameFull_not_contains", Encode.string |> Encode.optional input.nameFull_not_contains ), ( "nameFull_starts_with", Encode.string |> Encode.optional input.nameFull_starts_with ), ( "nameFull_not_starts_with", Encode.string |> Encode.optional input.nameFull_not_starts_with ), ( "nameFull_ends_with", Encode.string |> Encode.optional input.nameFull_ends_with ), ( "nameFull_not_ends_with", Encode.string |> Encode.optional input.nameFull_not_ends_with ), ( "password", Encode.string |> Encode.optional input.password ), ( "password_not", Encode.string |> Encode.optional input.password_not ), ( "password_in", (Encode.string |> Encode.list) |> Encode.optional input.password_in ), ( "password_not_in", (Encode.string |> Encode.list) |> Encode.optional input.password_not_in ), ( "password_lt", Encode.string |> Encode.optional input.password_lt ), ( "password_lte", Encode.string |> Encode.optional input.password_lte ), ( "password_gt", Encode.string |> Encode.optional input.password_gt ), ( "password_gte", Encode.string |> Encode.optional input.password_gte ), ( "password_contains", Encode.string |> Encode.optional input.password_contains ), ( "password_not_contains", Encode.string |> Encode.optional input.password_not_contains ), ( "password_starts_with", Encode.string |> Encode.optional input.password_starts_with ), ( "password_not_starts_with", Encode.string |> Encode.optional input.password_not_starts_with ), ( "password_ends_with", Encode.string |> Encode.optional input.password_ends_with ), ( "password_not_ends_with", Encode.string |> Encode.optional input.password_not_ends_with ), ( "updatedAt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt ), ( "updatedAt_not", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_not ), ( "updatedAt_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_in ), ( "updatedAt_not_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_not_in ), ( "updatedAt_lt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lt ), ( "updatedAt_lte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lte ), ( "updatedAt_gt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gt ), ( "updatedAt_gte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gte ), ( "attendingEvent_every", encodePoolFilter |> Encode.optional input.attendingEvent_every ), ( "attendingEvent_some", encodePoolFilter |> Encode.optional input.attendingEvent_some ), ( "attendingEvent_none", encodePoolFilter |> Encode.optional input.attendingEvent_none ), ( "createdEvents_every", encodeEventFilter |> Encode.optional input.createdEvents_every ), ( "createdEvents_some", encodeEventFilter |> Encode.optional input.createdEvents_some ), ( "createdEvents_none", encodeEventFilter |> Encode.optional input.createdEvents_none ), ( "datesCanceled_every", encodeChatFilter |> Encode.optional input.datesCanceled_every ), ( "datesCanceled_some", encodeChatFilter |> Encode.optional input.datesCanceled_some ), ( "datesCanceled_none", encodeChatFilter |> Encode.optional input.datesCanceled_none ), ( "hosts_every", encodeHostFilter |> Encode.optional input.hosts_every ), ( "hosts_some", encodeHostFilter |> Encode.optional input.hosts_some ), ( "hosts_none", encodeHostFilter |> Encode.optional input.hosts_none ), ( "initiated_every", encodeChatFilter |> Encode.optional input.initiated_every ), ( "initiated_some", encodeChatFilter |> Encode.optional input.initiated_some ), ( "initiated_none", encodeChatFilter |> Encode.optional input.initiated_none ), ( "likedEvent_every", encodePoolFilter |> Encode.optional input.likedEvent_every ), ( "likedEvent_some", encodePoolFilter |> Encode.optional input.likedEvent_some ), ( "likedEvent_none", encodePoolFilter |> Encode.optional input.likedEvent_none ), ( "passed_every", encodeChatFilter |> Encode.optional input.passed_every ), ( "passed_some", encodeChatFilter |> Encode.optional input.passed_some ), ( "passed_none", encodeChatFilter |> Encode.optional input.passed_none ), ( "proposed_every", encodeChatFilter |> Encode.optional input.proposed_every ), ( "proposed_some", encodeChatFilter |> Encode.optional input.proposed_some ), ( "proposed_none", encodeChatFilter |> Encode.optional input.proposed_none ), ( "recipient_every", encodeChatFilter |> Encode.optional input.recipient_every ), ( "recipient_some", encodeChatFilter |> Encode.optional input.recipient_some ), ( "recipient_none", encodeChatFilter |> Encode.optional input.recipient_none ), ( "sent_every", encodeMessageFilter |> Encode.optional input.sent_every ), ( "sent_some", encodeMessageFilter |> Encode.optional input.sent_some ), ( "sent_none", encodeMessageFilter |> Encode.optional input.sent_none ), ( "viewedEvent_every", encodePoolFilter |> Encode.optional input.viewedEvent_every ), ( "viewedEvent_some", encodePoolFilter |> Encode.optional input.viewedEvent_some ), ( "viewedEvent_none", encodePoolFilter |> Encode.optional input.viewedEvent_none ) ]


{-| Type alias for the `UserattendingEventPool` attributes. Note that this type
needs to use the `UserattendingEventPool` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias UserattendingEventPoolRaw =
    { seatGeekId : OptionalArgument String, eventId : OptionalArgument GraphCool.Scalar.Id, event : OptionalArgument PooleventEvent, attendingIds : OptionalArgument (List GraphCool.Scalar.Id), chatsIds : OptionalArgument (List GraphCool.Scalar.Id), chats : OptionalArgument (List PoolchatsChat), likedIds : OptionalArgument (List GraphCool.Scalar.Id), viewedIds : OptionalArgument (List GraphCool.Scalar.Id) }


{-| Type for the UserattendingEventPool input object.
-}
type UserattendingEventPool
    = UserattendingEventPool UserattendingEventPoolRaw


{-| Encode a UserattendingEventPool into a value that can be used as an argument.
-}
encodeUserattendingEventPool : UserattendingEventPool -> Value
encodeUserattendingEventPool (UserattendingEventPool input) =
    Encode.maybeObject
        [ ( "seatGeekId", Encode.string |> Encode.optional input.seatGeekId ), ( "eventId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.eventId ), ( "event", encodePooleventEvent |> Encode.optional input.event ), ( "attendingIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.attendingIds ), ( "chatsIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.chatsIds ), ( "chats", (encodePoolchatsChat |> Encode.list) |> Encode.optional input.chats ), ( "likedIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.likedIds ), ( "viewedIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.viewedIds ) ]


{-| Type alias for the `UsercreatedEventsEvent` attributes. Note that this type
needs to use the `UsercreatedEventsEvent` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias UsercreatedEventsEventRaw =
    { endsAt : OptionalArgument GraphCool.Scalar.DateTime, name : String, nameFull : OptionalArgument String, private : OptionalArgument Bool, startsAt : GraphCool.Scalar.DateTime, poolId : OptionalArgument GraphCool.Scalar.Id, pool : OptionalArgument EventpoolPool, hostsIds : OptionalArgument (List GraphCool.Scalar.Id), hosts : OptionalArgument (List EventhostsHost), venuesIds : OptionalArgument (List GraphCool.Scalar.Id), venues : OptionalArgument (List EventvenuesVenue) }


{-| Type for the UsercreatedEventsEvent input object.
-}
type UsercreatedEventsEvent
    = UsercreatedEventsEvent UsercreatedEventsEventRaw


{-| Encode a UsercreatedEventsEvent into a value that can be used as an argument.
-}
encodeUsercreatedEventsEvent : UsercreatedEventsEvent -> Value
encodeUsercreatedEventsEvent (UsercreatedEventsEvent input) =
    Encode.maybeObject
        [ ( "endsAt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.endsAt ), ( "name", Encode.string input.name |> Just ), ( "nameFull", Encode.string |> Encode.optional input.nameFull ), ( "private", Encode.bool |> Encode.optional input.private ), ( "startsAt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) input.startsAt |> Just ), ( "poolId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.poolId ), ( "pool", encodeEventpoolPool |> Encode.optional input.pool ), ( "hostsIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.hostsIds ), ( "hosts", (encodeEventhostsHost |> Encode.list) |> Encode.optional input.hosts ), ( "venuesIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.venuesIds ), ( "venues", (encodeEventvenuesVenue |> Encode.list) |> Encode.optional input.venues ) ]


{-| Type alias for the `UserdatesCanceledChat` attributes. Note that this type
needs to use the `UserdatesCanceledChat` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias UserdatesCanceledChatRaw =
    { dateState : OptionalArgument GraphCool.Enum.DateState.DateState, initiatedId : OptionalArgument GraphCool.Scalar.Id, passedId : OptionalArgument GraphCool.Scalar.Id, poolId : OptionalArgument GraphCool.Scalar.Id, pool : OptionalArgument ChatpoolPool, proposedId : OptionalArgument GraphCool.Scalar.Id, recipientId : OptionalArgument GraphCool.Scalar.Id, messagesIds : OptionalArgument (List GraphCool.Scalar.Id), messages : OptionalArgument (List ChatmessagesMessage) }


{-| Type for the UserdatesCanceledChat input object.
-}
type UserdatesCanceledChat
    = UserdatesCanceledChat UserdatesCanceledChatRaw


{-| Encode a UserdatesCanceledChat into a value that can be used as an argument.
-}
encodeUserdatesCanceledChat : UserdatesCanceledChat -> Value
encodeUserdatesCanceledChat (UserdatesCanceledChat input) =
    Encode.maybeObject
        [ ( "dateState", Encode.enum GraphCool.Enum.DateState.toString |> Encode.optional input.dateState ), ( "initiatedId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.initiatedId ), ( "passedId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.passedId ), ( "poolId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.poolId ), ( "pool", encodeChatpoolPool |> Encode.optional input.pool ), ( "proposedId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.proposedId ), ( "recipientId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.recipientId ), ( "messagesIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.messagesIds ), ( "messages", (encodeChatmessagesMessage |> Encode.list) |> Encode.optional input.messages ) ]


{-| Type alias for the `UserhostsHost` attributes. Note that this type
needs to use the `UserhostsHost` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias UserhostsHostRaw =
    { description : OptionalArgument String, name : String, nameFull : OptionalArgument String, eventsIds : OptionalArgument (List GraphCool.Scalar.Id), events : OptionalArgument (List HosteventsEvent), usersIds : OptionalArgument (List GraphCool.Scalar.Id), venuesIds : OptionalArgument (List GraphCool.Scalar.Id), venues : OptionalArgument (List HostvenuesVenue) }


{-| Type for the UserhostsHost input object.
-}
type UserhostsHost
    = UserhostsHost UserhostsHostRaw


{-| Encode a UserhostsHost into a value that can be used as an argument.
-}
encodeUserhostsHost : UserhostsHost -> Value
encodeUserhostsHost (UserhostsHost input) =
    Encode.maybeObject
        [ ( "description", Encode.string |> Encode.optional input.description ), ( "name", Encode.string input.name |> Just ), ( "nameFull", Encode.string |> Encode.optional input.nameFull ), ( "eventsIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.eventsIds ), ( "events", (encodeHosteventsEvent |> Encode.list) |> Encode.optional input.events ), ( "usersIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.usersIds ), ( "venuesIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.venuesIds ), ( "venues", (encodeHostvenuesVenue |> Encode.list) |> Encode.optional input.venues ) ]


{-| Type alias for the `UserinitiatedChat` attributes. Note that this type
needs to use the `UserinitiatedChat` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias UserinitiatedChatRaw =
    { dateState : OptionalArgument GraphCool.Enum.DateState.DateState, canceledId : OptionalArgument GraphCool.Scalar.Id, passedId : OptionalArgument GraphCool.Scalar.Id, poolId : OptionalArgument GraphCool.Scalar.Id, pool : OptionalArgument ChatpoolPool, proposedId : OptionalArgument GraphCool.Scalar.Id, recipientId : OptionalArgument GraphCool.Scalar.Id, messagesIds : OptionalArgument (List GraphCool.Scalar.Id), messages : OptionalArgument (List ChatmessagesMessage) }


{-| Type for the UserinitiatedChat input object.
-}
type UserinitiatedChat
    = UserinitiatedChat UserinitiatedChatRaw


{-| Encode a UserinitiatedChat into a value that can be used as an argument.
-}
encodeUserinitiatedChat : UserinitiatedChat -> Value
encodeUserinitiatedChat (UserinitiatedChat input) =
    Encode.maybeObject
        [ ( "dateState", Encode.enum GraphCool.Enum.DateState.toString |> Encode.optional input.dateState ), ( "canceledId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.canceledId ), ( "passedId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.passedId ), ( "poolId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.poolId ), ( "pool", encodeChatpoolPool |> Encode.optional input.pool ), ( "proposedId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.proposedId ), ( "recipientId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.recipientId ), ( "messagesIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.messagesIds ), ( "messages", (encodeChatmessagesMessage |> Encode.list) |> Encode.optional input.messages ) ]


{-| Type alias for the `UserlikedEventPool` attributes. Note that this type
needs to use the `UserlikedEventPool` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias UserlikedEventPoolRaw =
    { seatGeekId : OptionalArgument String, eventId : OptionalArgument GraphCool.Scalar.Id, event : OptionalArgument PooleventEvent, attendingIds : OptionalArgument (List GraphCool.Scalar.Id), chatsIds : OptionalArgument (List GraphCool.Scalar.Id), chats : OptionalArgument (List PoolchatsChat), likedIds : OptionalArgument (List GraphCool.Scalar.Id), viewedIds : OptionalArgument (List GraphCool.Scalar.Id) }


{-| Type for the UserlikedEventPool input object.
-}
type UserlikedEventPool
    = UserlikedEventPool UserlikedEventPoolRaw


{-| Encode a UserlikedEventPool into a value that can be used as an argument.
-}
encodeUserlikedEventPool : UserlikedEventPool -> Value
encodeUserlikedEventPool (UserlikedEventPool input) =
    Encode.maybeObject
        [ ( "seatGeekId", Encode.string |> Encode.optional input.seatGeekId ), ( "eventId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.eventId ), ( "event", encodePooleventEvent |> Encode.optional input.event ), ( "attendingIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.attendingIds ), ( "chatsIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.chatsIds ), ( "chats", (encodePoolchatsChat |> Encode.list) |> Encode.optional input.chats ), ( "likedIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.likedIds ), ( "viewedIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.viewedIds ) ]


{-| Type alias for the `UserpassedChat` attributes. Note that this type
needs to use the `UserpassedChat` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias UserpassedChatRaw =
    { dateState : OptionalArgument GraphCool.Enum.DateState.DateState, canceledId : OptionalArgument GraphCool.Scalar.Id, initiatedId : OptionalArgument GraphCool.Scalar.Id, poolId : OptionalArgument GraphCool.Scalar.Id, pool : OptionalArgument ChatpoolPool, proposedId : OptionalArgument GraphCool.Scalar.Id, recipientId : OptionalArgument GraphCool.Scalar.Id, messagesIds : OptionalArgument (List GraphCool.Scalar.Id), messages : OptionalArgument (List ChatmessagesMessage) }


{-| Type for the UserpassedChat input object.
-}
type UserpassedChat
    = UserpassedChat UserpassedChatRaw


{-| Encode a UserpassedChat into a value that can be used as an argument.
-}
encodeUserpassedChat : UserpassedChat -> Value
encodeUserpassedChat (UserpassedChat input) =
    Encode.maybeObject
        [ ( "dateState", Encode.enum GraphCool.Enum.DateState.toString |> Encode.optional input.dateState ), ( "canceledId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.canceledId ), ( "initiatedId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.initiatedId ), ( "poolId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.poolId ), ( "pool", encodeChatpoolPool |> Encode.optional input.pool ), ( "proposedId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.proposedId ), ( "recipientId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.recipientId ), ( "messagesIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.messagesIds ), ( "messages", (encodeChatmessagesMessage |> Encode.list) |> Encode.optional input.messages ) ]


{-| Type alias for the `UserproposedChat` attributes. Note that this type
needs to use the `UserproposedChat` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias UserproposedChatRaw =
    { dateState : OptionalArgument GraphCool.Enum.DateState.DateState, canceledId : OptionalArgument GraphCool.Scalar.Id, initiatedId : OptionalArgument GraphCool.Scalar.Id, passedId : OptionalArgument GraphCool.Scalar.Id, poolId : OptionalArgument GraphCool.Scalar.Id, pool : OptionalArgument ChatpoolPool, recipientId : OptionalArgument GraphCool.Scalar.Id, messagesIds : OptionalArgument (List GraphCool.Scalar.Id), messages : OptionalArgument (List ChatmessagesMessage) }


{-| Type for the UserproposedChat input object.
-}
type UserproposedChat
    = UserproposedChat UserproposedChatRaw


{-| Encode a UserproposedChat into a value that can be used as an argument.
-}
encodeUserproposedChat : UserproposedChat -> Value
encodeUserproposedChat (UserproposedChat input) =
    Encode.maybeObject
        [ ( "dateState", Encode.enum GraphCool.Enum.DateState.toString |> Encode.optional input.dateState ), ( "canceledId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.canceledId ), ( "initiatedId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.initiatedId ), ( "passedId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.passedId ), ( "poolId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.poolId ), ( "pool", encodeChatpoolPool |> Encode.optional input.pool ), ( "recipientId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.recipientId ), ( "messagesIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.messagesIds ), ( "messages", (encodeChatmessagesMessage |> Encode.list) |> Encode.optional input.messages ) ]


{-| Type alias for the `UserrecipientChat` attributes. Note that this type
needs to use the `UserrecipientChat` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias UserrecipientChatRaw =
    { dateState : OptionalArgument GraphCool.Enum.DateState.DateState, canceledId : OptionalArgument GraphCool.Scalar.Id, initiatedId : OptionalArgument GraphCool.Scalar.Id, passedId : OptionalArgument GraphCool.Scalar.Id, poolId : OptionalArgument GraphCool.Scalar.Id, pool : OptionalArgument ChatpoolPool, proposedId : OptionalArgument GraphCool.Scalar.Id, messagesIds : OptionalArgument (List GraphCool.Scalar.Id), messages : OptionalArgument (List ChatmessagesMessage) }


{-| Type for the UserrecipientChat input object.
-}
type UserrecipientChat
    = UserrecipientChat UserrecipientChatRaw


{-| Encode a UserrecipientChat into a value that can be used as an argument.
-}
encodeUserrecipientChat : UserrecipientChat -> Value
encodeUserrecipientChat (UserrecipientChat input) =
    Encode.maybeObject
        [ ( "dateState", Encode.enum GraphCool.Enum.DateState.toString |> Encode.optional input.dateState ), ( "canceledId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.canceledId ), ( "initiatedId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.initiatedId ), ( "passedId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.passedId ), ( "poolId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.poolId ), ( "pool", encodeChatpoolPool |> Encode.optional input.pool ), ( "proposedId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.proposedId ), ( "messagesIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.messagesIds ), ( "messages", (encodeChatmessagesMessage |> Encode.list) |> Encode.optional input.messages ) ]


{-| Type alias for the `UsersentMessage` attributes. Note that this type
needs to use the `UsersentMessage` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias UsersentMessageRaw =
    { text : String, chatId : OptionalArgument GraphCool.Scalar.Id, chat : OptionalArgument MessagechatChat }


{-| Type for the UsersentMessage input object.
-}
type UsersentMessage
    = UsersentMessage UsersentMessageRaw


{-| Encode a UsersentMessage into a value that can be used as an argument.
-}
encodeUsersentMessage : UsersentMessage -> Value
encodeUsersentMessage (UsersentMessage input) =
    Encode.maybeObject
        [ ( "text", Encode.string input.text |> Just ), ( "chatId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.chatId ), ( "chat", encodeMessagechatChat |> Encode.optional input.chat ) ]


{-| Type alias for the `UserviewedEventPool` attributes. Note that this type
needs to use the `UserviewedEventPool` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias UserviewedEventPoolRaw =
    { seatGeekId : OptionalArgument String, eventId : OptionalArgument GraphCool.Scalar.Id, event : OptionalArgument PooleventEvent, attendingIds : OptionalArgument (List GraphCool.Scalar.Id), chatsIds : OptionalArgument (List GraphCool.Scalar.Id), chats : OptionalArgument (List PoolchatsChat), likedIds : OptionalArgument (List GraphCool.Scalar.Id), viewedIds : OptionalArgument (List GraphCool.Scalar.Id) }


{-| Type for the UserviewedEventPool input object.
-}
type UserviewedEventPool
    = UserviewedEventPool UserviewedEventPoolRaw


{-| Encode a UserviewedEventPool into a value that can be used as an argument.
-}
encodeUserviewedEventPool : UserviewedEventPool -> Value
encodeUserviewedEventPool (UserviewedEventPool input) =
    Encode.maybeObject
        [ ( "seatGeekId", Encode.string |> Encode.optional input.seatGeekId ), ( "eventId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.eventId ), ( "event", encodePooleventEvent |> Encode.optional input.event ), ( "attendingIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.attendingIds ), ( "chatsIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.chatsIds ), ( "chats", (encodePoolchatsChat |> Encode.list) |> Encode.optional input.chats ), ( "likedIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.likedIds ), ( "viewedIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.viewedIds ) ]


{-| Type alias for the `VenueFilter` attributes. Note that this type
needs to use the `VenueFilter` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias VenueFilterRaw =
    { and : OptionalArgument (List VenueFilter), or : OptionalArgument (List VenueFilter), createdAt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_not : OptionalArgument GraphCool.Scalar.DateTime, createdAt_in : OptionalArgument (List GraphCool.Scalar.DateTime), createdAt_not_in : OptionalArgument (List GraphCool.Scalar.DateTime), createdAt_lt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_lte : OptionalArgument GraphCool.Scalar.DateTime, createdAt_gt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_gte : OptionalArgument GraphCool.Scalar.DateTime, description : OptionalArgument String, description_not : OptionalArgument String, description_in : OptionalArgument (List String), description_not_in : OptionalArgument (List String), description_lt : OptionalArgument String, description_lte : OptionalArgument String, description_gt : OptionalArgument String, description_gte : OptionalArgument String, description_contains : OptionalArgument String, description_not_contains : OptionalArgument String, description_starts_with : OptionalArgument String, description_not_starts_with : OptionalArgument String, description_ends_with : OptionalArgument String, description_not_ends_with : OptionalArgument String, id : OptionalArgument GraphCool.Scalar.Id, id_not : OptionalArgument GraphCool.Scalar.Id, id_in : OptionalArgument (List GraphCool.Scalar.Id), id_not_in : OptionalArgument (List GraphCool.Scalar.Id), id_lt : OptionalArgument GraphCool.Scalar.Id, id_lte : OptionalArgument GraphCool.Scalar.Id, id_gt : OptionalArgument GraphCool.Scalar.Id, id_gte : OptionalArgument GraphCool.Scalar.Id, id_contains : OptionalArgument GraphCool.Scalar.Id, id_not_contains : OptionalArgument GraphCool.Scalar.Id, id_starts_with : OptionalArgument GraphCool.Scalar.Id, id_not_starts_with : OptionalArgument GraphCool.Scalar.Id, id_ends_with : OptionalArgument GraphCool.Scalar.Id, id_not_ends_with : OptionalArgument GraphCool.Scalar.Id, name : OptionalArgument String, name_not : OptionalArgument String, name_in : OptionalArgument (List String), name_not_in : OptionalArgument (List String), name_lt : OptionalArgument String, name_lte : OptionalArgument String, name_gt : OptionalArgument String, name_gte : OptionalArgument String, name_contains : OptionalArgument String, name_not_contains : OptionalArgument String, name_starts_with : OptionalArgument String, name_not_starts_with : OptionalArgument String, name_ends_with : OptionalArgument String, name_not_ends_with : OptionalArgument String, nameFull : OptionalArgument String, nameFull_not : OptionalArgument String, nameFull_in : OptionalArgument (List String), nameFull_not_in : OptionalArgument (List String), nameFull_lt : OptionalArgument String, nameFull_lte : OptionalArgument String, nameFull_gt : OptionalArgument String, nameFull_gte : OptionalArgument String, nameFull_contains : OptionalArgument String, nameFull_not_contains : OptionalArgument String, nameFull_starts_with : OptionalArgument String, nameFull_not_starts_with : OptionalArgument String, nameFull_ends_with : OptionalArgument String, nameFull_not_ends_with : OptionalArgument String, events_every : OptionalArgument EventFilter, events_some : OptionalArgument EventFilter, events_none : OptionalArgument EventFilter, hosts_every : OptionalArgument HostFilter, hosts_some : OptionalArgument HostFilter, hosts_none : OptionalArgument HostFilter, location : OptionalArgument LocationFilter }


{-| Type for the VenueFilter input object.
-}
type VenueFilter
    = VenueFilter VenueFilterRaw


{-| Encode a VenueFilter into a value that can be used as an argument.
-}
encodeVenueFilter : VenueFilter -> Value
encodeVenueFilter (VenueFilter input) =
    Encode.maybeObject
        [ ( "and", (encodeVenueFilter |> Encode.list) |> Encode.optional input.and ), ( "or", (encodeVenueFilter |> Encode.list) |> Encode.optional input.or ), ( "createdAt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "description", Encode.string |> Encode.optional input.description ), ( "description_not", Encode.string |> Encode.optional input.description_not ), ( "description_in", (Encode.string |> Encode.list) |> Encode.optional input.description_in ), ( "description_not_in", (Encode.string |> Encode.list) |> Encode.optional input.description_not_in ), ( "description_lt", Encode.string |> Encode.optional input.description_lt ), ( "description_lte", Encode.string |> Encode.optional input.description_lte ), ( "description_gt", Encode.string |> Encode.optional input.description_gt ), ( "description_gte", Encode.string |> Encode.optional input.description_gte ), ( "description_contains", Encode.string |> Encode.optional input.description_contains ), ( "description_not_contains", Encode.string |> Encode.optional input.description_not_contains ), ( "description_starts_with", Encode.string |> Encode.optional input.description_starts_with ), ( "description_not_starts_with", Encode.string |> Encode.optional input.description_not_starts_with ), ( "description_ends_with", Encode.string |> Encode.optional input.description_ends_with ), ( "description_not_ends_with", Encode.string |> Encode.optional input.description_not_ends_with ), ( "id", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "name", Encode.string |> Encode.optional input.name ), ( "name_not", Encode.string |> Encode.optional input.name_not ), ( "name_in", (Encode.string |> Encode.list) |> Encode.optional input.name_in ), ( "name_not_in", (Encode.string |> Encode.list) |> Encode.optional input.name_not_in ), ( "name_lt", Encode.string |> Encode.optional input.name_lt ), ( "name_lte", Encode.string |> Encode.optional input.name_lte ), ( "name_gt", Encode.string |> Encode.optional input.name_gt ), ( "name_gte", Encode.string |> Encode.optional input.name_gte ), ( "name_contains", Encode.string |> Encode.optional input.name_contains ), ( "name_not_contains", Encode.string |> Encode.optional input.name_not_contains ), ( "name_starts_with", Encode.string |> Encode.optional input.name_starts_with ), ( "name_not_starts_with", Encode.string |> Encode.optional input.name_not_starts_with ), ( "name_ends_with", Encode.string |> Encode.optional input.name_ends_with ), ( "name_not_ends_with", Encode.string |> Encode.optional input.name_not_ends_with ), ( "nameFull", Encode.string |> Encode.optional input.nameFull ), ( "nameFull_not", Encode.string |> Encode.optional input.nameFull_not ), ( "nameFull_in", (Encode.string |> Encode.list) |> Encode.optional input.nameFull_in ), ( "nameFull_not_in", (Encode.string |> Encode.list) |> Encode.optional input.nameFull_not_in ), ( "nameFull_lt", Encode.string |> Encode.optional input.nameFull_lt ), ( "nameFull_lte", Encode.string |> Encode.optional input.nameFull_lte ), ( "nameFull_gt", Encode.string |> Encode.optional input.nameFull_gt ), ( "nameFull_gte", Encode.string |> Encode.optional input.nameFull_gte ), ( "nameFull_contains", Encode.string |> Encode.optional input.nameFull_contains ), ( "nameFull_not_contains", Encode.string |> Encode.optional input.nameFull_not_contains ), ( "nameFull_starts_with", Encode.string |> Encode.optional input.nameFull_starts_with ), ( "nameFull_not_starts_with", Encode.string |> Encode.optional input.nameFull_not_starts_with ), ( "nameFull_ends_with", Encode.string |> Encode.optional input.nameFull_ends_with ), ( "nameFull_not_ends_with", Encode.string |> Encode.optional input.nameFull_not_ends_with ), ( "events_every", encodeEventFilter |> Encode.optional input.events_every ), ( "events_some", encodeEventFilter |> Encode.optional input.events_some ), ( "events_none", encodeEventFilter |> Encode.optional input.events_none ), ( "hosts_every", encodeHostFilter |> Encode.optional input.hosts_every ), ( "hosts_some", encodeHostFilter |> Encode.optional input.hosts_some ), ( "hosts_none", encodeHostFilter |> Encode.optional input.hosts_none ), ( "location", encodeLocationFilter |> Encode.optional input.location ) ]


{-| Type alias for the `VenueSubscriptionFilter` attributes. Note that this type
needs to use the `VenueSubscriptionFilter` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias VenueSubscriptionFilterRaw =
    { and : OptionalArgument (List VenueSubscriptionFilter), or : OptionalArgument (List VenueSubscriptionFilter), mutation_in : OptionalArgument (List GraphCool.Enum.ModelMutationType_.ModelMutationType_), updatedFields_contains : OptionalArgument String, updatedFields_contains_every : OptionalArgument (List String), updatedFields_contains_some : OptionalArgument (List String), node : OptionalArgument VenueSubscriptionFilterNode }


{-| Type for the VenueSubscriptionFilter input object.
-}
type VenueSubscriptionFilter
    = VenueSubscriptionFilter VenueSubscriptionFilterRaw


{-| Encode a VenueSubscriptionFilter into a value that can be used as an argument.
-}
encodeVenueSubscriptionFilter : VenueSubscriptionFilter -> Value
encodeVenueSubscriptionFilter (VenueSubscriptionFilter input) =
    Encode.maybeObject
        [ ( "and", (encodeVenueSubscriptionFilter |> Encode.list) |> Encode.optional input.and ), ( "or", (encodeVenueSubscriptionFilter |> Encode.list) |> Encode.optional input.or ), ( "mutation_in", (Encode.enum GraphCool.Enum.ModelMutationType_.toString |> Encode.list) |> Encode.optional input.mutation_in ), ( "updatedFields_contains", Encode.string |> Encode.optional input.updatedFields_contains ), ( "updatedFields_contains_every", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_every ), ( "updatedFields_contains_some", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_some ), ( "node", encodeVenueSubscriptionFilterNode |> Encode.optional input.node ) ]


{-| Type alias for the `VenueSubscriptionFilterNode` attributes. Note that this type
needs to use the `VenueSubscriptionFilterNode` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias VenueSubscriptionFilterNodeRaw =
    { createdAt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_not : OptionalArgument GraphCool.Scalar.DateTime, createdAt_in : OptionalArgument (List GraphCool.Scalar.DateTime), createdAt_not_in : OptionalArgument (List GraphCool.Scalar.DateTime), createdAt_lt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_lte : OptionalArgument GraphCool.Scalar.DateTime, createdAt_gt : OptionalArgument GraphCool.Scalar.DateTime, createdAt_gte : OptionalArgument GraphCool.Scalar.DateTime, description : OptionalArgument String, description_not : OptionalArgument String, description_in : OptionalArgument (List String), description_not_in : OptionalArgument (List String), description_lt : OptionalArgument String, description_lte : OptionalArgument String, description_gt : OptionalArgument String, description_gte : OptionalArgument String, description_contains : OptionalArgument String, description_not_contains : OptionalArgument String, description_starts_with : OptionalArgument String, description_not_starts_with : OptionalArgument String, description_ends_with : OptionalArgument String, description_not_ends_with : OptionalArgument String, id : OptionalArgument GraphCool.Scalar.Id, id_not : OptionalArgument GraphCool.Scalar.Id, id_in : OptionalArgument (List GraphCool.Scalar.Id), id_not_in : OptionalArgument (List GraphCool.Scalar.Id), id_lt : OptionalArgument GraphCool.Scalar.Id, id_lte : OptionalArgument GraphCool.Scalar.Id, id_gt : OptionalArgument GraphCool.Scalar.Id, id_gte : OptionalArgument GraphCool.Scalar.Id, id_contains : OptionalArgument GraphCool.Scalar.Id, id_not_contains : OptionalArgument GraphCool.Scalar.Id, id_starts_with : OptionalArgument GraphCool.Scalar.Id, id_not_starts_with : OptionalArgument GraphCool.Scalar.Id, id_ends_with : OptionalArgument GraphCool.Scalar.Id, id_not_ends_with : OptionalArgument GraphCool.Scalar.Id, name : OptionalArgument String, name_not : OptionalArgument String, name_in : OptionalArgument (List String), name_not_in : OptionalArgument (List String), name_lt : OptionalArgument String, name_lte : OptionalArgument String, name_gt : OptionalArgument String, name_gte : OptionalArgument String, name_contains : OptionalArgument String, name_not_contains : OptionalArgument String, name_starts_with : OptionalArgument String, name_not_starts_with : OptionalArgument String, name_ends_with : OptionalArgument String, name_not_ends_with : OptionalArgument String, nameFull : OptionalArgument String, nameFull_not : OptionalArgument String, nameFull_in : OptionalArgument (List String), nameFull_not_in : OptionalArgument (List String), nameFull_lt : OptionalArgument String, nameFull_lte : OptionalArgument String, nameFull_gt : OptionalArgument String, nameFull_gte : OptionalArgument String, nameFull_contains : OptionalArgument String, nameFull_not_contains : OptionalArgument String, nameFull_starts_with : OptionalArgument String, nameFull_not_starts_with : OptionalArgument String, nameFull_ends_with : OptionalArgument String, nameFull_not_ends_with : OptionalArgument String, events_every : OptionalArgument EventFilter, events_some : OptionalArgument EventFilter, events_none : OptionalArgument EventFilter, hosts_every : OptionalArgument HostFilter, hosts_some : OptionalArgument HostFilter, hosts_none : OptionalArgument HostFilter, location : OptionalArgument LocationFilter }


{-| Type for the VenueSubscriptionFilterNode input object.
-}
type VenueSubscriptionFilterNode
    = VenueSubscriptionFilterNode VenueSubscriptionFilterNodeRaw


{-| Encode a VenueSubscriptionFilterNode into a value that can be used as an argument.
-}
encodeVenueSubscriptionFilterNode : VenueSubscriptionFilterNode -> Value
encodeVenueSubscriptionFilterNode (VenueSubscriptionFilterNode input) =
    Encode.maybeObject
        [ ( "createdAt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "description", Encode.string |> Encode.optional input.description ), ( "description_not", Encode.string |> Encode.optional input.description_not ), ( "description_in", (Encode.string |> Encode.list) |> Encode.optional input.description_in ), ( "description_not_in", (Encode.string |> Encode.list) |> Encode.optional input.description_not_in ), ( "description_lt", Encode.string |> Encode.optional input.description_lt ), ( "description_lte", Encode.string |> Encode.optional input.description_lte ), ( "description_gt", Encode.string |> Encode.optional input.description_gt ), ( "description_gte", Encode.string |> Encode.optional input.description_gte ), ( "description_contains", Encode.string |> Encode.optional input.description_contains ), ( "description_not_contains", Encode.string |> Encode.optional input.description_not_contains ), ( "description_starts_with", Encode.string |> Encode.optional input.description_starts_with ), ( "description_not_starts_with", Encode.string |> Encode.optional input.description_not_starts_with ), ( "description_ends_with", Encode.string |> Encode.optional input.description_ends_with ), ( "description_not_ends_with", Encode.string |> Encode.optional input.description_not_ends_with ), ( "id", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "name", Encode.string |> Encode.optional input.name ), ( "name_not", Encode.string |> Encode.optional input.name_not ), ( "name_in", (Encode.string |> Encode.list) |> Encode.optional input.name_in ), ( "name_not_in", (Encode.string |> Encode.list) |> Encode.optional input.name_not_in ), ( "name_lt", Encode.string |> Encode.optional input.name_lt ), ( "name_lte", Encode.string |> Encode.optional input.name_lte ), ( "name_gt", Encode.string |> Encode.optional input.name_gt ), ( "name_gte", Encode.string |> Encode.optional input.name_gte ), ( "name_contains", Encode.string |> Encode.optional input.name_contains ), ( "name_not_contains", Encode.string |> Encode.optional input.name_not_contains ), ( "name_starts_with", Encode.string |> Encode.optional input.name_starts_with ), ( "name_not_starts_with", Encode.string |> Encode.optional input.name_not_starts_with ), ( "name_ends_with", Encode.string |> Encode.optional input.name_ends_with ), ( "name_not_ends_with", Encode.string |> Encode.optional input.name_not_ends_with ), ( "nameFull", Encode.string |> Encode.optional input.nameFull ), ( "nameFull_not", Encode.string |> Encode.optional input.nameFull_not ), ( "nameFull_in", (Encode.string |> Encode.list) |> Encode.optional input.nameFull_in ), ( "nameFull_not_in", (Encode.string |> Encode.list) |> Encode.optional input.nameFull_not_in ), ( "nameFull_lt", Encode.string |> Encode.optional input.nameFull_lt ), ( "nameFull_lte", Encode.string |> Encode.optional input.nameFull_lte ), ( "nameFull_gt", Encode.string |> Encode.optional input.nameFull_gt ), ( "nameFull_gte", Encode.string |> Encode.optional input.nameFull_gte ), ( "nameFull_contains", Encode.string |> Encode.optional input.nameFull_contains ), ( "nameFull_not_contains", Encode.string |> Encode.optional input.nameFull_not_contains ), ( "nameFull_starts_with", Encode.string |> Encode.optional input.nameFull_starts_with ), ( "nameFull_not_starts_with", Encode.string |> Encode.optional input.nameFull_not_starts_with ), ( "nameFull_ends_with", Encode.string |> Encode.optional input.nameFull_ends_with ), ( "nameFull_not_ends_with", Encode.string |> Encode.optional input.nameFull_not_ends_with ), ( "events_every", encodeEventFilter |> Encode.optional input.events_every ), ( "events_some", encodeEventFilter |> Encode.optional input.events_some ), ( "events_none", encodeEventFilter |> Encode.optional input.events_none ), ( "hosts_every", encodeHostFilter |> Encode.optional input.hosts_every ), ( "hosts_some", encodeHostFilter |> Encode.optional input.hosts_some ), ( "hosts_none", encodeHostFilter |> Encode.optional input.hosts_none ), ( "location", encodeLocationFilter |> Encode.optional input.location ) ]


{-| Type alias for the `VenueeventsEvent` attributes. Note that this type
needs to use the `VenueeventsEvent` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias VenueeventsEventRaw =
    { endsAt : OptionalArgument GraphCool.Scalar.DateTime, name : String, nameFull : OptionalArgument String, private : OptionalArgument Bool, startsAt : GraphCool.Scalar.DateTime, createdById : OptionalArgument GraphCool.Scalar.Id, poolId : OptionalArgument GraphCool.Scalar.Id, pool : OptionalArgument EventpoolPool, hostsIds : OptionalArgument (List GraphCool.Scalar.Id), hosts : OptionalArgument (List EventhostsHost), venuesIds : OptionalArgument (List GraphCool.Scalar.Id), venues : OptionalArgument (List EventvenuesVenue) }


{-| Type for the VenueeventsEvent input object.
-}
type VenueeventsEvent
    = VenueeventsEvent VenueeventsEventRaw


{-| Encode a VenueeventsEvent into a value that can be used as an argument.
-}
encodeVenueeventsEvent : VenueeventsEvent -> Value
encodeVenueeventsEvent (VenueeventsEvent input) =
    Encode.maybeObject
        [ ( "endsAt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.endsAt ), ( "name", Encode.string input.name |> Just ), ( "nameFull", Encode.string |> Encode.optional input.nameFull ), ( "private", Encode.bool |> Encode.optional input.private ), ( "startsAt", (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) input.startsAt |> Just ), ( "createdById", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.createdById ), ( "poolId", (\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.poolId ), ( "pool", encodeEventpoolPool |> Encode.optional input.pool ), ( "hostsIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.hostsIds ), ( "hosts", (encodeEventhostsHost |> Encode.list) |> Encode.optional input.hosts ), ( "venuesIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.venuesIds ), ( "venues", (encodeEventvenuesVenue |> Encode.list) |> Encode.optional input.venues ) ]


{-| Type alias for the `VenuehostsHost` attributes. Note that this type
needs to use the `VenuehostsHost` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias VenuehostsHostRaw =
    { description : OptionalArgument String, name : String, nameFull : OptionalArgument String, eventsIds : OptionalArgument (List GraphCool.Scalar.Id), events : OptionalArgument (List HosteventsEvent), usersIds : OptionalArgument (List GraphCool.Scalar.Id), venuesIds : OptionalArgument (List GraphCool.Scalar.Id), venues : OptionalArgument (List HostvenuesVenue) }


{-| Type for the VenuehostsHost input object.
-}
type VenuehostsHost
    = VenuehostsHost VenuehostsHostRaw


{-| Encode a VenuehostsHost into a value that can be used as an argument.
-}
encodeVenuehostsHost : VenuehostsHost -> Value
encodeVenuehostsHost (VenuehostsHost input) =
    Encode.maybeObject
        [ ( "description", Encode.string |> Encode.optional input.description ), ( "name", Encode.string input.name |> Just ), ( "nameFull", Encode.string |> Encode.optional input.nameFull ), ( "eventsIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.eventsIds ), ( "events", (encodeHosteventsEvent |> Encode.list) |> Encode.optional input.events ), ( "usersIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.usersIds ), ( "venuesIds", ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.venuesIds ), ( "venues", (encodeHostvenuesVenue |> Encode.list) |> Encode.optional input.venues ) ]


{-| Type for the VenuelocationLocation input object.
-}
type alias VenuelocationLocation =
    { address : OptionalArgument String, addressFull : OptionalArgument String, city : OptionalArgument String, country : OptionalArgument String, lat : Float, lon : Float, state : String, zip : OptionalArgument String }


{-| Encode a VenuelocationLocation into a value that can be used as an argument.
-}
encodeVenuelocationLocation : VenuelocationLocation -> Value
encodeVenuelocationLocation input =
    Encode.maybeObject
        [ ( "address", Encode.string |> Encode.optional input.address ), ( "addressFull", Encode.string |> Encode.optional input.addressFull ), ( "city", Encode.string |> Encode.optional input.city ), ( "country", Encode.string |> Encode.optional input.country ), ( "lat", Encode.float input.lat |> Just ), ( "lon", Encode.float input.lon |> Just ), ( "state", Encode.string input.state |> Just ), ( "zip", Encode.string |> Encode.optional input.zip ) ]
