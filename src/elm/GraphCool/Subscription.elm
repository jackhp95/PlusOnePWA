-- Do not manually edit this file, it was auto-generated by Graphqelm
-- https://github.com/dillonkearns/graphqelm


module GraphCool.Subscription exposing (..)

import GraphCool.InputObject
import GraphCool.Interface
import GraphCool.Object
import GraphCool.Scalar
import GraphCool.Union
import Graphqelm.Field as Field exposing (Field)
import Graphqelm.Internal.Builder.Argument as Argument exposing (Argument)
import Graphqelm.Internal.Builder.Object as Object
import Graphqelm.Internal.Encode as Encode exposing (Value)
import Graphqelm.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphqelm.OptionalArgument exposing (OptionalArgument(Absent))
import Graphqelm.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


{-| Select fields to build up a top-level mutation. The request can be sent with
functions from `Graphqelm.Http`.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) RootSubscription
selection constructor =
    Object.selection constructor


type alias ChatOptionalArguments =
    { filter : OptionalArgument GraphCool.InputObject.ChatSubscriptionFilter }


{-|

  - filter -

-}
chat : (ChatOptionalArguments -> ChatOptionalArguments) -> SelectionSet decodesTo GraphCool.Object.ChatSubscriptionPayload -> Field (Maybe decodesTo) RootSubscription
chat fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter GraphCool.InputObject.encodeChatSubscriptionFilter ]
                |> List.filterMap identity
    in
    Object.selectionField "Chat" optionalArgs object (identity >> Decode.nullable)


type alias EventOptionalArguments =
    { filter : OptionalArgument GraphCool.InputObject.EventSubscriptionFilter }


{-|

  - filter -

-}
event : (EventOptionalArguments -> EventOptionalArguments) -> SelectionSet decodesTo GraphCool.Object.EventSubscriptionPayload -> Field (Maybe decodesTo) RootSubscription
event fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter GraphCool.InputObject.encodeEventSubscriptionFilter ]
                |> List.filterMap identity
    in
    Object.selectionField "Event" optionalArgs object (identity >> Decode.nullable)


type alias FileOptionalArguments =
    { filter : OptionalArgument GraphCool.InputObject.FileSubscriptionFilter }


{-|

  - filter -

-}
file : (FileOptionalArguments -> FileOptionalArguments) -> SelectionSet decodesTo GraphCool.Object.FileSubscriptionPayload -> Field (Maybe decodesTo) RootSubscription
file fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter GraphCool.InputObject.encodeFileSubscriptionFilter ]
                |> List.filterMap identity
    in
    Object.selectionField "File" optionalArgs object (identity >> Decode.nullable)


type alias HostOptionalArguments =
    { filter : OptionalArgument GraphCool.InputObject.HostSubscriptionFilter }


{-|

  - filter -

-}
host : (HostOptionalArguments -> HostOptionalArguments) -> SelectionSet decodesTo GraphCool.Object.HostSubscriptionPayload -> Field (Maybe decodesTo) RootSubscription
host fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter GraphCool.InputObject.encodeHostSubscriptionFilter ]
                |> List.filterMap identity
    in
    Object.selectionField "Host" optionalArgs object (identity >> Decode.nullable)


type alias LocationOptionalArguments =
    { filter : OptionalArgument GraphCool.InputObject.LocationSubscriptionFilter }


{-|

  - filter -

-}
location : (LocationOptionalArguments -> LocationOptionalArguments) -> SelectionSet decodesTo GraphCool.Object.LocationSubscriptionPayload -> Field (Maybe decodesTo) RootSubscription
location fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter GraphCool.InputObject.encodeLocationSubscriptionFilter ]
                |> List.filterMap identity
    in
    Object.selectionField "Location" optionalArgs object (identity >> Decode.nullable)


type alias MessageOptionalArguments =
    { filter : OptionalArgument GraphCool.InputObject.MessageSubscriptionFilter }


{-|

  - filter -

-}
message : (MessageOptionalArguments -> MessageOptionalArguments) -> SelectionSet decodesTo GraphCool.Object.MessageSubscriptionPayload -> Field (Maybe decodesTo) RootSubscription
message fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter GraphCool.InputObject.encodeMessageSubscriptionFilter ]
                |> List.filterMap identity
    in
    Object.selectionField "Message" optionalArgs object (identity >> Decode.nullable)


type alias PoolOptionalArguments =
    { filter : OptionalArgument GraphCool.InputObject.PoolSubscriptionFilter }


{-|

  - filter -

-}
pool : (PoolOptionalArguments -> PoolOptionalArguments) -> SelectionSet decodesTo GraphCool.Object.PoolSubscriptionPayload -> Field (Maybe decodesTo) RootSubscription
pool fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter GraphCool.InputObject.encodePoolSubscriptionFilter ]
                |> List.filterMap identity
    in
    Object.selectionField "Pool" optionalArgs object (identity >> Decode.nullable)


type alias UserOptionalArguments =
    { filter : OptionalArgument GraphCool.InputObject.UserSubscriptionFilter }


{-|

  - filter -

-}
user : (UserOptionalArguments -> UserOptionalArguments) -> SelectionSet decodesTo GraphCool.Object.UserSubscriptionPayload -> Field (Maybe decodesTo) RootSubscription
user fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter GraphCool.InputObject.encodeUserSubscriptionFilter ]
                |> List.filterMap identity
    in
    Object.selectionField "User" optionalArgs object (identity >> Decode.nullable)


type alias VenueOptionalArguments =
    { filter : OptionalArgument GraphCool.InputObject.VenueSubscriptionFilter }


{-|

  - filter -

-}
venue : (VenueOptionalArguments -> VenueOptionalArguments) -> SelectionSet decodesTo GraphCool.Object.VenueSubscriptionPayload -> Field (Maybe decodesTo) RootSubscription
venue fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter GraphCool.InputObject.encodeVenueSubscriptionFilter ]
                |> List.filterMap identity
    in
    Object.selectionField "Venue" optionalArgs object (identity >> Decode.nullable)
