-- Do not manually edit this file, it was auto-generated by Graphqelm
-- https://github.com/dillonkearns/graphqelm


module GraphCool.Mutation exposing (..)

import GraphCool.Enum.DateState
import GraphCool.InputObject
import GraphCool.Interface
import GraphCool.Object
import GraphCool.Scalar
import GraphCool.Union
import Graphqelm.Field as Field exposing (Field)
import Graphqelm.Internal.Builder.Argument as Argument exposing (Argument)
import Graphqelm.Internal.Builder.Object as Object
import Graphqelm.Internal.Encode as Encode exposing (Value)
import Graphqelm.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphqelm.OptionalArgument exposing (OptionalArgument(Absent))
import Graphqelm.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


{-| Select fields to build up a top-level mutation. The request can be sent with
functions from `Graphqelm.Http`.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) RootMutation
selection constructor =
    Object.selection constructor


type alias CreateChatOptionalArguments =
    { dateState : OptionalArgument GraphCool.Enum.DateState.DateState, canceledId : OptionalArgument GraphCool.Scalar.Id, eventId : OptionalArgument GraphCool.Scalar.Id, event : OptionalArgument GraphCool.InputObject.ChateventEvent, initiatedId : OptionalArgument GraphCool.Scalar.Id, passedId : OptionalArgument GraphCool.Scalar.Id, poolId : OptionalArgument GraphCool.Scalar.Id, pool : OptionalArgument GraphCool.InputObject.ChatpoolPool, proposedId : OptionalArgument GraphCool.Scalar.Id, recipientId : OptionalArgument GraphCool.Scalar.Id, messagesIds : OptionalArgument (List GraphCool.Scalar.Id), messages : OptionalArgument (List GraphCool.InputObject.ChatmessagesMessage) }


createChat : (CreateChatOptionalArguments -> CreateChatOptionalArguments) -> SelectionSet decodesTo GraphCool.Object.Chat -> Field (Maybe decodesTo) RootMutation
createChat fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { dateState = Absent, canceledId = Absent, eventId = Absent, event = Absent, initiatedId = Absent, passedId = Absent, poolId = Absent, pool = Absent, proposedId = Absent, recipientId = Absent, messagesIds = Absent, messages = Absent }

        optionalArgs =
            [ Argument.optional "dateState" filledInOptionals.dateState (Encode.enum GraphCool.Enum.DateState.toString), Argument.optional "canceledId" filledInOptionals.canceledId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "eventId" filledInOptionals.eventId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "event" filledInOptionals.event GraphCool.InputObject.encodeChateventEvent, Argument.optional "initiatedId" filledInOptionals.initiatedId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "passedId" filledInOptionals.passedId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "poolId" filledInOptionals.poolId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "pool" filledInOptionals.pool GraphCool.InputObject.encodeChatpoolPool, Argument.optional "proposedId" filledInOptionals.proposedId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "recipientId" filledInOptionals.recipientId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "messagesIds" filledInOptionals.messagesIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "messages" filledInOptionals.messages (GraphCool.InputObject.encodeChatmessagesMessage |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionField "createChat" optionalArgs object (identity >> Decode.nullable)


type alias CreateEventOptionalArguments =
    { endsAt : OptionalArgument GraphCool.Scalar.DateTime, nameFull : OptionalArgument String, private : OptionalArgument Bool, createdById : OptionalArgument GraphCool.Scalar.Id, poolId : OptionalArgument GraphCool.Scalar.Id, pool : OptionalArgument GraphCool.InputObject.EventpoolPool, chatsIds : OptionalArgument (List GraphCool.Scalar.Id), chats : OptionalArgument (List GraphCool.InputObject.EventchatsChat), hostsIds : OptionalArgument (List GraphCool.Scalar.Id), hosts : OptionalArgument (List GraphCool.InputObject.EventhostsHost), venuesIds : OptionalArgument (List GraphCool.Scalar.Id), venues : OptionalArgument (List GraphCool.InputObject.EventvenuesVenue) }


type alias CreateEventRequiredArguments =
    { name : String, startsAt : GraphCool.Scalar.DateTime }


createEvent : (CreateEventOptionalArguments -> CreateEventOptionalArguments) -> CreateEventRequiredArguments -> SelectionSet decodesTo GraphCool.Object.Event -> Field (Maybe decodesTo) RootMutation
createEvent fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { endsAt = Absent, nameFull = Absent, private = Absent, createdById = Absent, poolId = Absent, pool = Absent, chatsIds = Absent, chats = Absent, hostsIds = Absent, hosts = Absent, venuesIds = Absent, venues = Absent }

        optionalArgs =
            [ Argument.optional "endsAt" filledInOptionals.endsAt (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw), Argument.optional "nameFull" filledInOptionals.nameFull Encode.string, Argument.optional "private" filledInOptionals.private Encode.bool, Argument.optional "createdById" filledInOptionals.createdById (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "poolId" filledInOptionals.poolId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "pool" filledInOptionals.pool GraphCool.InputObject.encodeEventpoolPool, Argument.optional "chatsIds" filledInOptionals.chatsIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "chats" filledInOptionals.chats (GraphCool.InputObject.encodeEventchatsChat |> Encode.list), Argument.optional "hostsIds" filledInOptionals.hostsIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "hosts" filledInOptionals.hosts (GraphCool.InputObject.encodeEventhostsHost |> Encode.list), Argument.optional "venuesIds" filledInOptionals.venuesIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "venues" filledInOptionals.venues (GraphCool.InputObject.encodeEventvenuesVenue |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionField "createEvent" (optionalArgs ++ [ Argument.required "name" requiredArgs.name Encode.string, Argument.required "startsAt" requiredArgs.startsAt (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw) ]) object (identity >> Decode.nullable)


type alias CreateFileRequiredArguments =
    { name : String }


createFile : CreateFileRequiredArguments -> SelectionSet decodesTo GraphCool.Object.File -> Field (Maybe decodesTo) RootMutation
createFile requiredArgs object =
    Object.selectionField "createFile" [ Argument.required "name" requiredArgs.name Encode.string ] object (identity >> Decode.nullable)


type alias CreateHostOptionalArguments =
    { description : OptionalArgument String, nameFull : OptionalArgument String, eventsIds : OptionalArgument (List GraphCool.Scalar.Id), events : OptionalArgument (List GraphCool.InputObject.HosteventsEvent), usersIds : OptionalArgument (List GraphCool.Scalar.Id), venuesIds : OptionalArgument (List GraphCool.Scalar.Id), venues : OptionalArgument (List GraphCool.InputObject.HostvenuesVenue) }


type alias CreateHostRequiredArguments =
    { name : String }


createHost : (CreateHostOptionalArguments -> CreateHostOptionalArguments) -> CreateHostRequiredArguments -> SelectionSet decodesTo GraphCool.Object.Host -> Field (Maybe decodesTo) RootMutation
createHost fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { description = Absent, nameFull = Absent, eventsIds = Absent, events = Absent, usersIds = Absent, venuesIds = Absent, venues = Absent }

        optionalArgs =
            [ Argument.optional "description" filledInOptionals.description Encode.string, Argument.optional "nameFull" filledInOptionals.nameFull Encode.string, Argument.optional "eventsIds" filledInOptionals.eventsIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "events" filledInOptionals.events (GraphCool.InputObject.encodeHosteventsEvent |> Encode.list), Argument.optional "usersIds" filledInOptionals.usersIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "venuesIds" filledInOptionals.venuesIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "venues" filledInOptionals.venues (GraphCool.InputObject.encodeHostvenuesVenue |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionField "createHost" (optionalArgs ++ [ Argument.required "name" requiredArgs.name Encode.string ]) object (identity >> Decode.nullable)


type alias CreateLocationOptionalArguments =
    { address : OptionalArgument String, addressFull : OptionalArgument String, city : OptionalArgument String, country : OptionalArgument String, zip : OptionalArgument String, venueId : OptionalArgument GraphCool.Scalar.Id, venue : OptionalArgument GraphCool.InputObject.LocationvenueVenue }


type alias CreateLocationRequiredArguments =
    { lat : Float, lon : Float, state : String }


createLocation : (CreateLocationOptionalArguments -> CreateLocationOptionalArguments) -> CreateLocationRequiredArguments -> SelectionSet decodesTo GraphCool.Object.Location -> Field (Maybe decodesTo) RootMutation
createLocation fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { address = Absent, addressFull = Absent, city = Absent, country = Absent, zip = Absent, venueId = Absent, venue = Absent }

        optionalArgs =
            [ Argument.optional "address" filledInOptionals.address Encode.string, Argument.optional "addressFull" filledInOptionals.addressFull Encode.string, Argument.optional "city" filledInOptionals.city Encode.string, Argument.optional "country" filledInOptionals.country Encode.string, Argument.optional "zip" filledInOptionals.zip Encode.string, Argument.optional "venueId" filledInOptionals.venueId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "venue" filledInOptionals.venue GraphCool.InputObject.encodeLocationvenueVenue ]
                |> List.filterMap identity
    in
    Object.selectionField "createLocation" (optionalArgs ++ [ Argument.required "lat" requiredArgs.lat Encode.float, Argument.required "lon" requiredArgs.lon Encode.float, Argument.required "state" requiredArgs.state Encode.string ]) object (identity >> Decode.nullable)


type alias CreateMessageOptionalArguments =
    { chatId : OptionalArgument GraphCool.Scalar.Id, chat : OptionalArgument GraphCool.InputObject.MessagechatChat, fromId : OptionalArgument GraphCool.Scalar.Id }


type alias CreateMessageRequiredArguments =
    { text : String }


createMessage : (CreateMessageOptionalArguments -> CreateMessageOptionalArguments) -> CreateMessageRequiredArguments -> SelectionSet decodesTo GraphCool.Object.Message -> Field (Maybe decodesTo) RootMutation
createMessage fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { chatId = Absent, chat = Absent, fromId = Absent }

        optionalArgs =
            [ Argument.optional "chatId" filledInOptionals.chatId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "chat" filledInOptionals.chat GraphCool.InputObject.encodeMessagechatChat, Argument.optional "fromId" filledInOptionals.fromId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ]
                |> List.filterMap identity
    in
    Object.selectionField "createMessage" (optionalArgs ++ [ Argument.required "text" requiredArgs.text Encode.string ]) object (identity >> Decode.nullable)


type alias CreatePoolOptionalArguments =
    { seatGeekId : OptionalArgument String, eventId : OptionalArgument GraphCool.Scalar.Id, event : OptionalArgument GraphCool.InputObject.PooleventEvent, attendingIds : OptionalArgument (List GraphCool.Scalar.Id), chatsIds : OptionalArgument (List GraphCool.Scalar.Id), chats : OptionalArgument (List GraphCool.InputObject.PoolchatsChat), likedIds : OptionalArgument (List GraphCool.Scalar.Id), viewedIds : OptionalArgument (List GraphCool.Scalar.Id) }


createPool : (CreatePoolOptionalArguments -> CreatePoolOptionalArguments) -> SelectionSet decodesTo GraphCool.Object.Pool -> Field (Maybe decodesTo) RootMutation
createPool fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { seatGeekId = Absent, eventId = Absent, event = Absent, attendingIds = Absent, chatsIds = Absent, chats = Absent, likedIds = Absent, viewedIds = Absent }

        optionalArgs =
            [ Argument.optional "seatGeekId" filledInOptionals.seatGeekId Encode.string, Argument.optional "eventId" filledInOptionals.eventId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "event" filledInOptionals.event GraphCool.InputObject.encodePooleventEvent, Argument.optional "attendingIds" filledInOptionals.attendingIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "chatsIds" filledInOptionals.chatsIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "chats" filledInOptionals.chats (GraphCool.InputObject.encodePoolchatsChat |> Encode.list), Argument.optional "likedIds" filledInOptionals.likedIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "viewedIds" filledInOptionals.viewedIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionField "createPool" optionalArgs object (identity >> Decode.nullable)


type alias CreateVenueOptionalArguments =
    { description : OptionalArgument String, locationId : OptionalArgument GraphCool.Scalar.Id, location : OptionalArgument GraphCool.InputObject.VenuelocationLocation, eventsIds : OptionalArgument (List GraphCool.Scalar.Id), events : OptionalArgument (List GraphCool.InputObject.VenueeventsEvent), hostsIds : OptionalArgument (List GraphCool.Scalar.Id), hosts : OptionalArgument (List GraphCool.InputObject.VenuehostsHost) }


type alias CreateVenueRequiredArguments =
    { name : String, nameFull : String }


createVenue : (CreateVenueOptionalArguments -> CreateVenueOptionalArguments) -> CreateVenueRequiredArguments -> SelectionSet decodesTo GraphCool.Object.Venue -> Field (Maybe decodesTo) RootMutation
createVenue fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { description = Absent, locationId = Absent, location = Absent, eventsIds = Absent, events = Absent, hostsIds = Absent, hosts = Absent }

        optionalArgs =
            [ Argument.optional "description" filledInOptionals.description Encode.string, Argument.optional "locationId" filledInOptionals.locationId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "location" filledInOptionals.location GraphCool.InputObject.encodeVenuelocationLocation, Argument.optional "eventsIds" filledInOptionals.eventsIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "events" filledInOptionals.events (GraphCool.InputObject.encodeVenueeventsEvent |> Encode.list), Argument.optional "hostsIds" filledInOptionals.hostsIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "hosts" filledInOptionals.hosts (GraphCool.InputObject.encodeVenuehostsHost |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionField "createVenue" (optionalArgs ++ [ Argument.required "name" requiredArgs.name Encode.string, Argument.required "nameFull" requiredArgs.nameFull Encode.string ]) object (identity >> Decode.nullable)


type alias UpdateChatOptionalArguments =
    { dateState : OptionalArgument GraphCool.Enum.DateState.DateState, canceledId : OptionalArgument GraphCool.Scalar.Id, eventId : OptionalArgument GraphCool.Scalar.Id, event : OptionalArgument GraphCool.InputObject.ChateventEvent, initiatedId : OptionalArgument GraphCool.Scalar.Id, passedId : OptionalArgument GraphCool.Scalar.Id, poolId : OptionalArgument GraphCool.Scalar.Id, pool : OptionalArgument GraphCool.InputObject.ChatpoolPool, proposedId : OptionalArgument GraphCool.Scalar.Id, recipientId : OptionalArgument GraphCool.Scalar.Id, messagesIds : OptionalArgument (List GraphCool.Scalar.Id), messages : OptionalArgument (List GraphCool.InputObject.ChatmessagesMessage) }


type alias UpdateChatRequiredArguments =
    { id : GraphCool.Scalar.Id }


updateChat : (UpdateChatOptionalArguments -> UpdateChatOptionalArguments) -> UpdateChatRequiredArguments -> SelectionSet decodesTo GraphCool.Object.Chat -> Field (Maybe decodesTo) RootMutation
updateChat fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { dateState = Absent, canceledId = Absent, eventId = Absent, event = Absent, initiatedId = Absent, passedId = Absent, poolId = Absent, pool = Absent, proposedId = Absent, recipientId = Absent, messagesIds = Absent, messages = Absent }

        optionalArgs =
            [ Argument.optional "dateState" filledInOptionals.dateState (Encode.enum GraphCool.Enum.DateState.toString), Argument.optional "canceledId" filledInOptionals.canceledId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "eventId" filledInOptionals.eventId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "event" filledInOptionals.event GraphCool.InputObject.encodeChateventEvent, Argument.optional "initiatedId" filledInOptionals.initiatedId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "passedId" filledInOptionals.passedId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "poolId" filledInOptionals.poolId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "pool" filledInOptionals.pool GraphCool.InputObject.encodeChatpoolPool, Argument.optional "proposedId" filledInOptionals.proposedId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "recipientId" filledInOptionals.recipientId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "messagesIds" filledInOptionals.messagesIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "messages" filledInOptionals.messages (GraphCool.InputObject.encodeChatmessagesMessage |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionField "updateChat" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ]) object (identity >> Decode.nullable)


type alias UpdateEventOptionalArguments =
    { endsAt : OptionalArgument GraphCool.Scalar.DateTime, name : OptionalArgument String, nameFull : OptionalArgument String, private : OptionalArgument Bool, startsAt : OptionalArgument GraphCool.Scalar.DateTime, createdById : OptionalArgument GraphCool.Scalar.Id, poolId : OptionalArgument GraphCool.Scalar.Id, pool : OptionalArgument GraphCool.InputObject.EventpoolPool, chatsIds : OptionalArgument (List GraphCool.Scalar.Id), chats : OptionalArgument (List GraphCool.InputObject.EventchatsChat), hostsIds : OptionalArgument (List GraphCool.Scalar.Id), hosts : OptionalArgument (List GraphCool.InputObject.EventhostsHost), venuesIds : OptionalArgument (List GraphCool.Scalar.Id), venues : OptionalArgument (List GraphCool.InputObject.EventvenuesVenue) }


type alias UpdateEventRequiredArguments =
    { id : GraphCool.Scalar.Id }


updateEvent : (UpdateEventOptionalArguments -> UpdateEventOptionalArguments) -> UpdateEventRequiredArguments -> SelectionSet decodesTo GraphCool.Object.Event -> Field (Maybe decodesTo) RootMutation
updateEvent fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { endsAt = Absent, name = Absent, nameFull = Absent, private = Absent, startsAt = Absent, createdById = Absent, poolId = Absent, pool = Absent, chatsIds = Absent, chats = Absent, hostsIds = Absent, hosts = Absent, venuesIds = Absent, venues = Absent }

        optionalArgs =
            [ Argument.optional "endsAt" filledInOptionals.endsAt (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw), Argument.optional "name" filledInOptionals.name Encode.string, Argument.optional "nameFull" filledInOptionals.nameFull Encode.string, Argument.optional "private" filledInOptionals.private Encode.bool, Argument.optional "startsAt" filledInOptionals.startsAt (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw), Argument.optional "createdById" filledInOptionals.createdById (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "poolId" filledInOptionals.poolId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "pool" filledInOptionals.pool GraphCool.InputObject.encodeEventpoolPool, Argument.optional "chatsIds" filledInOptionals.chatsIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "chats" filledInOptionals.chats (GraphCool.InputObject.encodeEventchatsChat |> Encode.list), Argument.optional "hostsIds" filledInOptionals.hostsIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "hosts" filledInOptionals.hosts (GraphCool.InputObject.encodeEventhostsHost |> Encode.list), Argument.optional "venuesIds" filledInOptionals.venuesIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "venues" filledInOptionals.venues (GraphCool.InputObject.encodeEventvenuesVenue |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionField "updateEvent" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ]) object (identity >> Decode.nullable)


type alias UpdateFileOptionalArguments =
    { name : OptionalArgument String }


type alias UpdateFileRequiredArguments =
    { id : GraphCool.Scalar.Id }


updateFile : (UpdateFileOptionalArguments -> UpdateFileOptionalArguments) -> UpdateFileRequiredArguments -> SelectionSet decodesTo GraphCool.Object.File -> Field (Maybe decodesTo) RootMutation
updateFile fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { name = Absent }

        optionalArgs =
            [ Argument.optional "name" filledInOptionals.name Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionField "updateFile" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ]) object (identity >> Decode.nullable)


type alias UpdateHostOptionalArguments =
    { description : OptionalArgument String, name : OptionalArgument String, nameFull : OptionalArgument String, eventsIds : OptionalArgument (List GraphCool.Scalar.Id), events : OptionalArgument (List GraphCool.InputObject.HosteventsEvent), usersIds : OptionalArgument (List GraphCool.Scalar.Id), venuesIds : OptionalArgument (List GraphCool.Scalar.Id), venues : OptionalArgument (List GraphCool.InputObject.HostvenuesVenue) }


type alias UpdateHostRequiredArguments =
    { id : GraphCool.Scalar.Id }


updateHost : (UpdateHostOptionalArguments -> UpdateHostOptionalArguments) -> UpdateHostRequiredArguments -> SelectionSet decodesTo GraphCool.Object.Host -> Field (Maybe decodesTo) RootMutation
updateHost fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { description = Absent, name = Absent, nameFull = Absent, eventsIds = Absent, events = Absent, usersIds = Absent, venuesIds = Absent, venues = Absent }

        optionalArgs =
            [ Argument.optional "description" filledInOptionals.description Encode.string, Argument.optional "name" filledInOptionals.name Encode.string, Argument.optional "nameFull" filledInOptionals.nameFull Encode.string, Argument.optional "eventsIds" filledInOptionals.eventsIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "events" filledInOptionals.events (GraphCool.InputObject.encodeHosteventsEvent |> Encode.list), Argument.optional "usersIds" filledInOptionals.usersIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "venuesIds" filledInOptionals.venuesIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "venues" filledInOptionals.venues (GraphCool.InputObject.encodeHostvenuesVenue |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionField "updateHost" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ]) object (identity >> Decode.nullable)


type alias UpdateLocationOptionalArguments =
    { address : OptionalArgument String, addressFull : OptionalArgument String, city : OptionalArgument String, country : OptionalArgument String, lat : OptionalArgument Float, lon : OptionalArgument Float, state : OptionalArgument String, zip : OptionalArgument String, venueId : OptionalArgument GraphCool.Scalar.Id, venue : OptionalArgument GraphCool.InputObject.LocationvenueVenue }


type alias UpdateLocationRequiredArguments =
    { id : GraphCool.Scalar.Id }


updateLocation : (UpdateLocationOptionalArguments -> UpdateLocationOptionalArguments) -> UpdateLocationRequiredArguments -> SelectionSet decodesTo GraphCool.Object.Location -> Field (Maybe decodesTo) RootMutation
updateLocation fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { address = Absent, addressFull = Absent, city = Absent, country = Absent, lat = Absent, lon = Absent, state = Absent, zip = Absent, venueId = Absent, venue = Absent }

        optionalArgs =
            [ Argument.optional "address" filledInOptionals.address Encode.string, Argument.optional "addressFull" filledInOptionals.addressFull Encode.string, Argument.optional "city" filledInOptionals.city Encode.string, Argument.optional "country" filledInOptionals.country Encode.string, Argument.optional "lat" filledInOptionals.lat Encode.float, Argument.optional "lon" filledInOptionals.lon Encode.float, Argument.optional "state" filledInOptionals.state Encode.string, Argument.optional "zip" filledInOptionals.zip Encode.string, Argument.optional "venueId" filledInOptionals.venueId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "venue" filledInOptionals.venue GraphCool.InputObject.encodeLocationvenueVenue ]
                |> List.filterMap identity
    in
    Object.selectionField "updateLocation" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ]) object (identity >> Decode.nullable)


type alias UpdateMessageOptionalArguments =
    { text : OptionalArgument String, chatId : OptionalArgument GraphCool.Scalar.Id, chat : OptionalArgument GraphCool.InputObject.MessagechatChat, fromId : OptionalArgument GraphCool.Scalar.Id }


type alias UpdateMessageRequiredArguments =
    { id : GraphCool.Scalar.Id }


updateMessage : (UpdateMessageOptionalArguments -> UpdateMessageOptionalArguments) -> UpdateMessageRequiredArguments -> SelectionSet decodesTo GraphCool.Object.Message -> Field (Maybe decodesTo) RootMutation
updateMessage fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { text = Absent, chatId = Absent, chat = Absent, fromId = Absent }

        optionalArgs =
            [ Argument.optional "text" filledInOptionals.text Encode.string, Argument.optional "chatId" filledInOptionals.chatId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "chat" filledInOptionals.chat GraphCool.InputObject.encodeMessagechatChat, Argument.optional "fromId" filledInOptionals.fromId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ]
                |> List.filterMap identity
    in
    Object.selectionField "updateMessage" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ]) object (identity >> Decode.nullable)


type alias UpdatePoolOptionalArguments =
    { seatGeekId : OptionalArgument String, eventId : OptionalArgument GraphCool.Scalar.Id, event : OptionalArgument GraphCool.InputObject.PooleventEvent, attendingIds : OptionalArgument (List GraphCool.Scalar.Id), chatsIds : OptionalArgument (List GraphCool.Scalar.Id), chats : OptionalArgument (List GraphCool.InputObject.PoolchatsChat), likedIds : OptionalArgument (List GraphCool.Scalar.Id), viewedIds : OptionalArgument (List GraphCool.Scalar.Id) }


type alias UpdatePoolRequiredArguments =
    { id : GraphCool.Scalar.Id }


updatePool : (UpdatePoolOptionalArguments -> UpdatePoolOptionalArguments) -> UpdatePoolRequiredArguments -> SelectionSet decodesTo GraphCool.Object.Pool -> Field (Maybe decodesTo) RootMutation
updatePool fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { seatGeekId = Absent, eventId = Absent, event = Absent, attendingIds = Absent, chatsIds = Absent, chats = Absent, likedIds = Absent, viewedIds = Absent }

        optionalArgs =
            [ Argument.optional "seatGeekId" filledInOptionals.seatGeekId Encode.string, Argument.optional "eventId" filledInOptionals.eventId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "event" filledInOptionals.event GraphCool.InputObject.encodePooleventEvent, Argument.optional "attendingIds" filledInOptionals.attendingIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "chatsIds" filledInOptionals.chatsIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "chats" filledInOptionals.chats (GraphCool.InputObject.encodePoolchatsChat |> Encode.list), Argument.optional "likedIds" filledInOptionals.likedIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "viewedIds" filledInOptionals.viewedIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionField "updatePool" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ]) object (identity >> Decode.nullable)


type alias UpdateUserOptionalArguments =
    { bio : OptionalArgument String, birthday : OptionalArgument GraphCool.Scalar.DateTime, name : OptionalArgument String, nameFull : OptionalArgument String, attendingEventIds : OptionalArgument (List GraphCool.Scalar.Id), attendingEvent : OptionalArgument (List GraphCool.InputObject.UserattendingEventPool), createdEventsIds : OptionalArgument (List GraphCool.Scalar.Id), createdEvents : OptionalArgument (List GraphCool.InputObject.UsercreatedEventsEvent), datesCanceledIds : OptionalArgument (List GraphCool.Scalar.Id), datesCanceled : OptionalArgument (List GraphCool.InputObject.UserdatesCanceledChat), hostsIds : OptionalArgument (List GraphCool.Scalar.Id), hosts : OptionalArgument (List GraphCool.InputObject.UserhostsHost), initiatedIds : OptionalArgument (List GraphCool.Scalar.Id), initiated : OptionalArgument (List GraphCool.InputObject.UserinitiatedChat), likedEventIds : OptionalArgument (List GraphCool.Scalar.Id), likedEvent : OptionalArgument (List GraphCool.InputObject.UserlikedEventPool), passedIds : OptionalArgument (List GraphCool.Scalar.Id), passed : OptionalArgument (List GraphCool.InputObject.UserpassedChat), proposedIds : OptionalArgument (List GraphCool.Scalar.Id), proposed : OptionalArgument (List GraphCool.InputObject.UserproposedChat), recipientIds : OptionalArgument (List GraphCool.Scalar.Id), recipient : OptionalArgument (List GraphCool.InputObject.UserrecipientChat), sentIds : OptionalArgument (List GraphCool.Scalar.Id), sent : OptionalArgument (List GraphCool.InputObject.UsersentMessage), viewedEventIds : OptionalArgument (List GraphCool.Scalar.Id), viewedEvent : OptionalArgument (List GraphCool.InputObject.UserviewedEventPool) }


type alias UpdateUserRequiredArguments =
    { id : GraphCool.Scalar.Id }


updateUser : (UpdateUserOptionalArguments -> UpdateUserOptionalArguments) -> UpdateUserRequiredArguments -> SelectionSet decodesTo GraphCool.Object.User -> Field (Maybe decodesTo) RootMutation
updateUser fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { bio = Absent, birthday = Absent, name = Absent, nameFull = Absent, attendingEventIds = Absent, attendingEvent = Absent, createdEventsIds = Absent, createdEvents = Absent, datesCanceledIds = Absent, datesCanceled = Absent, hostsIds = Absent, hosts = Absent, initiatedIds = Absent, initiated = Absent, likedEventIds = Absent, likedEvent = Absent, passedIds = Absent, passed = Absent, proposedIds = Absent, proposed = Absent, recipientIds = Absent, recipient = Absent, sentIds = Absent, sent = Absent, viewedEventIds = Absent, viewedEvent = Absent }

        optionalArgs =
            [ Argument.optional "bio" filledInOptionals.bio Encode.string, Argument.optional "birthday" filledInOptionals.birthday (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw), Argument.optional "name" filledInOptionals.name Encode.string, Argument.optional "nameFull" filledInOptionals.nameFull Encode.string, Argument.optional "attendingEventIds" filledInOptionals.attendingEventIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "attendingEvent" filledInOptionals.attendingEvent (GraphCool.InputObject.encodeUserattendingEventPool |> Encode.list), Argument.optional "createdEventsIds" filledInOptionals.createdEventsIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "createdEvents" filledInOptionals.createdEvents (GraphCool.InputObject.encodeUsercreatedEventsEvent |> Encode.list), Argument.optional "datesCanceledIds" filledInOptionals.datesCanceledIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "datesCanceled" filledInOptionals.datesCanceled (GraphCool.InputObject.encodeUserdatesCanceledChat |> Encode.list), Argument.optional "hostsIds" filledInOptionals.hostsIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "hosts" filledInOptionals.hosts (GraphCool.InputObject.encodeUserhostsHost |> Encode.list), Argument.optional "initiatedIds" filledInOptionals.initiatedIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "initiated" filledInOptionals.initiated (GraphCool.InputObject.encodeUserinitiatedChat |> Encode.list), Argument.optional "likedEventIds" filledInOptionals.likedEventIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "likedEvent" filledInOptionals.likedEvent (GraphCool.InputObject.encodeUserlikedEventPool |> Encode.list), Argument.optional "passedIds" filledInOptionals.passedIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "passed" filledInOptionals.passed (GraphCool.InputObject.encodeUserpassedChat |> Encode.list), Argument.optional "proposedIds" filledInOptionals.proposedIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "proposed" filledInOptionals.proposed (GraphCool.InputObject.encodeUserproposedChat |> Encode.list), Argument.optional "recipientIds" filledInOptionals.recipientIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "recipient" filledInOptionals.recipient (GraphCool.InputObject.encodeUserrecipientChat |> Encode.list), Argument.optional "sentIds" filledInOptionals.sentIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "sent" filledInOptionals.sent (GraphCool.InputObject.encodeUsersentMessage |> Encode.list), Argument.optional "viewedEventIds" filledInOptionals.viewedEventIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "viewedEvent" filledInOptionals.viewedEvent (GraphCool.InputObject.encodeUserviewedEventPool |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionField "updateUser" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ]) object (identity >> Decode.nullable)


type alias UpdateVenueOptionalArguments =
    { description : OptionalArgument String, name : OptionalArgument String, nameFull : OptionalArgument String, locationId : OptionalArgument GraphCool.Scalar.Id, location : OptionalArgument GraphCool.InputObject.VenuelocationLocation, eventsIds : OptionalArgument (List GraphCool.Scalar.Id), events : OptionalArgument (List GraphCool.InputObject.VenueeventsEvent), hostsIds : OptionalArgument (List GraphCool.Scalar.Id), hosts : OptionalArgument (List GraphCool.InputObject.VenuehostsHost) }


type alias UpdateVenueRequiredArguments =
    { id : GraphCool.Scalar.Id }


updateVenue : (UpdateVenueOptionalArguments -> UpdateVenueOptionalArguments) -> UpdateVenueRequiredArguments -> SelectionSet decodesTo GraphCool.Object.Venue -> Field (Maybe decodesTo) RootMutation
updateVenue fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { description = Absent, name = Absent, nameFull = Absent, locationId = Absent, location = Absent, eventsIds = Absent, events = Absent, hostsIds = Absent, hosts = Absent }

        optionalArgs =
            [ Argument.optional "description" filledInOptionals.description Encode.string, Argument.optional "name" filledInOptionals.name Encode.string, Argument.optional "nameFull" filledInOptionals.nameFull Encode.string, Argument.optional "locationId" filledInOptionals.locationId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.optional "location" filledInOptionals.location GraphCool.InputObject.encodeVenuelocationLocation, Argument.optional "eventsIds" filledInOptionals.eventsIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "events" filledInOptionals.events (GraphCool.InputObject.encodeVenueeventsEvent |> Encode.list), Argument.optional "hostsIds" filledInOptionals.hostsIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "hosts" filledInOptionals.hosts (GraphCool.InputObject.encodeVenuehostsHost |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionField "updateVenue" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ]) object (identity >> Decode.nullable)


type alias UpdateOrCreateChatRequiredArguments =
    { update : GraphCool.InputObject.UpdateChat, create : GraphCool.InputObject.CreateChat }


updateOrCreateChat : UpdateOrCreateChatRequiredArguments -> SelectionSet decodesTo GraphCool.Object.Chat -> Field (Maybe decodesTo) RootMutation
updateOrCreateChat requiredArgs object =
    Object.selectionField "updateOrCreateChat" [ Argument.required "update" requiredArgs.update GraphCool.InputObject.encodeUpdateChat, Argument.required "create" requiredArgs.create GraphCool.InputObject.encodeCreateChat ] object (identity >> Decode.nullable)


type alias UpdateOrCreateEventRequiredArguments =
    { update : GraphCool.InputObject.UpdateEvent, create : GraphCool.InputObject.CreateEvent }


updateOrCreateEvent : UpdateOrCreateEventRequiredArguments -> SelectionSet decodesTo GraphCool.Object.Event -> Field (Maybe decodesTo) RootMutation
updateOrCreateEvent requiredArgs object =
    Object.selectionField "updateOrCreateEvent" [ Argument.required "update" requiredArgs.update GraphCool.InputObject.encodeUpdateEvent, Argument.required "create" requiredArgs.create GraphCool.InputObject.encodeCreateEvent ] object (identity >> Decode.nullable)


type alias UpdateOrCreateFileRequiredArguments =
    { update : GraphCool.InputObject.UpdateFile, create : GraphCool.InputObject.CreateFile }


updateOrCreateFile : UpdateOrCreateFileRequiredArguments -> SelectionSet decodesTo GraphCool.Object.File -> Field (Maybe decodesTo) RootMutation
updateOrCreateFile requiredArgs object =
    Object.selectionField "updateOrCreateFile" [ Argument.required "update" requiredArgs.update GraphCool.InputObject.encodeUpdateFile, Argument.required "create" requiredArgs.create GraphCool.InputObject.encodeCreateFile ] object (identity >> Decode.nullable)


type alias UpdateOrCreateHostRequiredArguments =
    { update : GraphCool.InputObject.UpdateHost, create : GraphCool.InputObject.CreateHost }


updateOrCreateHost : UpdateOrCreateHostRequiredArguments -> SelectionSet decodesTo GraphCool.Object.Host -> Field (Maybe decodesTo) RootMutation
updateOrCreateHost requiredArgs object =
    Object.selectionField "updateOrCreateHost" [ Argument.required "update" requiredArgs.update GraphCool.InputObject.encodeUpdateHost, Argument.required "create" requiredArgs.create GraphCool.InputObject.encodeCreateHost ] object (identity >> Decode.nullable)


type alias UpdateOrCreateLocationRequiredArguments =
    { update : GraphCool.InputObject.UpdateLocation, create : GraphCool.InputObject.CreateLocation }


updateOrCreateLocation : UpdateOrCreateLocationRequiredArguments -> SelectionSet decodesTo GraphCool.Object.Location -> Field (Maybe decodesTo) RootMutation
updateOrCreateLocation requiredArgs object =
    Object.selectionField "updateOrCreateLocation" [ Argument.required "update" requiredArgs.update GraphCool.InputObject.encodeUpdateLocation, Argument.required "create" requiredArgs.create GraphCool.InputObject.encodeCreateLocation ] object (identity >> Decode.nullable)


type alias UpdateOrCreateMessageRequiredArguments =
    { update : GraphCool.InputObject.UpdateMessage, create : GraphCool.InputObject.CreateMessage }


updateOrCreateMessage : UpdateOrCreateMessageRequiredArguments -> SelectionSet decodesTo GraphCool.Object.Message -> Field (Maybe decodesTo) RootMutation
updateOrCreateMessage requiredArgs object =
    Object.selectionField "updateOrCreateMessage" [ Argument.required "update" requiredArgs.update GraphCool.InputObject.encodeUpdateMessage, Argument.required "create" requiredArgs.create GraphCool.InputObject.encodeCreateMessage ] object (identity >> Decode.nullable)


type alias UpdateOrCreatePoolRequiredArguments =
    { update : GraphCool.InputObject.UpdatePool, create : GraphCool.InputObject.CreatePool }


updateOrCreatePool : UpdateOrCreatePoolRequiredArguments -> SelectionSet decodesTo GraphCool.Object.Pool -> Field (Maybe decodesTo) RootMutation
updateOrCreatePool requiredArgs object =
    Object.selectionField "updateOrCreatePool" [ Argument.required "update" requiredArgs.update GraphCool.InputObject.encodeUpdatePool, Argument.required "create" requiredArgs.create GraphCool.InputObject.encodeCreatePool ] object (identity >> Decode.nullable)


type alias UpdateOrCreateUserRequiredArguments =
    { update : GraphCool.InputObject.UpdateUser, create : GraphCool.InputObject.CreateUser }


updateOrCreateUser : UpdateOrCreateUserRequiredArguments -> SelectionSet decodesTo GraphCool.Object.User -> Field (Maybe decodesTo) RootMutation
updateOrCreateUser requiredArgs object =
    Object.selectionField "updateOrCreateUser" [ Argument.required "update" requiredArgs.update GraphCool.InputObject.encodeUpdateUser, Argument.required "create" requiredArgs.create GraphCool.InputObject.encodeCreateUser ] object (identity >> Decode.nullable)


type alias UpdateOrCreateVenueRequiredArguments =
    { update : GraphCool.InputObject.UpdateVenue, create : GraphCool.InputObject.CreateVenue }


updateOrCreateVenue : UpdateOrCreateVenueRequiredArguments -> SelectionSet decodesTo GraphCool.Object.Venue -> Field (Maybe decodesTo) RootMutation
updateOrCreateVenue requiredArgs object =
    Object.selectionField "updateOrCreateVenue" [ Argument.required "update" requiredArgs.update GraphCool.InputObject.encodeUpdateVenue, Argument.required "create" requiredArgs.create GraphCool.InputObject.encodeCreateVenue ] object (identity >> Decode.nullable)


type alias DeleteChatRequiredArguments =
    { id : GraphCool.Scalar.Id }


deleteChat : DeleteChatRequiredArguments -> SelectionSet decodesTo GraphCool.Object.Chat -> Field (Maybe decodesTo) RootMutation
deleteChat requiredArgs object =
    Object.selectionField "deleteChat" [ Argument.required "id" requiredArgs.id (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias DeleteEventRequiredArguments =
    { id : GraphCool.Scalar.Id }


deleteEvent : DeleteEventRequiredArguments -> SelectionSet decodesTo GraphCool.Object.Event -> Field (Maybe decodesTo) RootMutation
deleteEvent requiredArgs object =
    Object.selectionField "deleteEvent" [ Argument.required "id" requiredArgs.id (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias DeleteFileRequiredArguments =
    { id : GraphCool.Scalar.Id }


deleteFile : DeleteFileRequiredArguments -> SelectionSet decodesTo GraphCool.Object.File -> Field (Maybe decodesTo) RootMutation
deleteFile requiredArgs object =
    Object.selectionField "deleteFile" [ Argument.required "id" requiredArgs.id (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias DeleteHostRequiredArguments =
    { id : GraphCool.Scalar.Id }


deleteHost : DeleteHostRequiredArguments -> SelectionSet decodesTo GraphCool.Object.Host -> Field (Maybe decodesTo) RootMutation
deleteHost requiredArgs object =
    Object.selectionField "deleteHost" [ Argument.required "id" requiredArgs.id (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias DeleteLocationRequiredArguments =
    { id : GraphCool.Scalar.Id }


deleteLocation : DeleteLocationRequiredArguments -> SelectionSet decodesTo GraphCool.Object.Location -> Field (Maybe decodesTo) RootMutation
deleteLocation requiredArgs object =
    Object.selectionField "deleteLocation" [ Argument.required "id" requiredArgs.id (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias DeleteMessageRequiredArguments =
    { id : GraphCool.Scalar.Id }


deleteMessage : DeleteMessageRequiredArguments -> SelectionSet decodesTo GraphCool.Object.Message -> Field (Maybe decodesTo) RootMutation
deleteMessage requiredArgs object =
    Object.selectionField "deleteMessage" [ Argument.required "id" requiredArgs.id (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias DeletePoolRequiredArguments =
    { id : GraphCool.Scalar.Id }


deletePool : DeletePoolRequiredArguments -> SelectionSet decodesTo GraphCool.Object.Pool -> Field (Maybe decodesTo) RootMutation
deletePool requiredArgs object =
    Object.selectionField "deletePool" [ Argument.required "id" requiredArgs.id (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias DeleteUserRequiredArguments =
    { id : GraphCool.Scalar.Id }


deleteUser : DeleteUserRequiredArguments -> SelectionSet decodesTo GraphCool.Object.User -> Field (Maybe decodesTo) RootMutation
deleteUser requiredArgs object =
    Object.selectionField "deleteUser" [ Argument.required "id" requiredArgs.id (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias DeleteVenueRequiredArguments =
    { id : GraphCool.Scalar.Id }


deleteVenue : DeleteVenueRequiredArguments -> SelectionSet decodesTo GraphCool.Object.Venue -> Field (Maybe decodesTo) RootMutation
deleteVenue requiredArgs object =
    Object.selectionField "deleteVenue" [ Argument.required "id" requiredArgs.id (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias SetEventOnPoolRequiredArguments =
    { poolPoolId : GraphCool.Scalar.Id, eventEventId : GraphCool.Scalar.Id }


setEventOnPool : SetEventOnPoolRequiredArguments -> SelectionSet decodesTo GraphCool.Object.SetEventOnPoolPayload -> Field (Maybe decodesTo) RootMutation
setEventOnPool requiredArgs object =
    Object.selectionField "setEventOnPool" [ Argument.required "poolPoolId" requiredArgs.poolPoolId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "eventEventId" requiredArgs.eventEventId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias SetVenueOnLocationRequiredArguments =
    { venueVenueId : GraphCool.Scalar.Id, locationLocationId : GraphCool.Scalar.Id }


setVenueOnLocation : SetVenueOnLocationRequiredArguments -> SelectionSet decodesTo GraphCool.Object.SetVenueOnLocationPayload -> Field (Maybe decodesTo) RootMutation
setVenueOnLocation requiredArgs object =
    Object.selectionField "setVenueOnLocation" [ Argument.required "venueVenueId" requiredArgs.venueVenueId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "locationLocationId" requiredArgs.locationLocationId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias UnsetVenueOnLocationRequiredArguments =
    { venueVenueId : GraphCool.Scalar.Id, locationLocationId : GraphCool.Scalar.Id }


unsetVenueOnLocation : UnsetVenueOnLocationRequiredArguments -> SelectionSet decodesTo GraphCool.Object.UnsetVenueOnLocationPayload -> Field (Maybe decodesTo) RootMutation
unsetVenueOnLocation requiredArgs object =
    Object.selectionField "unsetVenueOnLocation" [ Argument.required "venueVenueId" requiredArgs.venueVenueId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "locationLocationId" requiredArgs.locationLocationId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias AddToAttendingEventRequiredArguments =
    { attendingUserId : GraphCool.Scalar.Id, attendingEventPoolId : GraphCool.Scalar.Id }


addToAttendingEvent : AddToAttendingEventRequiredArguments -> SelectionSet decodesTo GraphCool.Object.AddToAttendingEventPayload -> Field (Maybe decodesTo) RootMutation
addToAttendingEvent requiredArgs object =
    Object.selectionField "addToAttendingEvent" [ Argument.required "attendingUserId" requiredArgs.attendingUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "attendingEventPoolId" requiredArgs.attendingEventPoolId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias AddToChatInitByRequiredArguments =
    { initiatedUserId : GraphCool.Scalar.Id, initiatedChatId : GraphCool.Scalar.Id }


addToChatInitBy : AddToChatInitByRequiredArguments -> SelectionSet decodesTo GraphCool.Object.AddToChatInitByPayload -> Field (Maybe decodesTo) RootMutation
addToChatInitBy requiredArgs object =
    Object.selectionField "addToChatInitBy" [ Argument.required "initiatedUserId" requiredArgs.initiatedUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "initiatedChatId" requiredArgs.initiatedChatId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias AddToChatOfEventRequiredArguments =
    { eventEventId : GraphCool.Scalar.Id, chatsChatId : GraphCool.Scalar.Id }


addToChatOfEvent : AddToChatOfEventRequiredArguments -> SelectionSet decodesTo GraphCool.Object.AddToChatOfEventPayload -> Field (Maybe decodesTo) RootMutation
addToChatOfEvent requiredArgs object =
    Object.selectionField "addToChatOfEvent" [ Argument.required "eventEventId" requiredArgs.eventEventId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "chatsChatId" requiredArgs.chatsChatId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias AddToChatPassedRequiredArguments =
    { passedUserId : GraphCool.Scalar.Id, passedChatId : GraphCool.Scalar.Id }


addToChatPassed : AddToChatPassedRequiredArguments -> SelectionSet decodesTo GraphCool.Object.AddToChatPassedPayload -> Field (Maybe decodesTo) RootMutation
addToChatPassed requiredArgs object =
    Object.selectionField "addToChatPassed" [ Argument.required "passedUserId" requiredArgs.passedUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "passedChatId" requiredArgs.passedChatId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias AddToChatProposedRequiredArguments =
    { proposedUserId : GraphCool.Scalar.Id, proposedChatId : GraphCool.Scalar.Id }


addToChatProposed : AddToChatProposedRequiredArguments -> SelectionSet decodesTo GraphCool.Object.AddToChatProposedPayload -> Field (Maybe decodesTo) RootMutation
addToChatProposed requiredArgs object =
    Object.selectionField "addToChatProposed" [ Argument.required "proposedUserId" requiredArgs.proposedUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "proposedChatId" requiredArgs.proposedChatId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias AddToDateCanceledRequiredArguments =
    { canceledUserId : GraphCool.Scalar.Id, datesCanceledChatId : GraphCool.Scalar.Id }


addToDateCanceled : AddToDateCanceledRequiredArguments -> SelectionSet decodesTo GraphCool.Object.AddToDateCanceledPayload -> Field (Maybe decodesTo) RootMutation
addToDateCanceled requiredArgs object =
    Object.selectionField "addToDateCanceled" [ Argument.required "canceledUserId" requiredArgs.canceledUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "datesCanceledChatId" requiredArgs.datesCanceledChatId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias AddToEventCreatorRequiredArguments =
    { createdByUserId : GraphCool.Scalar.Id, createdEventsEventId : GraphCool.Scalar.Id }


addToEventCreator : AddToEventCreatorRequiredArguments -> SelectionSet decodesTo GraphCool.Object.AddToEventCreatorPayload -> Field (Maybe decodesTo) RootMutation
addToEventCreator requiredArgs object =
    Object.selectionField "addToEventCreator" [ Argument.required "createdByUserId" requiredArgs.createdByUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "createdEventsEventId" requiredArgs.createdEventsEventId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias AddToHostOfEventRequiredArguments =
    { hostsHostId : GraphCool.Scalar.Id, eventsEventId : GraphCool.Scalar.Id }


addToHostOfEvent : AddToHostOfEventRequiredArguments -> SelectionSet decodesTo GraphCool.Object.AddToHostOfEventPayload -> Field (Maybe decodesTo) RootMutation
addToHostOfEvent requiredArgs object =
    Object.selectionField "addToHostOfEvent" [ Argument.required "hostsHostId" requiredArgs.hostsHostId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "eventsEventId" requiredArgs.eventsEventId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias AddToHostOfVenueRequiredArguments =
    { venuesVenueId : GraphCool.Scalar.Id, hostsHostId : GraphCool.Scalar.Id }


addToHostOfVenue : AddToHostOfVenueRequiredArguments -> SelectionSet decodesTo GraphCool.Object.AddToHostOfVenuePayload -> Field (Maybe decodesTo) RootMutation
addToHostOfVenue requiredArgs object =
    Object.selectionField "addToHostOfVenue" [ Argument.required "venuesVenueId" requiredArgs.venuesVenueId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "hostsHostId" requiredArgs.hostsHostId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias AddToLikedEventRequiredArguments =
    { likedUserId : GraphCool.Scalar.Id, likedEventPoolId : GraphCool.Scalar.Id }


addToLikedEvent : AddToLikedEventRequiredArguments -> SelectionSet decodesTo GraphCool.Object.AddToLikedEventPayload -> Field (Maybe decodesTo) RootMutation
addToLikedEvent requiredArgs object =
    Object.selectionField "addToLikedEvent" [ Argument.required "likedUserId" requiredArgs.likedUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "likedEventPoolId" requiredArgs.likedEventPoolId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias AddToMessageFromUserRequiredArguments =
    { fromUserId : GraphCool.Scalar.Id, sentMessageId : GraphCool.Scalar.Id }


addToMessageFromUser : AddToMessageFromUserRequiredArguments -> SelectionSet decodesTo GraphCool.Object.AddToMessageFromUserPayload -> Field (Maybe decodesTo) RootMutation
addToMessageFromUser requiredArgs object =
    Object.selectionField "addToMessageFromUser" [ Argument.required "fromUserId" requiredArgs.fromUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "sentMessageId" requiredArgs.sentMessageId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias AddToMessageOfChatRequiredArguments =
    { messagesMessageId : GraphCool.Scalar.Id, chatChatId : GraphCool.Scalar.Id }


addToMessageOfChat : AddToMessageOfChatRequiredArguments -> SelectionSet decodesTo GraphCool.Object.AddToMessageOfChatPayload -> Field (Maybe decodesTo) RootMutation
addToMessageOfChat requiredArgs object =
    Object.selectionField "addToMessageOfChat" [ Argument.required "messagesMessageId" requiredArgs.messagesMessageId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "chatChatId" requiredArgs.chatChatId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias AddToPoolOnChatRequiredArguments =
    { chatsChatId : GraphCool.Scalar.Id, poolPoolId : GraphCool.Scalar.Id }


addToPoolOnChat : AddToPoolOnChatRequiredArguments -> SelectionSet decodesTo GraphCool.Object.AddToPoolOnChatPayload -> Field (Maybe decodesTo) RootMutation
addToPoolOnChat requiredArgs object =
    Object.selectionField "addToPoolOnChat" [ Argument.required "chatsChatId" requiredArgs.chatsChatId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "poolPoolId" requiredArgs.poolPoolId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias AddToPoolOnUserRequiredArguments =
    { viewedUserId : GraphCool.Scalar.Id, viewedEventPoolId : GraphCool.Scalar.Id }


addToPoolOnUser : AddToPoolOnUserRequiredArguments -> SelectionSet decodesTo GraphCool.Object.AddToPoolOnUserPayload -> Field (Maybe decodesTo) RootMutation
addToPoolOnUser requiredArgs object =
    Object.selectionField "addToPoolOnUser" [ Argument.required "viewedUserId" requiredArgs.viewedUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "viewedEventPoolId" requiredArgs.viewedEventPoolId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias AddToRecipientOfChatRequiredArguments =
    { recipientUserId : GraphCool.Scalar.Id, recipientChatId : GraphCool.Scalar.Id }


addToRecipientOfChat : AddToRecipientOfChatRequiredArguments -> SelectionSet decodesTo GraphCool.Object.AddToRecipientOfChatPayload -> Field (Maybe decodesTo) RootMutation
addToRecipientOfChat requiredArgs object =
    Object.selectionField "addToRecipientOfChat" [ Argument.required "recipientUserId" requiredArgs.recipientUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "recipientChatId" requiredArgs.recipientChatId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias AddToUserIsHostRequiredArguments =
    { usersUserId : GraphCool.Scalar.Id, hostsHostId : GraphCool.Scalar.Id }


addToUserIsHost : AddToUserIsHostRequiredArguments -> SelectionSet decodesTo GraphCool.Object.AddToUserIsHostPayload -> Field (Maybe decodesTo) RootMutation
addToUserIsHost requiredArgs object =
    Object.selectionField "addToUserIsHost" [ Argument.required "usersUserId" requiredArgs.usersUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "hostsHostId" requiredArgs.hostsHostId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias AddToVenueOfEventRequiredArguments =
    { venuesVenueId : GraphCool.Scalar.Id, eventsEventId : GraphCool.Scalar.Id }


addToVenueOfEvent : AddToVenueOfEventRequiredArguments -> SelectionSet decodesTo GraphCool.Object.AddToVenueOfEventPayload -> Field (Maybe decodesTo) RootMutation
addToVenueOfEvent requiredArgs object =
    Object.selectionField "addToVenueOfEvent" [ Argument.required "venuesVenueId" requiredArgs.venuesVenueId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "eventsEventId" requiredArgs.eventsEventId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias RemoveFromAttendingEventRequiredArguments =
    { attendingUserId : GraphCool.Scalar.Id, attendingEventPoolId : GraphCool.Scalar.Id }


removeFromAttendingEvent : RemoveFromAttendingEventRequiredArguments -> SelectionSet decodesTo GraphCool.Object.RemoveFromAttendingEventPayload -> Field (Maybe decodesTo) RootMutation
removeFromAttendingEvent requiredArgs object =
    Object.selectionField "removeFromAttendingEvent" [ Argument.required "attendingUserId" requiredArgs.attendingUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "attendingEventPoolId" requiredArgs.attendingEventPoolId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias RemoveFromChatPassedRequiredArguments =
    { passedUserId : GraphCool.Scalar.Id, passedChatId : GraphCool.Scalar.Id }


removeFromChatPassed : RemoveFromChatPassedRequiredArguments -> SelectionSet decodesTo GraphCool.Object.RemoveFromChatPassedPayload -> Field (Maybe decodesTo) RootMutation
removeFromChatPassed requiredArgs object =
    Object.selectionField "removeFromChatPassed" [ Argument.required "passedUserId" requiredArgs.passedUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "passedChatId" requiredArgs.passedChatId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias RemoveFromChatProposedRequiredArguments =
    { proposedUserId : GraphCool.Scalar.Id, proposedChatId : GraphCool.Scalar.Id }


removeFromChatProposed : RemoveFromChatProposedRequiredArguments -> SelectionSet decodesTo GraphCool.Object.RemoveFromChatProposedPayload -> Field (Maybe decodesTo) RootMutation
removeFromChatProposed requiredArgs object =
    Object.selectionField "removeFromChatProposed" [ Argument.required "proposedUserId" requiredArgs.proposedUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "proposedChatId" requiredArgs.proposedChatId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias RemoveFromDateCanceledRequiredArguments =
    { canceledUserId : GraphCool.Scalar.Id, datesCanceledChatId : GraphCool.Scalar.Id }


removeFromDateCanceled : RemoveFromDateCanceledRequiredArguments -> SelectionSet decodesTo GraphCool.Object.RemoveFromDateCanceledPayload -> Field (Maybe decodesTo) RootMutation
removeFromDateCanceled requiredArgs object =
    Object.selectionField "removeFromDateCanceled" [ Argument.required "canceledUserId" requiredArgs.canceledUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "datesCanceledChatId" requiredArgs.datesCanceledChatId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias RemoveFromHostOfEventRequiredArguments =
    { hostsHostId : GraphCool.Scalar.Id, eventsEventId : GraphCool.Scalar.Id }


removeFromHostOfEvent : RemoveFromHostOfEventRequiredArguments -> SelectionSet decodesTo GraphCool.Object.RemoveFromHostOfEventPayload -> Field (Maybe decodesTo) RootMutation
removeFromHostOfEvent requiredArgs object =
    Object.selectionField "removeFromHostOfEvent" [ Argument.required "hostsHostId" requiredArgs.hostsHostId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "eventsEventId" requiredArgs.eventsEventId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias RemoveFromHostOfVenueRequiredArguments =
    { venuesVenueId : GraphCool.Scalar.Id, hostsHostId : GraphCool.Scalar.Id }


removeFromHostOfVenue : RemoveFromHostOfVenueRequiredArguments -> SelectionSet decodesTo GraphCool.Object.RemoveFromHostOfVenuePayload -> Field (Maybe decodesTo) RootMutation
removeFromHostOfVenue requiredArgs object =
    Object.selectionField "removeFromHostOfVenue" [ Argument.required "venuesVenueId" requiredArgs.venuesVenueId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "hostsHostId" requiredArgs.hostsHostId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias RemoveFromLikedEventRequiredArguments =
    { likedUserId : GraphCool.Scalar.Id, likedEventPoolId : GraphCool.Scalar.Id }


removeFromLikedEvent : RemoveFromLikedEventRequiredArguments -> SelectionSet decodesTo GraphCool.Object.RemoveFromLikedEventPayload -> Field (Maybe decodesTo) RootMutation
removeFromLikedEvent requiredArgs object =
    Object.selectionField "removeFromLikedEvent" [ Argument.required "likedUserId" requiredArgs.likedUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "likedEventPoolId" requiredArgs.likedEventPoolId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias RemoveFromMessageFromUserRequiredArguments =
    { fromUserId : GraphCool.Scalar.Id, sentMessageId : GraphCool.Scalar.Id }


removeFromMessageFromUser : RemoveFromMessageFromUserRequiredArguments -> SelectionSet decodesTo GraphCool.Object.RemoveFromMessageFromUserPayload -> Field (Maybe decodesTo) RootMutation
removeFromMessageFromUser requiredArgs object =
    Object.selectionField "removeFromMessageFromUser" [ Argument.required "fromUserId" requiredArgs.fromUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "sentMessageId" requiredArgs.sentMessageId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias RemoveFromPoolOnChatRequiredArguments =
    { chatsChatId : GraphCool.Scalar.Id, poolPoolId : GraphCool.Scalar.Id }


removeFromPoolOnChat : RemoveFromPoolOnChatRequiredArguments -> SelectionSet decodesTo GraphCool.Object.RemoveFromPoolOnChatPayload -> Field (Maybe decodesTo) RootMutation
removeFromPoolOnChat requiredArgs object =
    Object.selectionField "removeFromPoolOnChat" [ Argument.required "chatsChatId" requiredArgs.chatsChatId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "poolPoolId" requiredArgs.poolPoolId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias RemoveFromPoolOnUserRequiredArguments =
    { viewedUserId : GraphCool.Scalar.Id, viewedEventPoolId : GraphCool.Scalar.Id }


removeFromPoolOnUser : RemoveFromPoolOnUserRequiredArguments -> SelectionSet decodesTo GraphCool.Object.RemoveFromPoolOnUserPayload -> Field (Maybe decodesTo) RootMutation
removeFromPoolOnUser requiredArgs object =
    Object.selectionField "removeFromPoolOnUser" [ Argument.required "viewedUserId" requiredArgs.viewedUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "viewedEventPoolId" requiredArgs.viewedEventPoolId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias RemoveFromRecipientOfChatRequiredArguments =
    { recipientUserId : GraphCool.Scalar.Id, recipientChatId : GraphCool.Scalar.Id }


removeFromRecipientOfChat : RemoveFromRecipientOfChatRequiredArguments -> SelectionSet decodesTo GraphCool.Object.RemoveFromRecipientOfChatPayload -> Field (Maybe decodesTo) RootMutation
removeFromRecipientOfChat requiredArgs object =
    Object.selectionField "removeFromRecipientOfChat" [ Argument.required "recipientUserId" requiredArgs.recipientUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "recipientChatId" requiredArgs.recipientChatId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias RemoveFromUserIsHostRequiredArguments =
    { usersUserId : GraphCool.Scalar.Id, hostsHostId : GraphCool.Scalar.Id }


removeFromUserIsHost : RemoveFromUserIsHostRequiredArguments -> SelectionSet decodesTo GraphCool.Object.RemoveFromUserIsHostPayload -> Field (Maybe decodesTo) RootMutation
removeFromUserIsHost requiredArgs object =
    Object.selectionField "removeFromUserIsHost" [ Argument.required "usersUserId" requiredArgs.usersUserId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "hostsHostId" requiredArgs.hostsHostId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias RemoveFromVenueOfEventRequiredArguments =
    { venuesVenueId : GraphCool.Scalar.Id, eventsEventId : GraphCool.Scalar.Id }


removeFromVenueOfEvent : RemoveFromVenueOfEventRequiredArguments -> SelectionSet decodesTo GraphCool.Object.RemoveFromVenueOfEventPayload -> Field (Maybe decodesTo) RootMutation
removeFromVenueOfEvent requiredArgs object =
    Object.selectionField "removeFromVenueOfEvent" [ Argument.required "venuesVenueId" requiredArgs.venuesVenueId (\(GraphCool.Scalar.Id raw) -> Encode.string raw), Argument.required "eventsEventId" requiredArgs.eventsEventId (\(GraphCool.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias SigninUserOptionalArguments =
    { email : OptionalArgument GraphCool.InputObject.AuthProviderEmail, auth0 : OptionalArgument GraphCool.InputObject.AuthProviderAuth0 }


signinUser : (SigninUserOptionalArguments -> SigninUserOptionalArguments) -> SelectionSet decodesTo GraphCool.Object.SigninPayload -> Field decodesTo RootMutation
signinUser fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { email = Absent, auth0 = Absent }

        optionalArgs =
            [ Argument.optional "email" filledInOptionals.email GraphCool.InputObject.encodeAuthProviderEmail, Argument.optional "auth0" filledInOptionals.auth0 GraphCool.InputObject.encodeAuthProviderAuth0 ]
                |> List.filterMap identity
    in
    Object.selectionField "signinUser" optionalArgs object identity


type alias CreateUserOptionalArguments =
    { bio : OptionalArgument String, nameFull : OptionalArgument String, attendingEventIds : OptionalArgument (List GraphCool.Scalar.Id), attendingEvent : OptionalArgument (List GraphCool.InputObject.UserattendingEventPool), createdEventsIds : OptionalArgument (List GraphCool.Scalar.Id), createdEvents : OptionalArgument (List GraphCool.InputObject.UsercreatedEventsEvent), datesCanceledIds : OptionalArgument (List GraphCool.Scalar.Id), datesCanceled : OptionalArgument (List GraphCool.InputObject.UserdatesCanceledChat), hostsIds : OptionalArgument (List GraphCool.Scalar.Id), hosts : OptionalArgument (List GraphCool.InputObject.UserhostsHost), initiatedIds : OptionalArgument (List GraphCool.Scalar.Id), initiated : OptionalArgument (List GraphCool.InputObject.UserinitiatedChat), likedEventIds : OptionalArgument (List GraphCool.Scalar.Id), likedEvent : OptionalArgument (List GraphCool.InputObject.UserlikedEventPool), passedIds : OptionalArgument (List GraphCool.Scalar.Id), passed : OptionalArgument (List GraphCool.InputObject.UserpassedChat), proposedIds : OptionalArgument (List GraphCool.Scalar.Id), proposed : OptionalArgument (List GraphCool.InputObject.UserproposedChat), recipientIds : OptionalArgument (List GraphCool.Scalar.Id), recipient : OptionalArgument (List GraphCool.InputObject.UserrecipientChat), sentIds : OptionalArgument (List GraphCool.Scalar.Id), sent : OptionalArgument (List GraphCool.InputObject.UsersentMessage), viewedEventIds : OptionalArgument (List GraphCool.Scalar.Id), viewedEvent : OptionalArgument (List GraphCool.InputObject.UserviewedEventPool) }


type alias CreateUserRequiredArguments =
    { birthday : GraphCool.Scalar.DateTime, name : String, authProvider : GraphCool.InputObject.AuthProviderSignupData }


createUser : (CreateUserOptionalArguments -> CreateUserOptionalArguments) -> CreateUserRequiredArguments -> SelectionSet decodesTo GraphCool.Object.User -> Field (Maybe decodesTo) RootMutation
createUser fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { bio = Absent, nameFull = Absent, attendingEventIds = Absent, attendingEvent = Absent, createdEventsIds = Absent, createdEvents = Absent, datesCanceledIds = Absent, datesCanceled = Absent, hostsIds = Absent, hosts = Absent, initiatedIds = Absent, initiated = Absent, likedEventIds = Absent, likedEvent = Absent, passedIds = Absent, passed = Absent, proposedIds = Absent, proposed = Absent, recipientIds = Absent, recipient = Absent, sentIds = Absent, sent = Absent, viewedEventIds = Absent, viewedEvent = Absent }

        optionalArgs =
            [ Argument.optional "bio" filledInOptionals.bio Encode.string, Argument.optional "nameFull" filledInOptionals.nameFull Encode.string, Argument.optional "attendingEventIds" filledInOptionals.attendingEventIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "attendingEvent" filledInOptionals.attendingEvent (GraphCool.InputObject.encodeUserattendingEventPool |> Encode.list), Argument.optional "createdEventsIds" filledInOptionals.createdEventsIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "createdEvents" filledInOptionals.createdEvents (GraphCool.InputObject.encodeUsercreatedEventsEvent |> Encode.list), Argument.optional "datesCanceledIds" filledInOptionals.datesCanceledIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "datesCanceled" filledInOptionals.datesCanceled (GraphCool.InputObject.encodeUserdatesCanceledChat |> Encode.list), Argument.optional "hostsIds" filledInOptionals.hostsIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "hosts" filledInOptionals.hosts (GraphCool.InputObject.encodeUserhostsHost |> Encode.list), Argument.optional "initiatedIds" filledInOptionals.initiatedIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "initiated" filledInOptionals.initiated (GraphCool.InputObject.encodeUserinitiatedChat |> Encode.list), Argument.optional "likedEventIds" filledInOptionals.likedEventIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "likedEvent" filledInOptionals.likedEvent (GraphCool.InputObject.encodeUserlikedEventPool |> Encode.list), Argument.optional "passedIds" filledInOptionals.passedIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "passed" filledInOptionals.passed (GraphCool.InputObject.encodeUserpassedChat |> Encode.list), Argument.optional "proposedIds" filledInOptionals.proposedIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "proposed" filledInOptionals.proposed (GraphCool.InputObject.encodeUserproposedChat |> Encode.list), Argument.optional "recipientIds" filledInOptionals.recipientIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "recipient" filledInOptionals.recipient (GraphCool.InputObject.encodeUserrecipientChat |> Encode.list), Argument.optional "sentIds" filledInOptionals.sentIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "sent" filledInOptionals.sent (GraphCool.InputObject.encodeUsersentMessage |> Encode.list), Argument.optional "viewedEventIds" filledInOptionals.viewedEventIds ((\(GraphCool.Scalar.Id raw) -> Encode.string raw) |> Encode.list), Argument.optional "viewedEvent" filledInOptionals.viewedEvent (GraphCool.InputObject.encodeUserviewedEventPool |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionField "createUser" (optionalArgs ++ [ Argument.required "birthday" requiredArgs.birthday (\(GraphCool.Scalar.DateTime raw) -> Encode.string raw), Argument.required "name" requiredArgs.name Encode.string, Argument.required "authProvider" requiredArgs.authProvider GraphCool.InputObject.encodeAuthProviderSignupData ]) object (identity >> Decode.nullable)
