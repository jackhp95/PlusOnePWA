var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var events = model.events;
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'ChangeTo':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{route: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Input':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'SendChatMessage':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'NewMessage':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'ViewEvent':
				if (_p0._0.ctor === 'Just') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								events: _elm_lang$core$Native_Utils.update(
									events,
									{
										selectedEvent: _elm_lang$core$Maybe$Just(_p0._0._0)
									})
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								events: _elm_lang$core$Native_Utils.update(
									events,
									{selectedEvent: _elm_lang$core$Maybe$Nothing})
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'OnDatetime':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							events: _elm_lang$core$Native_Utils.update(
								events,
								{
									currentDatetime: _elm_lang$core$Maybe$Just(_p0._0)
								})
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				if (_p0._0.ctor === 'Ok') {
					var _p1 = _p0._0._0;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								events: _elm_lang$core$Native_Utils.update(
									events,
									{
										seatgeek: A2(
											_user$project$SeatGeekTypes$Reply,
											_p1.meta,
											A2(_elm_lang$core$Basics_ops['++'], events.seatgeek.events, _p1.events))
									})
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var _p2 = A2(_elm_lang$core$Debug$log, 'err', _p0._0._0);
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
		}
	});
var _user$project$Main$view = function (model) {
	return _user$project$View$render(model);
};
var _user$project$Main$getDatetime = A2(_elm_lang$core$Task$perform, _user$project$Types$OnDatetime, _elm_lang$core$Date$now);
var _user$project$Main$initCmd = _elm_lang$core$Platform_Cmd$batch(
	{
		ctor: '::',
		_0: _user$project$SeatGeek$askQuery(_user$project$SeatGeekTypes$initQuery),
		_1: {
			ctor: '::',
			_0: _user$project$Main$getDatetime,
			_1: {ctor: '[]'}
		}
	});
var _user$project$Main$init = {ctor: '_Tuple2', _0: _user$project$Types$initModel, _1: _user$project$Main$initCmd};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})();
var _user$project$Main$echoServer = 'wss://echo.websocket.org';
