var _user$project$Main$mouseMoveSubs = function (model) {
	var _p0 = model.pool.move;
	if (_p0.ctor === 'Nothing') {
		return _elm_lang$core$Platform_Sub$none;
	} else {
		return _elm_lang$core$Platform_Sub$batch(
			{
				ctor: '::',
				_0: _elm_lang$mouse$Mouse$moves(_user$project$Types$MouseMove),
				_1: {
					ctor: '::',
					_0: _elm_lang$mouse$Mouse$ups(_user$project$Types$MouseEnd),
					_1: {ctor: '[]'}
				}
			});
	}
};
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _elm_lang$window$Window$resizes(_user$project$Types$ResizePool),
			_1: {
				ctor: '::',
				_0: _user$project$Main$mouseMoveSubs(model),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var pool = model.pool;
		var client = model.client;
		var events = model.events;
		var _p1 = msg;
		switch (_p1.ctor) {
			case 'ChangeTo':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{route: _p1._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Input':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'SendChatMessage':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'NewMessage':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'ViewChat':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{route: _p1._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ViewEvent':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{route: _p1._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnDatetime':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							events: _elm_lang$core$Native_Utils.update(
								events,
								{
									currentDatetime: _elm_lang$core$Maybe$Just(_p1._0)
								})
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'TextAreaResizer':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							client: _elm_lang$core$Native_Utils.update(
								client,
								{textAreaHeight: _p1._0})
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'MouseStart':
				var _p3 = _p1._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							pool: _elm_lang$core$Native_Utils.update(
								pool,
								{
									move: _elm_lang$core$Maybe$Just(
										A2(_user$project$Types$Move, _p3, _p3))
								})
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'MouseMove':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							pool: _elm_lang$core$Native_Utils.update(
								pool,
								{
									move: A2(
										_elm_lang$core$Maybe$map,
										function (_p4) {
											var _p5 = _p4;
											return A2(_user$project$Types$Move, _p5.start, _p1._0);
										},
										pool.move)
								})
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'MouseEnd':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							pool: _elm_lang$core$Native_Utils.update(
								pool,
								{
									position: _user$project$Pages_Pool$getPosition(pool),
									move: _elm_lang$core$Maybe$Nothing
								})
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ResizePool':
				var _p6 = _p1._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							pool: _elm_lang$core$Native_Utils.update(
								pool,
								{
									windowSize: _p6,
									tubers: A2(_user$project$Pages_Pool$determineTubers, pool, _p6)
								})
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'InitialWindow':
				var _p7 = _p1._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							pool: _elm_lang$core$Native_Utils.update(
								pool,
								{
									windowSize: _p7,
									tubers: A2(_user$project$Pages_Pool$determineTubers, pool, _p7)
								})
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				if (_p1._0.ctor === 'Ok') {
					var _p2 = _p1._0._0;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								events: _elm_lang$core$Native_Utils.update(
									events,
									{
										seatgeek: _elm_lang$core$Maybe$Just(
											A2(_user$project$SeatGeek_Types$Reply, _p2.meta, _p2.events))
									})
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var _p8 = A2(_elm_lang$core$Debug$log, 'err', _p1._0._0);
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
		}
	});
var _user$project$Main$view = function (model) {
	return _user$project$View$render(model);
};
var _user$project$Main$getDatetime = A2(_elm_lang$core$Task$perform, _user$project$Types$OnDatetime, _elm_lang$core$Date$now);
var _user$project$Main$initWindow = A2(_elm_lang$core$Task$perform, _user$project$Types$InitialWindow, _elm_lang$window$Window$size);
var _user$project$Main$initCmd = _elm_lang$core$Platform_Cmd$batch(
	{
		ctor: '::',
		_0: _user$project$SeatGeek_Query$askQuery(_user$project$SeatGeek_Types$initQuery),
		_1: {
			ctor: '::',
			_0: _user$project$Main$getDatetime,
			_1: {
				ctor: '::',
				_0: _user$project$Main$initWindow,
				_1: {ctor: '[]'}
			}
		}
	});
var _user$project$Main$init = {ctor: '_Tuple2', _0: _user$project$Types$initModel, _1: _user$project$Main$initCmd};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})();
var _user$project$Main$echoServer = 'wss://echo.websocket.org';
