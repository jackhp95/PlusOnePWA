var _user$project$Pages_Pool$onMouseDown = A2(
	_elm_lang$html$Html_Events$on,
	'mousedown',
	A2(_elm_lang$core$Json_Decode$map, _user$project$Types$MouseStart, _elm_lang$mouse$Mouse$position));
var _user$project$Pages_Pool$getPosition = function (model) {
	var _p0 = model.move;
	if (_p0.ctor === 'Nothing') {
		return model.position;
	} else {
		var _p2 = _p0._0.start;
		var _p1 = _p0._0.current;
		return A2(_elm_lang$mouse$Mouse$Position, (model.position.x + _p1.x) - _p2.x, (model.position.y + _p1.y) - _p2.y);
	}
};
var _user$project$Pages_Pool$px = function (number) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(number),
		'px');
};
var _user$project$Pages_Pool$tubePop = function (tube) {
	return A4(_user$project$Types$Tube, tube.pop, tube.ring, tube.spacing, tube.diameter);
};
var _user$project$Pages_Pool$spaceY = function (spacing) {
	return _elm_lang$core$Basics$round(
		A2(
			F2(
				function (x, y) {
					return x * y;
				}),
			_elm_lang$core$Basics$sin(
				_elm_lang$core$Basics$degrees(30)),
			_elm_lang$core$Basics$toFloat(spacing)) / 2);
};
var _user$project$Pages_Pool$staggerTubes = F3(
	function (x, y, spacing) {
		var otherRow = A2(
			_elm_lang$core$Basics_ops['%'],
			(y / _user$project$Pages_Pool$spaceY(spacing)) | 0,
			2);
		var _p3 = otherRow;
		if (_p3 === 1) {
			return A2(_elm_lang$mouse$Mouse$Position, x + ((spacing / 2) | 0), y);
		} else {
			return A2(_elm_lang$mouse$Mouse$Position, x, y);
		}
	});
var _user$project$Pages_Pool$poolSize = F2(
	function (model, windowSize) {
		var paddedHeight = _elm_lang$core$Basics$toFloat(windowSize.height + model.tube.diameter);
		var paddedWidth = _elm_lang$core$Basics$toFloat(windowSize.width + model.tube.diameter);
		var spacingY = _user$project$Pages_Pool$spaceY(model.tube.spacing) * 2;
		var spacingX = model.tube.spacing;
		return A2(
			_elm_lang$window$Window$Size,
			_elm_lang$core$Basics$ceiling(
				paddedWidth / _elm_lang$core$Basics$toFloat(spacingX)) * spacingX,
			_elm_lang$core$Basics$ceiling(
				paddedHeight / _elm_lang$core$Basics$toFloat(spacingY)) * spacingY);
	});
var _user$project$Pages_Pool$determineTubers = F2(
	function (model, windowSize) {
		var poolCols = A2(
			_elm_lang$core$List$range,
			0,
			(function (_) {
				return _.height;
			}(
				A2(_user$project$Pages_Pool$poolSize, model, windowSize)) / _user$project$Pages_Pool$spaceY(model.tube.spacing)) | 0);
		var poolRows = A2(
			_elm_lang$core$List$range,
			0,
			(function (_) {
				return _.width;
			}(
				A2(_user$project$Pages_Pool$poolSize, model, windowSize)) / model.tube.spacing) | 0);
		return A2(
			_elm_lang$core$List$indexedMap,
			_user$project$Types$Tuber,
			A2(
				_elm_lang$core$List$concatMap,
				function (x) {
					return A2(
						_elm_lang$core$List$map,
						function (y) {
							return A3(_user$project$Pages_Pool$staggerTubes, x, y, model.tube.spacing);
						},
						A2(
							_elm_lang$core$List$map,
							F2(
								function (x, y) {
									return x * y;
								})(
								_user$project$Pages_Pool$spaceY(model.tube.spacing)),
							poolCols));
				},
				A2(
					_elm_lang$core$List$map,
					F2(
						function (x, y) {
							return x * y;
						})(model.tube.spacing),
					poolRows)));
	});
var _user$project$Pages_Pool_ops = _user$project$Pages_Pool_ops || {};
_user$project$Pages_Pool_ops['=>'] = F2(
	function (v0, v1) {
		return {ctor: '_Tuple2', _0: v0, _1: v1};
	});
var _user$project$Pages_Pool$tubeUser = function (user) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: A2(_user$project$Pages_Pool_ops['=>'], 'background', 'url(\'https://randomuser.me/api/portraits/men/4.jpg\')'),
					_1: {
						ctor: '::',
						_0: A2(_user$project$Pages_Pool_ops['=>'], 'height', '100%'),
						_1: {
							ctor: '::',
							_0: A2(_user$project$Pages_Pool_ops['=>'], 'width', '100%'),
							_1: {
								ctor: '::',
								_0: A2(_user$project$Pages_Pool_ops['=>'], 'background-size', 'cover'),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		},
		{ctor: '[]'});
};
var _user$project$Pages_Pool$modelTube = F2(
	function (model, tuber) {
		var y = A2(
			F2(
				function (x, y) {
					return A2(_elm_lang$core$Basics_ops['%'], x, y);
				}),
			tuber.offset.y + function (_) {
				return _.y;
			}(
				_user$project$Pages_Pool$getPosition(model)),
			function (_) {
				return _.height;
			}(
				A2(_user$project$Pages_Pool$poolSize, model, model.windowSize))) - ((model.tube.diameter / 2) | 0);
		var x = A2(
			F2(
				function (x, y) {
					return A2(_elm_lang$core$Basics_ops['%'], x, y);
				}),
			tuber.offset.x + function (_) {
				return _.x;
			}(
				_user$project$Pages_Pool$getPosition(model)),
			function (_) {
				return _.width;
			}(
				A2(_user$project$Pages_Pool$poolSize, model, model.windowSize))) - ((model.tube.diameter / 2) | 0);
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('dim'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: A2(_user$project$Pages_Pool_ops['=>'], 'padding', '5px'),
							_1: {
								ctor: '::',
								_0: A2(_user$project$Pages_Pool_ops['=>'], 'box-sizing', 'border-box'),
								_1: {
									ctor: '::',
									_0: A2(_user$project$Pages_Pool_ops['=>'], 'border', '2px solid green'),
									_1: {
										ctor: '::',
										_0: A2(
											_user$project$Pages_Pool_ops['=>'],
											'transform',
											A2(
												_elm_lang$core$Basics_ops['++'],
												'translate(calc(-50% + ',
												A2(
													_elm_lang$core$Basics_ops['++'],
													_user$project$Pages_Pool$px(x),
													A2(
														_elm_lang$core$Basics_ops['++'],
														'), calc(-50% + ',
														A2(
															_elm_lang$core$Basics_ops['++'],
															_user$project$Pages_Pool$px(y),
															')'))))),
										_1: {
											ctor: '::',
											_0: A2(_user$project$Pages_Pool_ops['=>'], 'border-radius', '50%'),
											_1: {
												ctor: '::',
												_0: A2(_user$project$Pages_Pool_ops['=>'], 'position', 'absolute'),
												_1: {
													ctor: '::',
													_0: A2(_user$project$Pages_Pool_ops['=>'], 'overflow', 'hidden'),
													_1: {
														ctor: '::',
														_0: A2(
															_user$project$Pages_Pool_ops['=>'],
															'width',
															_user$project$Pages_Pool$px(model.tube.diameter)),
														_1: {
															ctor: '::',
															_0: A2(
																_user$project$Pages_Pool_ops['=>'],
																'height',
																_user$project$Pages_Pool$px(model.tube.diameter)),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: A2(_user$project$Pages_Pool_ops['=>'], 'height', '100%'),
								_1: {
									ctor: '::',
									_0: A2(_user$project$Pages_Pool_ops['=>'], 'border-radius', '50%'),
									_1: {
										ctor: '::',
										_0: A2(_user$project$Pages_Pool_ops['=>'], 'overflow', 'hidden'),
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _user$project$Pages_Pool$tubeUser(
							_elm_lang$core$List$head(model.users)),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Pages_Pool$populateTubes = function (model) {
	return A2(
		_elm_lang$core$List$map,
		_user$project$Pages_Pool$modelTube(model),
		model.tubers);
};
var _user$project$Pages_Pool$view = function (pool) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('overflow-hidden bg-black-80 flex-auto'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _user$project$Pages_Pool$onMouseDown,
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('flex-auto overflow-hidden'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: A2(_user$project$Pages_Pool_ops['=>'], 'cursor', 'move'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				},
				_user$project$Pages_Pool$populateTubes(pool)),
			_1: {ctor: '[]'}
		});
};
